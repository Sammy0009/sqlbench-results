AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   LocalTableScan <empty>, [s_acctbal#113, s_name#109, n_name#49, p_partkey#74L, p_mfgr#76, s_address#110, s_phone#112, s_comment#114]
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[s_acctbal#113 DESC NULLS LAST,n_name#49 ASC NULLS FIRST,s_name#109 ASC NULLS FIRST,p_partkey#74L ASC NULLS FIRST], output=[s_acctbal#113,s_name#109,n_name#49,p_partkey#74L,p_mfgr#76,s_address#110,s_phone#112,s_comment#114])
   +- Project [s_acctbal#113, s_name#109, n_name#49, p_partkey#74L, p_mfgr#76, s_address#110, s_phone#112, s_comment#114]
      +- BroadcastHashJoin [n_regionkey#50L], [r_regionkey#102L], Inner, BuildRight, false
         :- Project [p_partkey#74L, p_mfgr#76, s_name#109, s_address#110, s_phone#112, s_acctbal#113, s_comment#114, n_name#49, n_regionkey#50L]
         :  +- BroadcastHashJoin [s_nationkey#111L], [n_nationkey#48L], Inner, BuildRight, false
         :     :- Project [p_partkey#74L, p_mfgr#76, s_name#109, s_address#110, s_nationkey#111L, s_phone#112, s_acctbal#113, s_comment#114]
         :     :  +- BroadcastHashJoin [ps_suppkey#93L], [s_suppkey#108L], Inner, BuildRight, false
         :     :     :- Project [p_partkey#74L, p_mfgr#76, ps_suppkey#93L]
         :     :     :  +- SortMergeJoin [ps_supplycost#95, p_partkey#74L], [min(ps_supplycost)#247, ps_partkey#248L], Inner
         :     :     :     :- Sort [ps_supplycost#95 ASC NULLS FIRST, p_partkey#74L ASC NULLS FIRST], false, 0
         :     :     :     :  +- Exchange hashpartitioning(ps_supplycost#95, p_partkey#74L, 200), ENSURE_REQUIREMENTS, [id=#318]
         :     :     :     :     +- Project [p_partkey#74L, p_mfgr#76, ps_suppkey#93L, ps_supplycost#95]
         :     :     :     :        +- SortMergeJoin [p_partkey#74L], [ps_partkey#92L], Inner
         :     :     :     :           :- Sort [p_partkey#74L ASC NULLS FIRST], false, 0
         :     :     :     :           :  +- Exchange hashpartitioning(p_partkey#74L, 200), ENSURE_REQUIREMENTS, [id=#294]
         :     :     :     :           :     +- Project [p_partkey#74L, p_mfgr#76]
         :     :     :     :           :        +- Filter ((((isnotnull(p_size#79) AND isnotnull(p_type#78)) AND (p_size#79 = 8)) AND EndsWith(p_type#78, BRASS)) AND isnotnull(p_partkey#74L))
         :     :     :     :           :           +- FileScan parquet [p_partkey#74L,p_mfgr#76,p_type#78,p_size#79] Batched: true, DataFilters: [isnotnull(p_size#79), isnotnull(p_type#78), (p_size#79 = 8), EndsWith(p_type#78, BRASS), isnotnu..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf10-parquet/part.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(p_size), IsNotNull(p_type), EqualTo(p_size,8), StringEndsWith(p_type,BRASS), IsNotNull..., ReadSchema: struct<p_partkey:bigint,p_mfgr:string,p_type:string,p_size:int>
         :     :     :     :           +- Sort [ps_partkey#92L ASC NULLS FIRST], false, 0
         :     :     :     :              +- Exchange hashpartitioning(ps_partkey#92L, 200), ENSURE_REQUIREMENTS, [id=#295]
         :     :     :     :                 +- Filter ((isnotnull(ps_partkey#92L) AND isnotnull(ps_supplycost#95)) AND isnotnull(ps_suppkey#93L))
         :     :     :     :                    +- FileScan parquet [ps_partkey#92L,ps_suppkey#93L,ps_supplycost#95] Batched: true, DataFilters: [isnotnull(ps_partkey#92L), isnotnull(ps_supplycost#95), isnotnull(ps_suppkey#93L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf10-parquet/partsupp.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ps_partkey), IsNotNull(ps_supplycost), IsNotNull(ps_suppkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(11,2)>
         :     :     :     +- Sort [min(ps_supplycost)#247 ASC NULLS FIRST, ps_partkey#248L ASC NULLS FIRST], false, 0
         :     :     :        +- Exchange hashpartitioning(min(ps_supplycost)#247, ps_partkey#248L, 200), ENSURE_REQUIREMENTS, [id=#319]
         :     :     :           +- Filter isnotnull(min(ps_supplycost)#247)
         :     :     :              +- HashAggregate(keys=[ps_partkey#248L], functions=[min(ps_supplycost#251)], output=[min(ps_supplycost)#247, ps_partkey#248L])
         :     :     :                 +- Exchange hashpartitioning(ps_partkey#248L, 200), ENSURE_REQUIREMENTS, [id=#313]
         :     :     :                    +- HashAggregate(keys=[ps_partkey#248L], functions=[partial_min(ps_supplycost#251)], output=[ps_partkey#248L, min#276])
         :     :     :                       +- Project [ps_partkey#248L, ps_supplycost#251]
         :     :     :                          +- BroadcastHashJoin [n_regionkey#262L], [r_regionkey#264L], Inner, BuildRight, false
         :     :     :                             :- Project [ps_partkey#248L, ps_supplycost#251, n_regionkey#262L]
         :     :     :                             :  +- BroadcastHashJoin [s_nationkey#256L], [n_nationkey#260L], Inner, BuildRight, false
         :     :     :                             :     :- Project [ps_partkey#248L, ps_supplycost#251, s_nationkey#256L]
         :     :     :                             :     :  +- BroadcastHashJoin [ps_suppkey#249L], [s_suppkey#253L], Inner, BuildRight, false
         :     :     :                             :     :     :- Filter (isnotnull(ps_suppkey#249L) AND isnotnull(ps_partkey#248L))
         :     :     :                             :     :     :  +- FileScan parquet [ps_partkey#248L,ps_suppkey#249L,ps_supplycost#251] Batched: true, DataFilters: [isnotnull(ps_suppkey#249L), isnotnull(ps_partkey#248L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf10-parquet/partsupp.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(11,2)>
         :     :     :                             :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [id=#300]
         :     :     :                             :     :        +- Filter (isnotnull(s_suppkey#253L) AND isnotnull(s_nationkey#256L))
         :     :     :                             :     :           +- FileScan parquet [s_suppkey#253L,s_nationkey#256L] Batched: true, DataFilters: [isnotnull(s_suppkey#253L), isnotnull(s_nationkey#256L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf10-parquet/supplier.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>
         :     :     :                             :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [id=#304]
         :     :     :                             :        +- Filter (isnotnull(n_nationkey#260L) AND isnotnull(n_regionkey#262L))
         :     :     :                             :           +- FileScan parquet [n_nationkey#260L,n_regionkey#262L] Batched: true, DataFilters: [isnotnull(n_nationkey#260L), isnotnull(n_regionkey#262L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf10-parquet/nation.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>
         :     :     :                             +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#308]
         :     :     :                                +- Project [r_regionkey#264L]
         :     :     :                                   +- Filter ((isnotnull(r_name#265) AND (r_name#265 = EUROPE)) AND isnotnull(r_regionkey#264L))
         :     :     :                                      +- FileScan parquet [r_regionkey#264L,r_name#265] Batched: true, DataFilters: [isnotnull(r_name#265), (r_name#265 = EUROPE), isnotnull(r_regionkey#264L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf10-parquet/region.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,EUROPE), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>
         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [id=#325]
         :     :        +- Filter (isnotnull(s_suppkey#108L) AND isnotnull(s_nationkey#111L))
         :     :           +- FileScan parquet [s_suppkey#108L,s_name#109,s_address#110,s_nationkey#111L,s_phone#112,s_acctbal#113,s_comment#114] Batched: true, DataFilters: [isnotnull(s_suppkey#108L), isnotnull(s_nationkey#111L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf10-parquet/supplier.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_nationkey:bigint,s_phone:string,s_acctba...
         :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [id=#329]
         :        +- Filter (isnotnull(n_nationkey#48L) AND isnotnull(n_regionkey#50L))
         :           +- FileScan parquet [n_nationkey#48L,n_name#49,n_regionkey#50L] Batched: true, DataFilters: [isnotnull(n_nationkey#48L), isnotnull(n_regionkey#50L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf10-parquet/nation.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint>
         +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#333]
            +- Project [r_regionkey#102L]
               +- Filter ((isnotnull(r_name#103) AND (r_name#103 = EUROPE)) AND isnotnull(r_regionkey#102L))
                  +- FileScan parquet [r_regionkey#102L,r_name#103] Batched: true, DataFilters: [isnotnull(r_name#103), (r_name#103 = EUROPE), isnotnull(r_regionkey#102L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf10-parquet/region.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,EUROPE), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>
