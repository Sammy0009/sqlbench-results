AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(6) HashAggregate(keys=[], functions=[sum(CASE WHEN StartsWith(p_type#78, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#21 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#22 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true) ELSE 0.0000 END), sum(CheckOverflow((promote_precision(cast(l_extendedprice#21 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#22 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true))], output=[promo_revenue#570])
   +- ShuffleQueryStage 2
      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#4346]
         +- *(5) HashAggregate(keys=[], functions=[partial_sum(CASE WHEN StartsWith(p_type#78, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#21 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#22 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true) ELSE 0.0000 END), partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#21 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#22 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true))], output=[sum#578, isEmpty#579, sum#580, isEmpty#581])
            +- *(5) Project [l_extendedprice#21, l_discount#22, p_type#78]
               +- *(5) SortMergeJoin [l_partkey#17L], [p_partkey#74L], Inner
                  :- *(3) Sort [l_partkey#17L ASC NULLS FIRST], false, 0
                  :  +- AQEShuffleRead coalesced
                  :     +- ShuffleQueryStage 0
                  :        +- Exchange hashpartitioning(l_partkey#17L, 200), ENSURE_REQUIREMENTS, [id=#4235]
                  :           +- *(1) Project [l_partkey#17L, l_extendedprice#21, l_discount#22]
                  :              +- *(1) Filter (((isnotnull(l_shipdate#26) AND (l_shipdate#26 >= 1994-10-01)) AND (l_shipdate#26 < 1994-11-01)) AND isnotnull(l_partkey#17L))
                  :                 +- *(1) ColumnarToRow
                  :                    +- FileScan parquet [l_partkey#17L,l_extendedprice#21,l_discount#22,l_shipdate#26] Batched: true, DataFilters: [isnotnull(l_shipdate#26), (l_shipdate#26 >= 1994-10-01), (l_shipdate#26 < 1994-11-01), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf10-parquet/lineitem.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1994-10-01), LessThan(l_shipdate,1994-11-01..., ReadSchema: struct<l_partkey:bigint,l_extendedprice:decimal(11,2),l_discount:decimal(11,2),l_shipdate:date>
                  +- *(4) Sort [p_partkey#74L ASC NULLS FIRST], false, 0
                     +- AQEShuffleRead coalesced
                        +- ShuffleQueryStage 1
                           +- Exchange hashpartitioning(p_partkey#74L, 200), ENSURE_REQUIREMENTS, [id=#4254]
                              +- *(2) Filter isnotnull(p_partkey#74L)
                                 +- *(2) ColumnarToRow
                                    +- FileScan parquet [p_partkey#74L,p_type#78] Batched: true, DataFilters: [isnotnull(p_partkey#74L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf10-parquet/part.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(p_partkey)], ReadSchema: struct<p_partkey:bigint,p_type:string>
+- == Initial Plan ==
   HashAggregate(keys=[], functions=[sum(CASE WHEN StartsWith(p_type#78, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#21 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#22 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true) ELSE 0.0000 END), sum(CheckOverflow((promote_precision(cast(l_extendedprice#21 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#22 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true))], output=[promo_revenue#570])
   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#4201]
      +- HashAggregate(keys=[], functions=[partial_sum(CASE WHEN StartsWith(p_type#78, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#21 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#22 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true) ELSE 0.0000 END), partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#21 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#22 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true))], output=[sum#578, isEmpty#579, sum#580, isEmpty#581])
         +- Project [l_extendedprice#21, l_discount#22, p_type#78]
            +- SortMergeJoin [l_partkey#17L], [p_partkey#74L], Inner
               :- Sort [l_partkey#17L ASC NULLS FIRST], false, 0
               :  +- Exchange hashpartitioning(l_partkey#17L, 200), ENSURE_REQUIREMENTS, [id=#4193]
               :     +- Project [l_partkey#17L, l_extendedprice#21, l_discount#22]
               :        +- Filter (((isnotnull(l_shipdate#26) AND (l_shipdate#26 >= 1994-10-01)) AND (l_shipdate#26 < 1994-11-01)) AND isnotnull(l_partkey#17L))
               :           +- FileScan parquet [l_partkey#17L,l_extendedprice#21,l_discount#22,l_shipdate#26] Batched: true, DataFilters: [isnotnull(l_shipdate#26), (l_shipdate#26 >= 1994-10-01), (l_shipdate#26 < 1994-11-01), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf10-parquet/lineitem.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1994-10-01), LessThan(l_shipdate,1994-11-01..., ReadSchema: struct<l_partkey:bigint,l_extendedprice:decimal(11,2),l_discount:decimal(11,2),l_shipdate:date>
               +- Sort [p_partkey#74L ASC NULLS FIRST], false, 0
                  +- Exchange hashpartitioning(p_partkey#74L, 200), ENSURE_REQUIREMENTS, [id=#4194]
                     +- Filter isnotnull(p_partkey#74L)
                        +- FileScan parquet [p_partkey#74L,p_type#78] Batched: true, DataFilters: [isnotnull(p_partkey#74L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf10-parquet/part.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(p_partkey)], ReadSchema: struct<p_partkey:bigint,p_type:string>
