AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   LocalTableScan <empty>, [ps_partkey#92L, value#457]
+- == Initial Plan ==
   Sort [value#457 DESC NULLS LAST], true, 0
   +- Exchange rangepartitioning(value#457 DESC NULLS LAST, 200), ENSURE_REQUIREMENTS, [id=#3193]
      +- Filter (isnotnull(value#457) AND (cast(value#457 as decimal(38,7)) > Subquery subquery#458, [id=#3168]))
         :  +- Subquery subquery#458, [id=#3168]
         :     +- AdaptiveSparkPlan isFinalPlan=true
               +- == Final Plan ==
                  *(5) HashAggregate(keys=[], functions=[sum(CheckOverflow((promote_precision(cast(ps_supplycost#466 as decimal(12,2))) * promote_precision(cast(cast(ps_availqty#465 as decimal(10,0)) as decimal(12,2)))), DecimalType(22,2), true))], output=[(sum((ps_supplycost * ps_availqty)) * 0.0000100000)#461])
                  +- ShuffleQueryStage 6
                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#3485]
                        +- *(4) HashAggregate(keys=[], functions=[partial_sum(CheckOverflow((promote_precision(cast(ps_supplycost#466 as decimal(12,2))) * promote_precision(cast(cast(ps_availqty#465 as decimal(10,0)) as decimal(12,2)))), DecimalType(22,2), true))], output=[sum#492, isEmpty#493])
                           +- *(4) Project [ps_availqty#465, ps_supplycost#466]
                              +- *(4) BroadcastHashJoin [s_nationkey#471L], [n_nationkey#475L], Inner, BuildRight, false
                                 :- *(4) Project [ps_availqty#465, ps_supplycost#466, s_nationkey#471L]
                                 :  +- *(4) BroadcastHashJoin [ps_suppkey#464L], [s_suppkey#468L], Inner, BuildRight, false
                                 :     :- *(4) Filter isnotnull(ps_suppkey#464L)
                                 :     :  +- *(4) ColumnarToRow
                                 :     :     +- FileScan parquet [ps_suppkey#464L,ps_availqty#465,ps_supplycost#466] Batched: true, DataFilters: [isnotnull(ps_suppkey#464L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf10-parquet/partsupp.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ps_suppkey)], ReadSchema: struct<ps_suppkey:bigint,ps_availqty:int,ps_supplycost:decimal(11,2)>
                                 :     +- BroadcastQueryStage 1
                                 :        +- ReusedExchange [s_suppkey#468L, s_nationkey#471L], BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [id=#3261]
                                 +- BroadcastQueryStage 5
                                    +- ReusedExchange [n_nationkey#475L], BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#3280]
               +- == Initial Plan ==
                  HashAggregate(keys=[], functions=[sum(CheckOverflow((promote_precision(cast(ps_supplycost#466 as decimal(12,2))) * promote_precision(cast(cast(ps_availqty#465 as decimal(10,0)) as decimal(12,2)))), DecimalType(22,2), true))], output=[(sum((ps_supplycost * ps_availqty)) * 0.0000100000)#461])
                  +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#3166]
                     +- HashAggregate(keys=[], functions=[partial_sum(CheckOverflow((promote_precision(cast(ps_supplycost#466 as decimal(12,2))) * promote_precision(cast(cast(ps_availqty#465 as decimal(10,0)) as decimal(12,2)))), DecimalType(22,2), true))], output=[sum#492, isEmpty#493])
                        +- Project [ps_availqty#465, ps_supplycost#466]
                           +- BroadcastHashJoin [s_nationkey#471L], [n_nationkey#475L], Inner, BuildRight, false
                              :- Project [ps_availqty#465, ps_supplycost#466, s_nationkey#471L]
                              :  +- BroadcastHashJoin [ps_suppkey#464L], [s_suppkey#468L], Inner, BuildRight, false
                              :     :- Filter isnotnull(ps_suppkey#464L)
                              :     :  +- FileScan parquet [ps_suppkey#464L,ps_availqty#465,ps_supplycost#466] Batched: true, DataFilters: [isnotnull(ps_suppkey#464L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf10-parquet/partsupp.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ps_suppkey)], ReadSchema: struct<ps_suppkey:bigint,ps_availqty:int,ps_supplycost:decimal(11,2)>
                              :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [id=#3157]
                              :        +- Filter (isnotnull(s_suppkey#468L) AND isnotnull(s_nationkey#471L))
                              :           +- FileScan parquet [s_suppkey#468L,s_nationkey#471L] Batched: true, DataFilters: [isnotnull(s_suppkey#468L), isnotnull(s_nationkey#471L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf10-parquet/supplier.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>
                              +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#3161]
                                 +- Project [n_nationkey#475L]
                                    +- Filter ((isnotnull(n_name#476) AND (n_name#476 = PERU)) AND isnotnull(n_nationkey#475L))
                                       +- FileScan parquet [n_nationkey#475L,n_name#476] Batched: true, DataFilters: [isnotnull(n_name#476), (n_name#476 = PERU), isnotnull(n_nationkey#475L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf10-parquet/nation.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,PERU), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>
         +- HashAggregate(keys=[ps_partkey#92L], functions=[sum(CheckOverflow((promote_precision(cast(ps_supplycost#95 as decimal(12,2))) * promote_precision(cast(cast(ps_availqty#94 as decimal(10,0)) as decimal(12,2)))), DecimalType(22,2), true))], output=[ps_partkey#92L, value#457])
            +- Exchange hashpartitioning(ps_partkey#92L, 200), ENSURE_REQUIREMENTS, [id=#3189]
               +- HashAggregate(keys=[ps_partkey#92L], functions=[partial_sum(CheckOverflow((promote_precision(cast(ps_supplycost#95 as decimal(12,2))) * promote_precision(cast(cast(ps_availqty#94 as decimal(10,0)) as decimal(12,2)))), DecimalType(22,2), true))], output=[ps_partkey#92L, sum#488, isEmpty#489])
                  +- Project [ps_partkey#92L, ps_availqty#94, ps_supplycost#95]
                     +- BroadcastHashJoin [s_nationkey#111L], [n_nationkey#48L], Inner, BuildRight, false
                        :- Project [ps_partkey#92L, ps_availqty#94, ps_supplycost#95, s_nationkey#111L]
                        :  +- BroadcastHashJoin [ps_suppkey#93L], [s_suppkey#108L], Inner, BuildRight, false
                        :     :- Filter isnotnull(ps_suppkey#93L)
                        :     :  +- FileScan parquet [ps_partkey#92L,ps_suppkey#93L,ps_availqty#94,ps_supplycost#95] Batched: true, DataFilters: [isnotnull(ps_suppkey#93L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf10-parquet/partsupp.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ps_suppkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int,ps_supplycost:decimal(11,2)>
                        :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [id=#3180]
                        :        +- Filter (isnotnull(s_suppkey#108L) AND isnotnull(s_nationkey#111L))
                        :           +- FileScan parquet [s_suppkey#108L,s_nationkey#111L] Batched: true, DataFilters: [isnotnull(s_suppkey#108L), isnotnull(s_nationkey#111L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf10-parquet/supplier.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>
                        +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#3184]
                           +- Project [n_nationkey#48L]
                              +- Filter ((isnotnull(n_name#49) AND (n_name#49 = PERU)) AND isnotnull(n_nationkey#48L))
                                 +- FileScan parquet [n_nationkey#48L,n_name#49] Batched: true, DataFilters: [isnotnull(n_name#49), (n_name#49 = PERU), isnotnull(n_nationkey#48L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf10-parquet/nation.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,PERU), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>
