AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   LocalTableScan <empty>, [supp_nation#344, cust_nation#345, l_year#346, revenue#348]
+- == Initial Plan ==
   Sort [supp_nation#344 ASC NULLS FIRST, cust_nation#345 ASC NULLS FIRST, l_year#346 ASC NULLS FIRST], true, 0
   +- Exchange rangepartitioning(supp_nation#344 ASC NULLS FIRST, cust_nation#345 ASC NULLS FIRST, l_year#346 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#1839]
      +- HashAggregate(keys=[supp_nation#344, cust_nation#345, l_year#346], functions=[sum(volume#347)], output=[supp_nation#344, cust_nation#345, l_year#346, revenue#348])
         +- Exchange hashpartitioning(supp_nation#344, cust_nation#345, l_year#346, 200), ENSURE_REQUIREMENTS, [id=#1836]
            +- HashAggregate(keys=[supp_nation#344, cust_nation#345, l_year#346], functions=[partial_sum(volume#347)], output=[supp_nation#344, cust_nation#345, l_year#346, sum#360, isEmpty#361])
               +- Project [n_name#43 AS supp_nation#344, n_name#350 AS cust_nation#345, year(l_shipdate#84) AS l_year#346, CheckOverflow((promote_precision(cast(l_extendedprice#79 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#80 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true) AS volume#347]
                  +- BroadcastHashJoin [c_nationkey#109L], [n_nationkey#349L], Inner, BuildRight, (((n_name#43 = JORDAN) AND (n_name#350 = CHINA)) OR ((n_name#43 = CHINA) AND (n_name#350 = JORDAN))), false
                     :- Project [l_extendedprice#79, l_discount#80, l_shipdate#84, c_nationkey#109L, n_name#43]
                     :  +- BroadcastHashJoin [s_nationkey#3L], [n_nationkey#42L], Inner, BuildRight, false
                     :     :- Project [s_nationkey#3L, l_extendedprice#79, l_discount#80, l_shipdate#84, c_nationkey#109L]
                     :     :  +- SortMergeJoin [o_custkey#57L], [c_custkey#106L], Inner
                     :     :     :- Sort [o_custkey#57L ASC NULLS FIRST], false, 0
                     :     :     :  +- Exchange hashpartitioning(o_custkey#57L, 200), ENSURE_REQUIREMENTS, [id=#1820]
                     :     :     :     +- Project [s_nationkey#3L, l_extendedprice#79, l_discount#80, l_shipdate#84, o_custkey#57L]
                     :     :     :        +- SortMergeJoin [l_orderkey#74L], [o_orderkey#56L], Inner
                     :     :     :           :- Sort [l_orderkey#74L ASC NULLS FIRST], false, 0
                     :     :     :           :  +- Exchange hashpartitioning(l_orderkey#74L, 200), ENSURE_REQUIREMENTS, [id=#1812]
                     :     :     :           :     +- Project [s_nationkey#3L, l_orderkey#74L, l_extendedprice#79, l_discount#80, l_shipdate#84]
                     :     :     :           :        +- SortMergeJoin [s_suppkey#0L], [l_suppkey#76L], Inner
                     :     :     :           :           :- Sort [s_suppkey#0L ASC NULLS FIRST], false, 0
                     :     :     :           :           :  +- Exchange hashpartitioning(s_suppkey#0L, 200), ENSURE_REQUIREMENTS, [id=#1804]
                     :     :     :           :           :     +- Filter (isnotnull(s_suppkey#0L) AND isnotnull(s_nationkey#3L))
                     :     :     :           :           :        +- FileScan parquet [s_suppkey#0L,s_nationkey#3L] Batched: true, DataFilters: [isnotnull(s_suppkey#0L), isnotnull(s_nationkey#3L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/supplier.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>
                     :     :     :           :           +- Sort [l_suppkey#76L ASC NULLS FIRST], false, 0
                     :     :     :           :              +- Exchange hashpartitioning(l_suppkey#76L, 200), ENSURE_REQUIREMENTS, [id=#1805]
                     :     :     :           :                 +- Filter ((((isnotnull(l_shipdate#84) AND (l_shipdate#84 >= 1995-01-01)) AND (l_shipdate#84 <= 1996-12-31)) AND isnotnull(l_suppkey#76L)) AND isnotnull(l_orderkey#74L))
                     :     :     :           :                    +- FileScan parquet [l_orderkey#74L,l_suppkey#76L,l_extendedprice#79,l_discount#80,l_shipdate#84] Batched: true, DataFilters: [isnotnull(l_shipdate#84), (l_shipdate#84 >= 1995-01-01), (l_shipdate#84 <= 1996-12-31), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/lineitem.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1995-01-01), LessThanOrEqual(l_shipdate,199..., ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(11,2),l_discount:decimal(11,2),...
                     :     :     :           +- Sort [o_orderkey#56L ASC NULLS FIRST], false, 0
                     :     :     :              +- Exchange hashpartitioning(o_orderkey#56L, 200), ENSURE_REQUIREMENTS, [id=#1813]
                     :     :     :                 +- Filter (isnotnull(o_orderkey#56L) AND isnotnull(o_custkey#57L))
                     :     :     :                    +- FileScan parquet [o_orderkey#56L,o_custkey#57L] Batched: true, DataFilters: [isnotnull(o_orderkey#56L), isnotnull(o_custkey#57L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/orders.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(o_orderkey), IsNotNull(o_custkey)], ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>
                     :     :     +- Sort [c_custkey#106L ASC NULLS FIRST], false, 0
                     :     :        +- Exchange hashpartitioning(c_custkey#106L, 200), ENSURE_REQUIREMENTS, [id=#1821]
                     :     :           +- Filter (isnotnull(c_custkey#106L) AND isnotnull(c_nationkey#109L))
                     :     :              +- FileScan parquet [c_custkey#106L,c_nationkey#109L] Batched: true, DataFilters: [isnotnull(c_custkey#106L), isnotnull(c_nationkey#109L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)], ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>
                     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [id=#1827]
                     :        +- Filter (isnotnull(n_nationkey#42L) AND ((n_name#43 = JORDAN) OR (n_name#43 = CHINA)))
                     :           +- FileScan parquet [n_nationkey#42L,n_name#43] Batched: true, DataFilters: [isnotnull(n_nationkey#42L), ((n_name#43 = JORDAN) OR (n_name#43 = CHINA))], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/nation.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,JORDAN),EqualTo(n_name,CHINA))], ReadSchema: struct<n_nationkey:bigint,n_name:string>
                     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [id=#1831]
                        +- Filter (isnotnull(n_nationkey#349L) AND ((n_name#350 = CHINA) OR (n_name#350 = JORDAN)))
                           +- FileScan parquet [n_nationkey#349L,n_name#350] Batched: true, DataFilters: [isnotnull(n_nationkey#349L), ((n_name#350 = CHINA) OR (n_name#350 = JORDAN))], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/nation.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,CHINA),EqualTo(n_name,JORDAN))], ReadSchema: struct<n_nationkey:bigint,n_name:string>
