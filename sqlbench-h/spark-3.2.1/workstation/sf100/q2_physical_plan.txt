AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   LocalTableScan <empty>, [s_acctbal#5, s_name#1, n_name#43, p_partkey#14L, p_mfgr#16, s_address#2, s_phone#4, s_comment#6]
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[s_acctbal#5 DESC NULLS LAST,n_name#43 ASC NULLS FIRST,s_name#1 ASC NULLS FIRST,p_partkey#14L ASC NULLS FIRST], output=[s_acctbal#5,s_name#1,n_name#43,p_partkey#14L,p_mfgr#16,s_address#2,s_phone#4,s_comment#6])
   +- Project [s_acctbal#5, s_name#1, n_name#43, p_partkey#14L, p_mfgr#16, s_address#2, s_phone#4, s_comment#6]
      +- BroadcastHashJoin [n_regionkey#44L], [r_regionkey#50L], Inner, BuildRight, false
         :- Project [p_partkey#14L, p_mfgr#16, s_name#1, s_address#2, s_phone#4, s_acctbal#5, s_comment#6, n_name#43, n_regionkey#44L]
         :  +- BroadcastHashJoin [s_nationkey#3L], [n_nationkey#42L], Inner, BuildRight, false
         :     :- Project [p_partkey#14L, p_mfgr#16, s_name#1, s_address#2, s_nationkey#3L, s_phone#4, s_acctbal#5, s_comment#6]
         :     :  +- SortMergeJoin [ps_suppkey#33L], [s_suppkey#0L], Inner
         :     :     :- Sort [ps_suppkey#33L ASC NULLS FIRST], false, 0
         :     :     :  +- Exchange hashpartitioning(ps_suppkey#33L, 200), ENSURE_REQUIREMENTS, [id=#330]
         :     :     :     +- Project [p_partkey#14L, p_mfgr#16, ps_suppkey#33L]
         :     :     :        +- SortMergeJoin [ps_supplycost#35, p_partkey#14L], [min(ps_supplycost)#247, ps_partkey#248L], Inner
         :     :     :           :- Sort [ps_supplycost#35 ASC NULLS FIRST, p_partkey#14L ASC NULLS FIRST], false, 0
         :     :     :           :  +- Exchange hashpartitioning(ps_supplycost#35, p_partkey#14L, 200), ENSURE_REQUIREMENTS, [id=#322]
         :     :     :           :     +- Project [p_partkey#14L, p_mfgr#16, ps_suppkey#33L, ps_supplycost#35]
         :     :     :           :        +- SortMergeJoin [p_partkey#14L], [ps_partkey#32L], Inner
         :     :     :           :           :- Sort [p_partkey#14L ASC NULLS FIRST], false, 0
         :     :     :           :           :  +- Exchange hashpartitioning(p_partkey#14L, 200), ENSURE_REQUIREMENTS, [id=#294]
         :     :     :           :           :     +- Project [p_partkey#14L, p_mfgr#16]
         :     :     :           :           :        +- Filter ((((isnotnull(p_size#19) AND isnotnull(p_type#18)) AND (p_size#19 = 2)) AND EndsWith(p_type#18, STEEL)) AND isnotnull(p_partkey#14L))
         :     :     :           :           :           +- FileScan parquet [p_partkey#14L,p_mfgr#16,p_type#18,p_size#19] Batched: true, DataFilters: [isnotnull(p_size#19), isnotnull(p_type#18), (p_size#19 = 2), EndsWith(p_type#18, STEEL), isnotnu..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/part.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(p_size), IsNotNull(p_type), EqualTo(p_size,2), StringEndsWith(p_type,STEEL), IsNotNull..., ReadSchema: struct<p_partkey:bigint,p_mfgr:string,p_type:string,p_size:int>
         :     :     :           :           +- Sort [ps_partkey#32L ASC NULLS FIRST], false, 0
         :     :     :           :              +- Exchange hashpartitioning(ps_partkey#32L, 200), ENSURE_REQUIREMENTS, [id=#295]
         :     :     :           :                 +- Filter ((isnotnull(ps_partkey#32L) AND isnotnull(ps_supplycost#35)) AND isnotnull(ps_suppkey#33L))
         :     :     :           :                    +- FileScan parquet [ps_partkey#32L,ps_suppkey#33L,ps_supplycost#35] Batched: true, DataFilters: [isnotnull(ps_partkey#32L), isnotnull(ps_supplycost#35), isnotnull(ps_suppkey#33L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/partsupp.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ps_partkey), IsNotNull(ps_supplycost), IsNotNull(ps_suppkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(11,2)>
         :     :     :           +- Sort [min(ps_supplycost)#247 ASC NULLS FIRST, ps_partkey#248L ASC NULLS FIRST], false, 0
         :     :     :              +- Exchange hashpartitioning(min(ps_supplycost)#247, ps_partkey#248L, 200), ENSURE_REQUIREMENTS, [id=#323]
         :     :     :                 +- Filter isnotnull(min(ps_supplycost)#247)
         :     :     :                    +- HashAggregate(keys=[ps_partkey#248L], functions=[min(ps_supplycost#251)], output=[min(ps_supplycost)#247, ps_partkey#248L])
         :     :     :                       +- Exchange hashpartitioning(ps_partkey#248L, 200), ENSURE_REQUIREMENTS, [id=#317]
         :     :     :                          +- HashAggregate(keys=[ps_partkey#248L], functions=[partial_min(ps_supplycost#251)], output=[ps_partkey#248L, min#276])
         :     :     :                             +- Project [ps_partkey#248L, ps_supplycost#251]
         :     :     :                                +- BroadcastHashJoin [n_regionkey#262L], [r_regionkey#264L], Inner, BuildRight, false
         :     :     :                                   :- Project [ps_partkey#248L, ps_supplycost#251, n_regionkey#262L]
         :     :     :                                   :  +- BroadcastHashJoin [s_nationkey#256L], [n_nationkey#260L], Inner, BuildRight, false
         :     :     :                                   :     :- Project [ps_partkey#248L, ps_supplycost#251, s_nationkey#256L]
         :     :     :                                   :     :  +- SortMergeJoin [ps_suppkey#249L], [s_suppkey#253L], Inner
         :     :     :                                   :     :     :- Sort [ps_suppkey#249L ASC NULLS FIRST], false, 0
         :     :     :                                   :     :     :  +- Exchange hashpartitioning(ps_suppkey#249L, 200), ENSURE_REQUIREMENTS, [id=#301]
         :     :     :                                   :     :     :     +- Filter (isnotnull(ps_suppkey#249L) AND isnotnull(ps_partkey#248L))
         :     :     :                                   :     :     :        +- FileScan parquet [ps_partkey#248L,ps_suppkey#249L,ps_supplycost#251] Batched: true, DataFilters: [isnotnull(ps_suppkey#249L), isnotnull(ps_partkey#248L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/partsupp.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(11,2)>
         :     :     :                                   :     :     +- Sort [s_suppkey#253L ASC NULLS FIRST], false, 0
         :     :     :                                   :     :        +- Exchange hashpartitioning(s_suppkey#253L, 200), ENSURE_REQUIREMENTS, [id=#302]
         :     :     :                                   :     :           +- Filter (isnotnull(s_suppkey#253L) AND isnotnull(s_nationkey#256L))
         :     :     :                                   :     :              +- FileScan parquet [s_suppkey#253L,s_nationkey#256L] Batched: true, DataFilters: [isnotnull(s_suppkey#253L), isnotnull(s_nationkey#256L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/supplier.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>
         :     :     :                                   :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [id=#308]
         :     :     :                                   :        +- Filter (isnotnull(n_nationkey#260L) AND isnotnull(n_regionkey#262L))
         :     :     :                                   :           +- FileScan parquet [n_nationkey#260L,n_regionkey#262L] Batched: true, DataFilters: [isnotnull(n_nationkey#260L), isnotnull(n_regionkey#262L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/nation.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>
         :     :     :                                   +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#312]
         :     :     :                                      +- Project [r_regionkey#264L]
         :     :     :                                         +- Filter ((isnotnull(r_name#265) AND (r_name#265 = MIDDLE EAST)) AND isnotnull(r_regionkey#264L))
         :     :     :                                            +- FileScan parquet [r_regionkey#264L,r_name#265] Batched: true, DataFilters: [isnotnull(r_name#265), (r_name#265 = MIDDLE EAST), isnotnull(r_regionkey#264L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/region.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,MIDDLE EAST), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>
         :     :     +- Sort [s_suppkey#0L ASC NULLS FIRST], false, 0
         :     :        +- Exchange hashpartitioning(s_suppkey#0L, 200), ENSURE_REQUIREMENTS, [id=#331]
         :     :           +- Filter (isnotnull(s_suppkey#0L) AND isnotnull(s_nationkey#3L))
         :     :              +- FileScan parquet [s_suppkey#0L,s_name#1,s_address#2,s_nationkey#3L,s_phone#4,s_acctbal#5,s_comment#6] Batched: true, DataFilters: [isnotnull(s_suppkey#0L), isnotnull(s_nationkey#3L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/supplier.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_nationkey:bigint,s_phone:string,s_acctba...
         :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [id=#337]
         :        +- Filter (isnotnull(n_nationkey#42L) AND isnotnull(n_regionkey#44L))
         :           +- FileScan parquet [n_nationkey#42L,n_name#43,n_regionkey#44L] Batched: true, DataFilters: [isnotnull(n_nationkey#42L), isnotnull(n_regionkey#44L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/nation.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint>
         +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#341]
            +- Project [r_regionkey#50L]
               +- Filter ((isnotnull(r_name#51) AND (r_name#51 = MIDDLE EAST)) AND isnotnull(r_regionkey#50L))
                  +- FileScan parquet [r_regionkey#50L,r_name#51] Batched: true, DataFilters: [isnotnull(r_name#51), (r_name#51 = MIDDLE EAST), isnotnull(r_regionkey#50L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/region.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,MIDDLE EAST), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>
