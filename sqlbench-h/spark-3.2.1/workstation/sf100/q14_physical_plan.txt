AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(6) HashAggregate(keys=[], functions=[sum(CASE WHEN StartsWith(p_type#18, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#79 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#80 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true) ELSE 0.0000 END), sum(CheckOverflow((promote_precision(cast(l_extendedprice#79 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#80 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true))], output=[promo_revenue#562])
   +- ShuffleQueryStage 2
      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#4487]
         +- *(5) HashAggregate(keys=[], functions=[partial_sum(CASE WHEN StartsWith(p_type#18, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#79 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#80 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true) ELSE 0.0000 END), partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#79 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#80 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true))], output=[sum#570, isEmpty#571, sum#572, isEmpty#573])
            +- *(5) Project [l_extendedprice#79, l_discount#80, p_type#18]
               +- *(5) SortMergeJoin [l_partkey#75L], [p_partkey#14L], Inner
                  :- *(3) Sort [l_partkey#75L ASC NULLS FIRST], false, 0
                  :  +- AQEShuffleRead coalesced
                  :     +- ShuffleQueryStage 0
                  :        +- Exchange hashpartitioning(l_partkey#75L, 200), ENSURE_REQUIREMENTS, [id=#4376]
                  :           +- *(1) Project [l_partkey#75L, l_extendedprice#79, l_discount#80]
                  :              +- *(1) Filter (((isnotnull(l_shipdate#84) AND (l_shipdate#84 >= 1997-06-01)) AND (l_shipdate#84 < 1997-07-01)) AND isnotnull(l_partkey#75L))
                  :                 +- *(1) ColumnarToRow
                  :                    +- FileScan parquet [l_partkey#75L,l_extendedprice#79,l_discount#80,l_shipdate#84] Batched: true, DataFilters: [isnotnull(l_shipdate#84), (l_shipdate#84 >= 1997-06-01), (l_shipdate#84 < 1997-07-01), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/lineitem.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1997-06-01), LessThan(l_shipdate,1997-07-01..., ReadSchema: struct<l_partkey:bigint,l_extendedprice:decimal(11,2),l_discount:decimal(11,2),l_shipdate:date>
                  +- *(4) Sort [p_partkey#14L ASC NULLS FIRST], false, 0
                     +- AQEShuffleRead coalesced
                        +- ShuffleQueryStage 1
                           +- Exchange hashpartitioning(p_partkey#14L, 200), ENSURE_REQUIREMENTS, [id=#4395]
                              +- *(2) Filter isnotnull(p_partkey#14L)
                                 +- *(2) ColumnarToRow
                                    +- FileScan parquet [p_partkey#14L,p_type#18] Batched: true, DataFilters: [isnotnull(p_partkey#14L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/part.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(p_partkey)], ReadSchema: struct<p_partkey:bigint,p_type:string>
+- == Initial Plan ==
   HashAggregate(keys=[], functions=[sum(CASE WHEN StartsWith(p_type#18, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#79 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#80 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true) ELSE 0.0000 END), sum(CheckOverflow((promote_precision(cast(l_extendedprice#79 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#80 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true))], output=[promo_revenue#562])
   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#4342]
      +- HashAggregate(keys=[], functions=[partial_sum(CASE WHEN StartsWith(p_type#18, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#79 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#80 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true) ELSE 0.0000 END), partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#79 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#80 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true))], output=[sum#570, isEmpty#571, sum#572, isEmpty#573])
         +- Project [l_extendedprice#79, l_discount#80, p_type#18]
            +- SortMergeJoin [l_partkey#75L], [p_partkey#14L], Inner
               :- Sort [l_partkey#75L ASC NULLS FIRST], false, 0
               :  +- Exchange hashpartitioning(l_partkey#75L, 200), ENSURE_REQUIREMENTS, [id=#4334]
               :     +- Project [l_partkey#75L, l_extendedprice#79, l_discount#80]
               :        +- Filter (((isnotnull(l_shipdate#84) AND (l_shipdate#84 >= 1997-06-01)) AND (l_shipdate#84 < 1997-07-01)) AND isnotnull(l_partkey#75L))
               :           +- FileScan parquet [l_partkey#75L,l_extendedprice#79,l_discount#80,l_shipdate#84] Batched: true, DataFilters: [isnotnull(l_shipdate#84), (l_shipdate#84 >= 1997-06-01), (l_shipdate#84 < 1997-07-01), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/lineitem.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1997-06-01), LessThan(l_shipdate,1997-07-01..., ReadSchema: struct<l_partkey:bigint,l_extendedprice:decimal(11,2),l_discount:decimal(11,2),l_shipdate:date>
               +- Sort [p_partkey#14L ASC NULLS FIRST], false, 0
                  +- Exchange hashpartitioning(p_partkey#14L, 200), ENSURE_REQUIREMENTS, [id=#4335]
                     +- Filter isnotnull(p_partkey#14L)
                        +- FileScan parquet [p_partkey#14L,p_type#18] Batched: true, DataFilters: [isnotnull(p_partkey#14L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/part.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(p_partkey)], ReadSchema: struct<p_partkey:bigint,p_type:string>
