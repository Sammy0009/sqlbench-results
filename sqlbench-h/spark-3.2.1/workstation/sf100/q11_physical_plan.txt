AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   LocalTableScan <empty>, [ps_partkey#32L, value#455]
+- == Initial Plan ==
   Sort [value#455 DESC NULLS LAST], true, 0
   +- Exchange rangepartitioning(value#455 DESC NULLS LAST, 200), ENSURE_REQUIREMENTS, [id=#3230]
      +- Filter (isnotnull(value#455) AND (cast(value#455 as decimal(38,7)) > Subquery subquery#456, [id=#3201]))
         :  +- Subquery subquery#456, [id=#3201]
         :     +- AdaptiveSparkPlan isFinalPlan=true
               +- == Final Plan ==
                  *(9) HashAggregate(keys=[], functions=[sum(CheckOverflow((promote_precision(cast(ps_supplycost#464 as decimal(12,2))) * promote_precision(cast(cast(ps_availqty#463 as decimal(10,0)) as decimal(12,2)))), DecimalType(22,2), true))], output=[(sum((ps_supplycost * ps_availqty)) * 0.0000010000)#459])
                  +- ShuffleQueryStage 9
                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#3663]
                        +- *(8) HashAggregate(keys=[], functions=[partial_sum(CheckOverflow((promote_precision(cast(ps_supplycost#464 as decimal(12,2))) * promote_precision(cast(cast(ps_availqty#463 as decimal(10,0)) as decimal(12,2)))), DecimalType(22,2), true))], output=[sum#490, isEmpty#491])
                           +- *(8) Project [ps_availqty#463, ps_supplycost#464]
                              +- *(8) BroadcastHashJoin [s_nationkey#469L], [n_nationkey#473L], Inner, BuildRight, false
                                 :- *(8) Project [ps_availqty#463, ps_supplycost#464, s_nationkey#469L]
                                 :  +- *(8) SortMergeJoin [ps_suppkey#462L], [s_suppkey#466L], Inner
                                 :     :- *(6) Sort [ps_suppkey#462L ASC NULLS FIRST], false, 0
                                 :     :  +- AQEShuffleRead coalesced
                                 :     :     +- ShuffleQueryStage 0
                                 :     :        +- Exchange hashpartitioning(ps_suppkey#462L, 200), ENSURE_REQUIREMENTS, [id=#3412]
                                 :     :           +- *(1) Filter isnotnull(ps_suppkey#462L)
                                 :     :              +- *(1) ColumnarToRow
                                 :     :                 +- FileScan parquet [ps_suppkey#462L,ps_availqty#463,ps_supplycost#464] Batched: true, DataFilters: [isnotnull(ps_suppkey#462L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/partsupp.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ps_suppkey)], ReadSchema: struct<ps_suppkey:bigint,ps_availqty:int,ps_supplycost:decimal(11,2)>
                                 :     +- *(7) Sort [s_suppkey#466L ASC NULLS FIRST], false, 0
                                 :        +- AQEShuffleRead coalesced
                                 :           +- ShuffleQueryStage 2
                                 :              +- ReusedExchange [s_suppkey#466L, s_nationkey#469L], Exchange hashpartitioning(s_suppkey#0L, 200), ENSURE_REQUIREMENTS, [id=#3322]
                                 +- BroadcastQueryStage 8
                                    +- ReusedExchange [n_nationkey#473L], BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#3343]
               +- == Initial Plan ==
                  HashAggregate(keys=[], functions=[sum(CheckOverflow((promote_precision(cast(ps_supplycost#464 as decimal(12,2))) * promote_precision(cast(cast(ps_availqty#463 as decimal(10,0)) as decimal(12,2)))), DecimalType(22,2), true))], output=[(sum((ps_supplycost * ps_availqty)) * 0.0000010000)#459])
                  +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#3199]
                     +- HashAggregate(keys=[], functions=[partial_sum(CheckOverflow((promote_precision(cast(ps_supplycost#464 as decimal(12,2))) * promote_precision(cast(cast(ps_availqty#463 as decimal(10,0)) as decimal(12,2)))), DecimalType(22,2), true))], output=[sum#490, isEmpty#491])
                        +- Project [ps_availqty#463, ps_supplycost#464]
                           +- BroadcastHashJoin [s_nationkey#469L], [n_nationkey#473L], Inner, BuildRight, false
                              :- Project [ps_availqty#463, ps_supplycost#464, s_nationkey#469L]
                              :  +- SortMergeJoin [ps_suppkey#462L], [s_suppkey#466L], Inner
                              :     :- Sort [ps_suppkey#462L ASC NULLS FIRST], false, 0
                              :     :  +- Exchange hashpartitioning(ps_suppkey#462L, 200), ENSURE_REQUIREMENTS, [id=#3187]
                              :     :     +- Filter isnotnull(ps_suppkey#462L)
                              :     :        +- FileScan parquet [ps_suppkey#462L,ps_availqty#463,ps_supplycost#464] Batched: true, DataFilters: [isnotnull(ps_suppkey#462L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/partsupp.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ps_suppkey)], ReadSchema: struct<ps_suppkey:bigint,ps_availqty:int,ps_supplycost:decimal(11,2)>
                              :     +- Sort [s_suppkey#466L ASC NULLS FIRST], false, 0
                              :        +- Exchange hashpartitioning(s_suppkey#466L, 200), ENSURE_REQUIREMENTS, [id=#3188]
                              :           +- Filter (isnotnull(s_suppkey#466L) AND isnotnull(s_nationkey#469L))
                              :              +- FileScan parquet [s_suppkey#466L,s_nationkey#469L] Batched: true, DataFilters: [isnotnull(s_suppkey#466L), isnotnull(s_nationkey#469L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/supplier.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>
                              +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#3194]
                                 +- Project [n_nationkey#473L]
                                    +- Filter ((isnotnull(n_name#474) AND (n_name#474 = UNITED STATES)) AND isnotnull(n_nationkey#473L))
                                       +- FileScan parquet [n_nationkey#473L,n_name#474] Batched: true, DataFilters: [isnotnull(n_name#474), (n_name#474 = UNITED STATES), isnotnull(n_nationkey#473L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/nation.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,UNITED STATES), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>
         +- HashAggregate(keys=[ps_partkey#32L], functions=[sum(CheckOverflow((promote_precision(cast(ps_supplycost#35 as decimal(12,2))) * promote_precision(cast(cast(ps_availqty#34 as decimal(10,0)) as decimal(12,2)))), DecimalType(22,2), true))], output=[ps_partkey#32L, value#455])
            +- Exchange hashpartitioning(ps_partkey#32L, 200), ENSURE_REQUIREMENTS, [id=#3226]
               +- HashAggregate(keys=[ps_partkey#32L], functions=[partial_sum(CheckOverflow((promote_precision(cast(ps_supplycost#35 as decimal(12,2))) * promote_precision(cast(cast(ps_availqty#34 as decimal(10,0)) as decimal(12,2)))), DecimalType(22,2), true))], output=[ps_partkey#32L, sum#486, isEmpty#487])
                  +- Project [ps_partkey#32L, ps_availqty#34, ps_supplycost#35]
                     +- BroadcastHashJoin [s_nationkey#3L], [n_nationkey#42L], Inner, BuildRight, false
                        :- Project [ps_partkey#32L, ps_availqty#34, ps_supplycost#35, s_nationkey#3L]
                        :  +- SortMergeJoin [ps_suppkey#33L], [s_suppkey#0L], Inner
                        :     :- Sort [ps_suppkey#33L ASC NULLS FIRST], false, 0
                        :     :  +- Exchange hashpartitioning(ps_suppkey#33L, 200), ENSURE_REQUIREMENTS, [id=#3214]
                        :     :     +- Filter isnotnull(ps_suppkey#33L)
                        :     :        +- FileScan parquet [ps_partkey#32L,ps_suppkey#33L,ps_availqty#34,ps_supplycost#35] Batched: true, DataFilters: [isnotnull(ps_suppkey#33L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/partsupp.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ps_suppkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int,ps_supplycost:decimal(11,2)>
                        :     +- Sort [s_suppkey#0L ASC NULLS FIRST], false, 0
                        :        +- Exchange hashpartitioning(s_suppkey#0L, 200), ENSURE_REQUIREMENTS, [id=#3215]
                        :           +- Filter (isnotnull(s_suppkey#0L) AND isnotnull(s_nationkey#3L))
                        :              +- FileScan parquet [s_suppkey#0L,s_nationkey#3L] Batched: true, DataFilters: [isnotnull(s_suppkey#0L), isnotnull(s_nationkey#3L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/supplier.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>
                        +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#3221]
                           +- Project [n_nationkey#42L]
                              +- Filter ((isnotnull(n_name#43) AND (n_name#43 = UNITED STATES)) AND isnotnull(n_nationkey#42L))
                                 +- FileScan parquet [n_nationkey#42L,n_name#43] Batched: true, DataFilters: [isnotnull(n_name#43), (n_name#43 = UNITED STATES), isnotnull(n_nationkey#42L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/nation.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,UNITED STATES), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>
