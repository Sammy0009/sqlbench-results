AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(3) Sort [l_returnflag#82 ASC NULLS FIRST, l_linestatus#83 ASC NULLS FIRST], true, 0
   +- AQEShuffleRead coalesced
      +- ShuffleQueryStage 1
         +- Exchange rangepartitioning(l_returnflag#82 ASC NULLS FIRST, l_linestatus#83 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#104]
            +- *(2) HashAggregate(keys=[l_returnflag#82, l_linestatus#83], functions=[sum(l_quantity#78), sum(l_extendedprice#79), sum(CheckOverflow((promote_precision(cast(l_extendedprice#79 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#80 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true)), sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(l_extendedprice#79 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#80 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true)) * promote_precision(cast(CheckOverflow((1.00 + promote_precision(cast(l_tax#81 as decimal(12,2)))), DecimalType(12,2), true) as decimal(24,4)))), DecimalType(37,6), true)), avg(UnscaledValue(l_quantity#78)), avg(UnscaledValue(l_extendedprice#79)), avg(UnscaledValue(l_discount#80)), count(1)], output=[l_returnflag#82, l_linestatus#83, sum_qty#122, sum_base_price#123, sum_disc_price#124, sum_charge#125, avg_qty#126, avg_price#127, avg_disc#128, count_order#129L])
               +- AQEShuffleRead coalesced
                  +- ShuffleQueryStage 0
                     +- Exchange hashpartitioning(l_returnflag#82, l_linestatus#83, 200), ENSURE_REQUIREMENTS, [id=#72]
                        +- *(1) HashAggregate(keys=[l_returnflag#82, l_linestatus#83], functions=[partial_sum(l_quantity#78), partial_sum(l_extendedprice#79), partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#79 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#80 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true)), partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(l_extendedprice#79 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#80 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true)) * promote_precision(cast(CheckOverflow((1.00 + promote_precision(cast(l_tax#81 as decimal(12,2)))), DecimalType(12,2), true) as decimal(24,4)))), DecimalType(37,6), true)), partial_avg(UnscaledValue(l_quantity#78)), partial_avg(UnscaledValue(l_extendedprice#79)), partial_avg(UnscaledValue(l_discount#80)), partial_count(1)], output=[l_returnflag#82, l_linestatus#83, sum#163, isEmpty#164, sum#165, isEmpty#166, sum#167, isEmpty#168, sum#169, isEmpty#170, sum#171, count#172L, sum#173, count#174L, sum#175, count#176L, count#177L])
                           +- *(1) Project [l_quantity#78, l_extendedprice#79, l_discount#80, l_tax#81, l_returnflag#82, l_linestatus#83]
                              +- *(1) Filter (isnotnull(l_shipdate#84) AND (l_shipdate#84 <= 1998-08-30))
                                 +- *(1) ColumnarToRow
                                    +- FileScan parquet [l_quantity#78,l_extendedprice#79,l_discount#80,l_tax#81,l_returnflag#82,l_linestatus#83,l_shipdate#84] Batched: true, DataFilters: [isnotnull(l_shipdate#84), (l_shipdate#84 <= 1998-08-30)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/lineitem.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(l_shipdate), LessThanOrEqual(l_shipdate,1998-08-30)], ReadSchema: struct<l_quantity:decimal(11,2),l_extendedprice:decimal(11,2),l_discount:decimal(11,2),l_tax:deci...
+- == Initial Plan ==
   Sort [l_returnflag#82 ASC NULLS FIRST, l_linestatus#83 ASC NULLS FIRST], true, 0
   +- Exchange rangepartitioning(l_returnflag#82 ASC NULLS FIRST, l_linestatus#83 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#46]
      +- HashAggregate(keys=[l_returnflag#82, l_linestatus#83], functions=[sum(l_quantity#78), sum(l_extendedprice#79), sum(CheckOverflow((promote_precision(cast(l_extendedprice#79 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#80 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true)), sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(l_extendedprice#79 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#80 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true)) * promote_precision(cast(CheckOverflow((1.00 + promote_precision(cast(l_tax#81 as decimal(12,2)))), DecimalType(12,2), true) as decimal(24,4)))), DecimalType(37,6), true)), avg(UnscaledValue(l_quantity#78)), avg(UnscaledValue(l_extendedprice#79)), avg(UnscaledValue(l_discount#80)), count(1)], output=[l_returnflag#82, l_linestatus#83, sum_qty#122, sum_base_price#123, sum_disc_price#124, sum_charge#125, avg_qty#126, avg_price#127, avg_disc#128, count_order#129L])
         +- Exchange hashpartitioning(l_returnflag#82, l_linestatus#83, 200), ENSURE_REQUIREMENTS, [id=#43]
            +- HashAggregate(keys=[l_returnflag#82, l_linestatus#83], functions=[partial_sum(l_quantity#78), partial_sum(l_extendedprice#79), partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#79 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#80 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true)), partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(l_extendedprice#79 as decimal(12,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#80 as decimal(12,2)))), DecimalType(12,2), true))), DecimalType(24,4), true)) * promote_precision(cast(CheckOverflow((1.00 + promote_precision(cast(l_tax#81 as decimal(12,2)))), DecimalType(12,2), true) as decimal(24,4)))), DecimalType(37,6), true)), partial_avg(UnscaledValue(l_quantity#78)), partial_avg(UnscaledValue(l_extendedprice#79)), partial_avg(UnscaledValue(l_discount#80)), partial_count(1)], output=[l_returnflag#82, l_linestatus#83, sum#163, isEmpty#164, sum#165, isEmpty#166, sum#167, isEmpty#168, sum#169, isEmpty#170, sum#171, count#172L, sum#173, count#174L, sum#175, count#176L, count#177L])
               +- Project [l_quantity#78, l_extendedprice#79, l_discount#80, l_tax#81, l_returnflag#82, l_linestatus#83]
                  +- Filter (isnotnull(l_shipdate#84) AND (l_shipdate#84 <= 1998-08-30))
                     +- FileScan parquet [l_quantity#78,l_extendedprice#79,l_discount#80,l_tax#81,l_returnflag#82,l_linestatus#83,l_shipdate#84] Batched: true, DataFilters: [isnotnull(l_shipdate#84), (l_shipdate#84 <= 1998-08-30)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpch/sf100-parquet/lineitem.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(l_shipdate), LessThanOrEqual(l_shipdate,1998-08-30)], ReadSchema: struct<l_quantity:decimal(11,2),l_extendedprice:decimal(11,2),l_discount:decimal(11,2),l_tax:deci...
