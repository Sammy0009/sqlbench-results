AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(30) HashAggregate(keys=[], functions=[sum(sales#6270)], output=[sum(sales)#6444])
   +- ShuffleQueryStage 25
      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#50877]
         +- *(29) HashAggregate(keys=[], functions=[partial_sum(sales#6270)], output=[sum#6450, isEmpty#6451])
            +- Union
               :- *(25) Project [CheckOverflow((promote_precision(cast(cast(cs_quantity#136 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#138 as decimal(12,2)))), DecimalType(18,2), true) AS sales#6270]
               :  +- *(25) BroadcastHashJoin [cs_sold_date_sk#118], [d_date_sk#6376], Inner, BuildRight, false
               :     :- *(25) Project [cs_sold_date_sk#118, cs_quantity#136, cs_list_price#138]
               :     :  +- *(25) SortMergeJoin [cs_bill_customer_sk#121], [c_customer_sk#6358], LeftSemi
               :     :     :- *(23) Sort [cs_bill_customer_sk#121 ASC NULLS FIRST], false, 0
               :     :     :  +- ShuffleQueryStage 23
               :     :     :     +- Exchange hashpartitioning(cs_bill_customer_sk#121, 200), ENSURE_REQUIREMENTS, [id=#50474]
               :     :     :        +- *(19) Project [cs_sold_date_sk#118, cs_bill_customer_sk#121, cs_quantity#136, cs_list_price#138]
               :     :     :           +- *(19) SortMergeJoin [cs_item_sk#133], [item_sk#6277], LeftSemi
               :     :     :              :- *(17) Sort [cs_item_sk#133 ASC NULLS FIRST], false, 0
               :     :     :              :  +- AQEShuffleRead coalesced
               :     :     :              :     +- ShuffleQueryStage 0
               :     :     :              :        +- Exchange hashpartitioning(cs_item_sk#133, 200), ENSURE_REQUIREMENTS, [id=#47878]
               :     :     :              :           +- *(1) Filter isnotnull(cs_sold_date_sk#118)
               :     :     :              :              +- *(1) ColumnarToRow
               :     :     :              :                 +- FileScan parquet [cs_sold_date_sk#118,cs_bill_customer_sk#121,cs_item_sk#133,cs_quantity#136,cs_list_price#138] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#118)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:d...
               :     :     :              +- *(18) Sort [item_sk#6277 ASC NULLS FIRST], false, 0
               :     :     :                 +- AQEShuffleRead coalesced
               :     :     :                    +- ShuffleQueryStage 20
               :     :     :                       +- Exchange hashpartitioning(item_sk#6277, 200), ENSURE_REQUIREMENTS, [id=#49999]
               :     :     :                          +- *(15) Project [item_sk#6277]
               :     :     :                             +- *(15) Filter (cnt#6279L > 4)
               :     :     :                                +- *(15) HashAggregate(keys=[_groupingexpression#6446, i_item_sk#500, d_date#600], functions=[count(1)], output=[item_sk#6277, cnt#6279L])
               :     :     :                                   +- AQEShuffleRead coalesced
               :     :     :                                      +- ShuffleQueryStage 14
               :     :     :                                         +- Exchange hashpartitioning(_groupingexpression#6446, i_item_sk#500, d_date#600, 200), ENSURE_REQUIREMENTS, [id=#49064]
               :     :     :                                            +- *(11) HashAggregate(keys=[_groupingexpression#6446, i_item_sk#500, d_date#600], functions=[partial_count(1)], output=[_groupingexpression#6446, i_item_sk#500, d_date#600, count#6453L])
               :     :     :                                               +- *(11) Project [d_date#600, i_item_sk#500, substr(i_item_desc#504, 1, 30) AS _groupingexpression#6446]
               :     :     :                                                  +- *(11) BroadcastHashJoin [ss_item_sk#666], [i_item_sk#500], Inner, BuildRight, false
               :     :     :                                                     :- *(11) Project [ss_item_sk#666, d_date#600]
               :     :     :                                                     :  +- *(11) BroadcastHashJoin [ss_sold_date_sk#664], [d_date_sk#598], Inner, BuildRight, false
               :     :     :                                                     :     :- *(11) Filter (isnotnull(ss_sold_date_sk#664) AND isnotnull(ss_item_sk#666))
               :     :     :                                                     :     :  +- *(11) ColumnarToRow
               :     :     :                                                     :     :     +- FileScan parquet [ss_sold_date_sk#664,ss_item_sk#666] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#664), isnotnull(ss_item_sk#666)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>
               :     :     :                                                     :     +- BroadcastQueryStage 1
               :     :     :                                                     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#47897]
               :     :     :                                                     :           +- *(2) Project [d_date_sk#598, d_date#600]
               :     :     :                                                     :              +- *(2) Filter (d_year#604 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#598))
               :     :     :                                                     :                 +- *(2) ColumnarToRow
               :     :     :                                                     :                    +- FileScan parquet [d_date_sk#598,d_date#600,d_year#604] Batched: true, DataFilters: [d_year#604 IN (2000,2001,2002,2003), isnotnull(d_date_sk#598)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>
               :     :     :                                                     +- BroadcastQueryStage 2
               :     :     :                                                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#47916]
               :     :     :                                                           +- *(3) Filter isnotnull(i_item_sk#500)
               :     :     :                                                              +- *(3) ColumnarToRow
               :     :     :                                                                 +- FileScan parquet [i_item_sk#500,i_item_desc#504] Batched: true, DataFilters: [isnotnull(i_item_sk#500)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_desc:string>
               :     :     +- *(24) Sort [c_customer_sk#6358 ASC NULLS FIRST], false, 0
               :     :        +- *(24) Project [c_customer_sk#6358]
               :     :           +- *(24) Filter (isnotnull(ssales#6282) AND (cast(ssales#6282 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(Subquery subquery#6283, [id=#47514] as decimal(32,6)))), DecimalType(38,8), true)))
               :     :              :  +- Subquery subquery#6283, [id=#47514]
               :     :              :     +- AdaptiveSparkPlan isFinalPlan=true
                                          +- == Final Plan ==
                                             *(6) HashAggregate(keys=[], functions=[max(csales#6280)], output=[tpcds_cmax#6281])
                                             +- ShuffleQueryStage 6
                                                +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#51181]
                                                   +- *(5) HashAggregate(keys=[], functions=[partial_max(csales#6280)], output=[max#6459])
                                                      +- *(5) HashAggregate(keys=[c_customer_sk#562], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6294 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6297 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#6280])
                                                         +- AQEShuffleRead coalesced
                                                            +- ShuffleQueryStage 5
                                                               +- Exchange hashpartitioning(c_customer_sk#562, 200), ENSURE_REQUIREMENTS, [id=#51123]
                                                                  +- *(4) HashAggregate(keys=[c_customer_sk#562], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6294 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6297 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#562, sum#6462, isEmpty#6463])
                                                                     +- *(4) Project [ss_quantity#6294, ss_sales_price#6297, c_customer_sk#562]
                                                                        +- *(4) BroadcastHashJoin [ss_sold_date_sk#6284], [d_date_sk#6307], Inner, BuildRight, false
                                                                           :- *(4) Project [ss_sold_date_sk#6284, ss_quantity#6294, ss_sales_price#6297, c_customer_sk#562]
                                                                           :  +- *(4) BroadcastHashJoin [ss_customer_sk#6287], [c_customer_sk#562], Inner, BuildRight, false
                                                                           :     :- *(4) Filter (isnotnull(ss_customer_sk#6287) AND isnotnull(ss_sold_date_sk#6284))
                                                                           :     :  +- *(4) ColumnarToRow
                                                                           :     :     +- FileScan parquet [ss_sold_date_sk#6284,ss_customer_sk#6287,ss_quantity#6294,ss_sales_price#6297] Batched: true, DataFilters: [isnotnull(ss_customer_sk#6287), isnotnull(ss_sold_date_sk#6284)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                           :     +- BroadcastQueryStage 4
                                                                           :        +- ReusedExchange [c_customer_sk#562], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#47944]
                                                                           +- BroadcastQueryStage 2
                                                                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#50985]
                                                                                 +- *(2) Project [d_date_sk#6307]
                                                                                    +- *(2) Filter (d_year#6313 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#6307))
                                                                                       +- *(2) ColumnarToRow
                                                                                          +- FileScan parquet [d_date_sk#6307,d_year#6313] Batched: true, DataFilters: [d_year#6313 IN (2000,2001,2002,2003), isnotnull(d_date_sk#6307)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                          +- == Initial Plan ==
                                             HashAggregate(keys=[], functions=[max(csales#6280)], output=[tpcds_cmax#6281])
                                             +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#47512]
                                                +- HashAggregate(keys=[], functions=[partial_max(csales#6280)], output=[max#6459])
                                                   +- HashAggregate(keys=[c_customer_sk#562], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6294 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6297 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#6280])
                                                      +- Exchange hashpartitioning(c_customer_sk#562, 200), ENSURE_REQUIREMENTS, [id=#47508]
                                                         +- HashAggregate(keys=[c_customer_sk#562], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6294 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6297 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#562, sum#6462, isEmpty#6463])
                                                            +- Project [ss_quantity#6294, ss_sales_price#6297, c_customer_sk#562]
                                                               +- BroadcastHashJoin [ss_sold_date_sk#6284], [d_date_sk#6307], Inner, BuildRight, false
                                                                  :- Project [ss_sold_date_sk#6284, ss_quantity#6294, ss_sales_price#6297, c_customer_sk#562]
                                                                  :  +- BroadcastHashJoin [ss_customer_sk#6287], [c_customer_sk#562], Inner, BuildRight, false
                                                                  :     :- Filter (isnotnull(ss_customer_sk#6287) AND isnotnull(ss_sold_date_sk#6284))
                                                                  :     :  +- FileScan parquet [ss_sold_date_sk#6284,ss_customer_sk#6287,ss_quantity#6294,ss_sales_price#6297] Batched: true, DataFilters: [isnotnull(ss_customer_sk#6287), isnotnull(ss_sold_date_sk#6284)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#47499]
                                                                  :        +- Filter isnotnull(c_customer_sk#562)
                                                                  :           +- FileScan parquet [c_customer_sk#562] Batched: true, DataFilters: [isnotnull(c_customer_sk#562)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                                                                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#47503]
                                                                     +- Project [d_date_sk#6307]
                                                                        +- Filter (d_year#6313 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#6307))
                                                                           +- FileScan parquet [d_date_sk#6307,d_year#6313] Batched: true, DataFilters: [d_year#6313 IN (2000,2001,2002,2003), isnotnull(d_date_sk#6307)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
               :     :              +- *(24) HashAggregate(keys=[c_customer_sk#6358], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6345 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6348 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#6358, ssales#6282])
               :     :                 +- ShuffleQueryStage 17
               :     :                    +- Exchange hashpartitioning(c_customer_sk#6358, 200), ENSURE_REQUIREMENTS, [id=#49619]
               :     :                       +- *(13) HashAggregate(keys=[c_customer_sk#6358], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6345 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6348 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#6358, sum#6456, isEmpty#6457])
               :     :                          +- *(13) Project [ss_quantity#6345, ss_sales_price#6348, c_customer_sk#6358]
               :     :                             +- *(13) BroadcastHashJoin [ss_customer_sk#6338], [c_customer_sk#6358], Inner, BuildRight, false
               :     :                                :- *(13) Filter isnotnull(ss_customer_sk#6338)
               :     :                                :  +- *(13) ColumnarToRow
               :     :                                :     +- FileScan parquet [ss_customer_sk#6338,ss_quantity#6345,ss_sales_price#6348] Batched: true, DataFilters: [isnotnull(ss_customer_sk#6338)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
               :     :                                +- BroadcastQueryStage 3
               :     :                                   +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#47944]
               :     :                                      +- *(4) Filter isnotnull(c_customer_sk#6358)
               :     :                                         +- *(4) ColumnarToRow
               :     :                                            +- FileScan parquet [c_customer_sk#6358] Batched: true, DataFilters: [isnotnull(c_customer_sk#6358)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
               :     +- BroadcastQueryStage 4
               :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#47971]
               :           +- *(5) Project [d_date_sk#6376]
               :              +- *(5) Filter ((((isnotnull(d_year#6382) AND isnotnull(d_moy#6384)) AND (d_year#6382 = 2000)) AND (d_moy#6384 = 7)) AND isnotnull(d_date_sk#6376))
               :                 +- *(5) ColumnarToRow
               :                    +- FileScan parquet [d_date_sk#6376,d_year#6382,d_moy#6384] Batched: true, DataFilters: [isnotnull(d_year#6382), isnotnull(d_moy#6384), (d_year#6382 = 2000), (d_moy#6384 = 7), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,7), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
               +- *(28) Project [CheckOverflow((promote_precision(cast(cast(ws_quantity#402 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#404 as decimal(12,2)))), DecimalType(18,2), true) AS sales#6273]
                  +- *(28) BroadcastHashJoin [ws_sold_date_sk#384], [d_date_sk#6404], Inner, BuildRight, false
                     :- *(28) Project [ws_sold_date_sk#384, ws_quantity#402, ws_list_price#404]
                     :  +- *(28) SortMergeJoin [ws_bill_customer_sk#388], [c_customer_sk#6358], LeftSemi
                     :     :- *(26) Sort [ws_bill_customer_sk#388 ASC NULLS FIRST], false, 0
                     :     :  +- ShuffleQueryStage 24
                     :     :     +- Exchange hashpartitioning(ws_bill_customer_sk#388, 200), ENSURE_REQUIREMENTS, [id=#50518]
                     :     :        +- *(22) Project [ws_sold_date_sk#384, ws_bill_customer_sk#388, ws_quantity#402, ws_list_price#404]
                     :     :           +- *(22) SortMergeJoin [ws_item_sk#387], [item_sk#6277], LeftSemi
                     :     :              :- *(20) Sort [ws_item_sk#387 ASC NULLS FIRST], false, 0
                     :     :              :  +- AQEShuffleRead coalesced
                     :     :              :     +- ShuffleQueryStage 5
                     :     :              :        +- Exchange hashpartitioning(ws_item_sk#387, 200), ENSURE_REQUIREMENTS, [id=#47990]
                     :     :              :           +- *(6) Filter isnotnull(ws_sold_date_sk#384)
                     :     :              :              +- *(6) ColumnarToRow
                     :     :              :                 +- FileScan parquet [ws_sold_date_sk#384,ws_item_sk#387,ws_bill_customer_sk#388,ws_quantity#402,ws_list_price#404] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#384)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:d...
                     :     :              +- *(21) Sort [item_sk#6277 ASC NULLS FIRST], false, 0
                     :     :                 +- AQEShuffleRead coalesced
                     :     :                    +- ShuffleQueryStage 22
                     :     :                       +- ReusedExchange [item_sk#6277], Exchange hashpartitioning(item_sk#6277, 200), ENSURE_REQUIREMENTS, [id=#49999]
                     :     +- *(27) Sort [c_customer_sk#6358 ASC NULLS FIRST], false, 0
                     :        +- *(27) Project [c_customer_sk#6358]
                     :           +- *(27) Filter (isnotnull(ssales#6282) AND (cast(ssales#6282 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(Subquery subquery#6283, [id=#47514] as decimal(32,6)))), DecimalType(38,8), true)))
                     :              :  +- Subquery subquery#6283, [id=#47514]
                     :              :     +- AdaptiveSparkPlan isFinalPlan=true
                                          +- == Final Plan ==
                                             *(6) HashAggregate(keys=[], functions=[max(csales#6280)], output=[tpcds_cmax#6281])
                                             +- ShuffleQueryStage 6
                                                +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#51181]
                                                   +- *(5) HashAggregate(keys=[], functions=[partial_max(csales#6280)], output=[max#6459])
                                                      +- *(5) HashAggregate(keys=[c_customer_sk#562], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6294 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6297 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#6280])
                                                         +- AQEShuffleRead coalesced
                                                            +- ShuffleQueryStage 5
                                                               +- Exchange hashpartitioning(c_customer_sk#562, 200), ENSURE_REQUIREMENTS, [id=#51123]
                                                                  +- *(4) HashAggregate(keys=[c_customer_sk#562], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6294 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6297 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#562, sum#6462, isEmpty#6463])
                                                                     +- *(4) Project [ss_quantity#6294, ss_sales_price#6297, c_customer_sk#562]
                                                                        +- *(4) BroadcastHashJoin [ss_sold_date_sk#6284], [d_date_sk#6307], Inner, BuildRight, false
                                                                           :- *(4) Project [ss_sold_date_sk#6284, ss_quantity#6294, ss_sales_price#6297, c_customer_sk#562]
                                                                           :  +- *(4) BroadcastHashJoin [ss_customer_sk#6287], [c_customer_sk#562], Inner, BuildRight, false
                                                                           :     :- *(4) Filter (isnotnull(ss_customer_sk#6287) AND isnotnull(ss_sold_date_sk#6284))
                                                                           :     :  +- *(4) ColumnarToRow
                                                                           :     :     +- FileScan parquet [ss_sold_date_sk#6284,ss_customer_sk#6287,ss_quantity#6294,ss_sales_price#6297] Batched: true, DataFilters: [isnotnull(ss_customer_sk#6287), isnotnull(ss_sold_date_sk#6284)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                           :     +- BroadcastQueryStage 4
                                                                           :        +- ReusedExchange [c_customer_sk#562], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#47944]
                                                                           +- BroadcastQueryStage 2
                                                                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#50985]
                                                                                 +- *(2) Project [d_date_sk#6307]
                                                                                    +- *(2) Filter (d_year#6313 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#6307))
                                                                                       +- *(2) ColumnarToRow
                                                                                          +- FileScan parquet [d_date_sk#6307,d_year#6313] Batched: true, DataFilters: [d_year#6313 IN (2000,2001,2002,2003), isnotnull(d_date_sk#6307)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                          +- == Initial Plan ==
                                             HashAggregate(keys=[], functions=[max(csales#6280)], output=[tpcds_cmax#6281])
                                             +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#47512]
                                                +- HashAggregate(keys=[], functions=[partial_max(csales#6280)], output=[max#6459])
                                                   +- HashAggregate(keys=[c_customer_sk#562], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6294 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6297 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#6280])
                                                      +- Exchange hashpartitioning(c_customer_sk#562, 200), ENSURE_REQUIREMENTS, [id=#47508]
                                                         +- HashAggregate(keys=[c_customer_sk#562], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6294 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6297 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#562, sum#6462, isEmpty#6463])
                                                            +- Project [ss_quantity#6294, ss_sales_price#6297, c_customer_sk#562]
                                                               +- BroadcastHashJoin [ss_sold_date_sk#6284], [d_date_sk#6307], Inner, BuildRight, false
                                                                  :- Project [ss_sold_date_sk#6284, ss_quantity#6294, ss_sales_price#6297, c_customer_sk#562]
                                                                  :  +- BroadcastHashJoin [ss_customer_sk#6287], [c_customer_sk#562], Inner, BuildRight, false
                                                                  :     :- Filter (isnotnull(ss_customer_sk#6287) AND isnotnull(ss_sold_date_sk#6284))
                                                                  :     :  +- FileScan parquet [ss_sold_date_sk#6284,ss_customer_sk#6287,ss_quantity#6294,ss_sales_price#6297] Batched: true, DataFilters: [isnotnull(ss_customer_sk#6287), isnotnull(ss_sold_date_sk#6284)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#47499]
                                                                  :        +- Filter isnotnull(c_customer_sk#562)
                                                                  :           +- FileScan parquet [c_customer_sk#562] Batched: true, DataFilters: [isnotnull(c_customer_sk#562)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                                                                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#47503]
                                                                     +- Project [d_date_sk#6307]
                                                                        +- Filter (d_year#6313 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#6307))
                                                                           +- FileScan parquet [d_date_sk#6307,d_year#6313] Batched: true, DataFilters: [d_year#6313 IN (2000,2001,2002,2003), isnotnull(d_date_sk#6307)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                     :              +- *(27) HashAggregate(keys=[c_customer_sk#6358], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6345 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6348 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#6358, ssales#6282])
                     :                 +- ShuffleQueryStage 19
                     :                    +- ReusedExchange [c_customer_sk#6358, sum#6456, isEmpty#6457], Exchange hashpartitioning(c_customer_sk#6358, 200), ENSURE_REQUIREMENTS, [id=#49619]
                     +- BroadcastQueryStage 13
                        +- ReusedExchange [d_date_sk#6404], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#47971]
+- == Initial Plan ==
   HashAggregate(keys=[], functions=[sum(sales#6270)], output=[sum(sales)#6444])
   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#47659]
      +- HashAggregate(keys=[], functions=[partial_sum(sales#6270)], output=[sum#6450, isEmpty#6451])
         +- Union
            :- Project [CheckOverflow((promote_precision(cast(cast(cs_quantity#136 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#138 as decimal(12,2)))), DecimalType(18,2), true) AS sales#6270]
            :  +- BroadcastHashJoin [cs_sold_date_sk#118], [d_date_sk#6376], Inner, BuildRight, false
            :     :- Project [cs_sold_date_sk#118, cs_quantity#136, cs_list_price#138]
            :     :  +- SortMergeJoin [cs_bill_customer_sk#121], [c_customer_sk#6358], LeftSemi
            :     :     :- Sort [cs_bill_customer_sk#121 ASC NULLS FIRST], false, 0
            :     :     :  +- Exchange hashpartitioning(cs_bill_customer_sk#121, 200), ENSURE_REQUIREMENTS, [id=#47606]
            :     :     :     +- Project [cs_sold_date_sk#118, cs_bill_customer_sk#121, cs_quantity#136, cs_list_price#138]
            :     :     :        +- SortMergeJoin [cs_item_sk#133], [item_sk#6277], LeftSemi
            :     :     :           :- Sort [cs_item_sk#133 ASC NULLS FIRST], false, 0
            :     :     :           :  +- Exchange hashpartitioning(cs_item_sk#133, 200), ENSURE_REQUIREMENTS, [id=#47589]
            :     :     :           :     +- Filter isnotnull(cs_sold_date_sk#118)
            :     :     :           :        +- FileScan parquet [cs_sold_date_sk#118,cs_bill_customer_sk#121,cs_item_sk#133,cs_quantity#136,cs_list_price#138] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#118)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:d...
            :     :     :           +- Sort [item_sk#6277 ASC NULLS FIRST], false, 0
            :     :     :              +- Exchange hashpartitioning(item_sk#6277, 200), ENSURE_REQUIREMENTS, [id=#47590]
            :     :     :                 +- Project [item_sk#6277]
            :     :     :                    +- Filter (cnt#6279L > 4)
            :     :     :                       +- HashAggregate(keys=[_groupingexpression#6446, i_item_sk#500, d_date#600], functions=[count(1)], output=[item_sk#6277, cnt#6279L])
            :     :     :                          +- Exchange hashpartitioning(_groupingexpression#6446, i_item_sk#500, d_date#600, 200), ENSURE_REQUIREMENTS, [id=#47583]
            :     :     :                             +- HashAggregate(keys=[_groupingexpression#6446, i_item_sk#500, d_date#600], functions=[partial_count(1)], output=[_groupingexpression#6446, i_item_sk#500, d_date#600, count#6453L])
            :     :     :                                +- Project [d_date#600, i_item_sk#500, substr(i_item_desc#504, 1, 30) AS _groupingexpression#6446]
            :     :     :                                   +- BroadcastHashJoin [ss_item_sk#666], [i_item_sk#500], Inner, BuildRight, false
            :     :     :                                      :- Project [ss_item_sk#666, d_date#600]
            :     :     :                                      :  +- BroadcastHashJoin [ss_sold_date_sk#664], [d_date_sk#598], Inner, BuildRight, false
            :     :     :                                      :     :- Filter (isnotnull(ss_sold_date_sk#664) AND isnotnull(ss_item_sk#666))
            :     :     :                                      :     :  +- FileScan parquet [ss_sold_date_sk#664,ss_item_sk#666] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#664), isnotnull(ss_item_sk#666)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>
            :     :     :                                      :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#47574]
            :     :     :                                      :        +- Project [d_date_sk#598, d_date#600]
            :     :     :                                      :           +- Filter (d_year#604 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#598))
            :     :     :                                      :              +- FileScan parquet [d_date_sk#598,d_date#600,d_year#604] Batched: true, DataFilters: [d_year#604 IN (2000,2001,2002,2003), isnotnull(d_date_sk#598)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>
            :     :     :                                      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#47578]
            :     :     :                                         +- Filter isnotnull(i_item_sk#500)
            :     :     :                                            +- FileScan parquet [i_item_sk#500,i_item_desc#504] Batched: true, DataFilters: [isnotnull(i_item_sk#500)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_desc:string>
            :     :     +- Sort [c_customer_sk#6358 ASC NULLS FIRST], false, 0
            :     :        +- Project [c_customer_sk#6358]
            :     :           +- Filter (isnotnull(ssales#6282) AND (cast(ssales#6282 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(Subquery subquery#6283, [id=#47514] as decimal(32,6)))), DecimalType(38,8), true)))
            :     :              :  +- Subquery subquery#6283, [id=#47514]
            :     :              :     +- AdaptiveSparkPlan isFinalPlan=true
                                       +- == Final Plan ==
                                          *(6) HashAggregate(keys=[], functions=[max(csales#6280)], output=[tpcds_cmax#6281])
                                          +- ShuffleQueryStage 6
                                             +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#51181]
                                                +- *(5) HashAggregate(keys=[], functions=[partial_max(csales#6280)], output=[max#6459])
                                                   +- *(5) HashAggregate(keys=[c_customer_sk#562], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6294 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6297 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#6280])
                                                      +- AQEShuffleRead coalesced
                                                         +- ShuffleQueryStage 5
                                                            +- Exchange hashpartitioning(c_customer_sk#562, 200), ENSURE_REQUIREMENTS, [id=#51123]
                                                               +- *(4) HashAggregate(keys=[c_customer_sk#562], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6294 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6297 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#562, sum#6462, isEmpty#6463])
                                                                  +- *(4) Project [ss_quantity#6294, ss_sales_price#6297, c_customer_sk#562]
                                                                     +- *(4) BroadcastHashJoin [ss_sold_date_sk#6284], [d_date_sk#6307], Inner, BuildRight, false
                                                                        :- *(4) Project [ss_sold_date_sk#6284, ss_quantity#6294, ss_sales_price#6297, c_customer_sk#562]
                                                                        :  +- *(4) BroadcastHashJoin [ss_customer_sk#6287], [c_customer_sk#562], Inner, BuildRight, false
                                                                        :     :- *(4) Filter (isnotnull(ss_customer_sk#6287) AND isnotnull(ss_sold_date_sk#6284))
                                                                        :     :  +- *(4) ColumnarToRow
                                                                        :     :     +- FileScan parquet [ss_sold_date_sk#6284,ss_customer_sk#6287,ss_quantity#6294,ss_sales_price#6297] Batched: true, DataFilters: [isnotnull(ss_customer_sk#6287), isnotnull(ss_sold_date_sk#6284)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                        :     +- BroadcastQueryStage 4
                                                                        :        +- ReusedExchange [c_customer_sk#562], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#47944]
                                                                        +- BroadcastQueryStage 2
                                                                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#50985]
                                                                              +- *(2) Project [d_date_sk#6307]
                                                                                 +- *(2) Filter (d_year#6313 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#6307))
                                                                                    +- *(2) ColumnarToRow
                                                                                       +- FileScan parquet [d_date_sk#6307,d_year#6313] Batched: true, DataFilters: [d_year#6313 IN (2000,2001,2002,2003), isnotnull(d_date_sk#6307)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                       +- == Initial Plan ==
                                          HashAggregate(keys=[], functions=[max(csales#6280)], output=[tpcds_cmax#6281])
                                          +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#47512]
                                             +- HashAggregate(keys=[], functions=[partial_max(csales#6280)], output=[max#6459])
                                                +- HashAggregate(keys=[c_customer_sk#562], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6294 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6297 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#6280])
                                                   +- Exchange hashpartitioning(c_customer_sk#562, 200), ENSURE_REQUIREMENTS, [id=#47508]
                                                      +- HashAggregate(keys=[c_customer_sk#562], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6294 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6297 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#562, sum#6462, isEmpty#6463])
                                                         +- Project [ss_quantity#6294, ss_sales_price#6297, c_customer_sk#562]
                                                            +- BroadcastHashJoin [ss_sold_date_sk#6284], [d_date_sk#6307], Inner, BuildRight, false
                                                               :- Project [ss_sold_date_sk#6284, ss_quantity#6294, ss_sales_price#6297, c_customer_sk#562]
                                                               :  +- BroadcastHashJoin [ss_customer_sk#6287], [c_customer_sk#562], Inner, BuildRight, false
                                                               :     :- Filter (isnotnull(ss_customer_sk#6287) AND isnotnull(ss_sold_date_sk#6284))
                                                               :     :  +- FileScan parquet [ss_sold_date_sk#6284,ss_customer_sk#6287,ss_quantity#6294,ss_sales_price#6297] Batched: true, DataFilters: [isnotnull(ss_customer_sk#6287), isnotnull(ss_sold_date_sk#6284)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#47499]
                                                               :        +- Filter isnotnull(c_customer_sk#562)
                                                               :           +- FileScan parquet [c_customer_sk#562] Batched: true, DataFilters: [isnotnull(c_customer_sk#562)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                                                               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#47503]
                                                                  +- Project [d_date_sk#6307]
                                                                     +- Filter (d_year#6313 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#6307))
                                                                        +- FileScan parquet [d_date_sk#6307,d_year#6313] Batched: true, DataFilters: [d_year#6313 IN (2000,2001,2002,2003), isnotnull(d_date_sk#6307)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
            :     :              +- HashAggregate(keys=[c_customer_sk#6358], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6345 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6348 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#6358, ssales#6282])
            :     :                 +- Exchange hashpartitioning(c_customer_sk#6358, 200), ENSURE_REQUIREMENTS, [id=#47600]
            :     :                    +- HashAggregate(keys=[c_customer_sk#6358], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6345 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6348 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#6358, sum#6456, isEmpty#6457])
            :     :                       +- Project [ss_quantity#6345, ss_sales_price#6348, c_customer_sk#6358]
            :     :                          +- BroadcastHashJoin [ss_customer_sk#6338], [c_customer_sk#6358], Inner, BuildRight, false
            :     :                             :- Filter isnotnull(ss_customer_sk#6338)
            :     :                             :  +- FileScan parquet [ss_customer_sk#6338,ss_quantity#6345,ss_sales_price#6348] Batched: true, DataFilters: [isnotnull(ss_customer_sk#6338)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
            :     :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#47595]
            :     :                                +- Filter isnotnull(c_customer_sk#6358)
            :     :                                   +- FileScan parquet [c_customer_sk#6358] Batched: true, DataFilters: [isnotnull(c_customer_sk#6358)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
            :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#47612]
            :        +- Project [d_date_sk#6376]
            :           +- Filter ((((isnotnull(d_year#6382) AND isnotnull(d_moy#6384)) AND (d_year#6382 = 2000)) AND (d_moy#6384 = 7)) AND isnotnull(d_date_sk#6376))
            :              +- FileScan parquet [d_date_sk#6376,d_year#6382,d_moy#6384] Batched: true, DataFilters: [isnotnull(d_year#6382), isnotnull(d_moy#6384), (d_year#6382 = 2000), (d_moy#6384 = 7), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,7), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
            +- Project [CheckOverflow((promote_precision(cast(cast(ws_quantity#402 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#404 as decimal(12,2)))), DecimalType(18,2), true) AS sales#6273]
               +- BroadcastHashJoin [ws_sold_date_sk#384], [d_date_sk#6404], Inner, BuildRight, false
                  :- Project [ws_sold_date_sk#384, ws_quantity#402, ws_list_price#404]
                  :  +- SortMergeJoin [ws_bill_customer_sk#388], [c_customer_sk#6358], LeftSemi
                  :     :- Sort [ws_bill_customer_sk#388 ASC NULLS FIRST], false, 0
                  :     :  +- Exchange hashpartitioning(ws_bill_customer_sk#388, 200), ENSURE_REQUIREMENTS, [id=#47647]
                  :     :     +- Project [ws_sold_date_sk#384, ws_bill_customer_sk#388, ws_quantity#402, ws_list_price#404]
                  :     :        +- SortMergeJoin [ws_item_sk#387], [item_sk#6277], LeftSemi
                  :     :           :- Sort [ws_item_sk#387 ASC NULLS FIRST], false, 0
                  :     :           :  +- Exchange hashpartitioning(ws_item_sk#387, 200), ENSURE_REQUIREMENTS, [id=#47630]
                  :     :           :     +- Filter isnotnull(ws_sold_date_sk#384)
                  :     :           :        +- FileScan parquet [ws_sold_date_sk#384,ws_item_sk#387,ws_bill_customer_sk#388,ws_quantity#402,ws_list_price#404] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#384)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:d...
                  :     :           +- Sort [item_sk#6277 ASC NULLS FIRST], false, 0
                  :     :              +- Exchange hashpartitioning(item_sk#6277, 200), ENSURE_REQUIREMENTS, [id=#47631]
                  :     :                 +- Project [item_sk#6277]
                  :     :                    +- Filter (cnt#6279L > 4)
                  :     :                       +- HashAggregate(keys=[_groupingexpression#6447, i_item_sk#500, d_date#600], functions=[count(1)], output=[item_sk#6277, cnt#6279L])
                  :     :                          +- Exchange hashpartitioning(_groupingexpression#6447, i_item_sk#500, d_date#600, 200), ENSURE_REQUIREMENTS, [id=#47624]
                  :     :                             +- HashAggregate(keys=[_groupingexpression#6447, i_item_sk#500, d_date#600], functions=[partial_count(1)], output=[_groupingexpression#6447, i_item_sk#500, d_date#600, count#6453L])
                  :     :                                +- Project [d_date#600, i_item_sk#500, substr(i_item_desc#504, 1, 30) AS _groupingexpression#6447]
                  :     :                                   +- BroadcastHashJoin [ss_item_sk#666], [i_item_sk#500], Inner, BuildRight, false
                  :     :                                      :- Project [ss_item_sk#666, d_date#600]
                  :     :                                      :  +- BroadcastHashJoin [ss_sold_date_sk#664], [d_date_sk#598], Inner, BuildRight, false
                  :     :                                      :     :- Filter (isnotnull(ss_sold_date_sk#664) AND isnotnull(ss_item_sk#666))
                  :     :                                      :     :  +- FileScan parquet [ss_sold_date_sk#664,ss_item_sk#666] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#664), isnotnull(ss_item_sk#666)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>
                  :     :                                      :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#47615]
                  :     :                                      :        +- Project [d_date_sk#598, d_date#600]
                  :     :                                      :           +- Filter (d_year#604 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#598))
                  :     :                                      :              +- FileScan parquet [d_date_sk#598,d_date#600,d_year#604] Batched: true, DataFilters: [d_year#604 IN (2000,2001,2002,2003), isnotnull(d_date_sk#598)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>
                  :     :                                      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#47619]
                  :     :                                         +- Filter isnotnull(i_item_sk#500)
                  :     :                                            +- FileScan parquet [i_item_sk#500,i_item_desc#504] Batched: true, DataFilters: [isnotnull(i_item_sk#500)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_desc:string>
                  :     +- Sort [c_customer_sk#6358 ASC NULLS FIRST], false, 0
                  :        +- Project [c_customer_sk#6358]
                  :           +- Filter (isnotnull(ssales#6282) AND (cast(ssales#6282 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(Subquery subquery#6283, [id=#47514] as decimal(32,6)))), DecimalType(38,8), true)))
                  :              :  +- Subquery subquery#6283, [id=#47514]
                  :              :     +- AdaptiveSparkPlan isFinalPlan=true
                                       +- == Final Plan ==
                                          *(6) HashAggregate(keys=[], functions=[max(csales#6280)], output=[tpcds_cmax#6281])
                                          +- ShuffleQueryStage 6
                                             +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#51181]
                                                +- *(5) HashAggregate(keys=[], functions=[partial_max(csales#6280)], output=[max#6459])
                                                   +- *(5) HashAggregate(keys=[c_customer_sk#562], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6294 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6297 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#6280])
                                                      +- AQEShuffleRead coalesced
                                                         +- ShuffleQueryStage 5
                                                            +- Exchange hashpartitioning(c_customer_sk#562, 200), ENSURE_REQUIREMENTS, [id=#51123]
                                                               +- *(4) HashAggregate(keys=[c_customer_sk#562], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6294 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6297 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#562, sum#6462, isEmpty#6463])
                                                                  +- *(4) Project [ss_quantity#6294, ss_sales_price#6297, c_customer_sk#562]
                                                                     +- *(4) BroadcastHashJoin [ss_sold_date_sk#6284], [d_date_sk#6307], Inner, BuildRight, false
                                                                        :- *(4) Project [ss_sold_date_sk#6284, ss_quantity#6294, ss_sales_price#6297, c_customer_sk#562]
                                                                        :  +- *(4) BroadcastHashJoin [ss_customer_sk#6287], [c_customer_sk#562], Inner, BuildRight, false
                                                                        :     :- *(4) Filter (isnotnull(ss_customer_sk#6287) AND isnotnull(ss_sold_date_sk#6284))
                                                                        :     :  +- *(4) ColumnarToRow
                                                                        :     :     +- FileScan parquet [ss_sold_date_sk#6284,ss_customer_sk#6287,ss_quantity#6294,ss_sales_price#6297] Batched: true, DataFilters: [isnotnull(ss_customer_sk#6287), isnotnull(ss_sold_date_sk#6284)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                        :     +- BroadcastQueryStage 4
                                                                        :        +- ReusedExchange [c_customer_sk#562], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#47944]
                                                                        +- BroadcastQueryStage 2
                                                                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#50985]
                                                                              +- *(2) Project [d_date_sk#6307]
                                                                                 +- *(2) Filter (d_year#6313 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#6307))
                                                                                    +- *(2) ColumnarToRow
                                                                                       +- FileScan parquet [d_date_sk#6307,d_year#6313] Batched: true, DataFilters: [d_year#6313 IN (2000,2001,2002,2003), isnotnull(d_date_sk#6307)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                       +- == Initial Plan ==
                                          HashAggregate(keys=[], functions=[max(csales#6280)], output=[tpcds_cmax#6281])
                                          +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#47512]
                                             +- HashAggregate(keys=[], functions=[partial_max(csales#6280)], output=[max#6459])
                                                +- HashAggregate(keys=[c_customer_sk#562], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6294 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6297 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#6280])
                                                   +- Exchange hashpartitioning(c_customer_sk#562, 200), ENSURE_REQUIREMENTS, [id=#47508]
                                                      +- HashAggregate(keys=[c_customer_sk#562], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6294 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6297 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#562, sum#6462, isEmpty#6463])
                                                         +- Project [ss_quantity#6294, ss_sales_price#6297, c_customer_sk#562]
                                                            +- BroadcastHashJoin [ss_sold_date_sk#6284], [d_date_sk#6307], Inner, BuildRight, false
                                                               :- Project [ss_sold_date_sk#6284, ss_quantity#6294, ss_sales_price#6297, c_customer_sk#562]
                                                               :  +- BroadcastHashJoin [ss_customer_sk#6287], [c_customer_sk#562], Inner, BuildRight, false
                                                               :     :- Filter (isnotnull(ss_customer_sk#6287) AND isnotnull(ss_sold_date_sk#6284))
                                                               :     :  +- FileScan parquet [ss_sold_date_sk#6284,ss_customer_sk#6287,ss_quantity#6294,ss_sales_price#6297] Batched: true, DataFilters: [isnotnull(ss_customer_sk#6287), isnotnull(ss_sold_date_sk#6284)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#47499]
                                                               :        +- Filter isnotnull(c_customer_sk#562)
                                                               :           +- FileScan parquet [c_customer_sk#562] Batched: true, DataFilters: [isnotnull(c_customer_sk#562)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                                                               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#47503]
                                                                  +- Project [d_date_sk#6307]
                                                                     +- Filter (d_year#6313 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#6307))
                                                                        +- FileScan parquet [d_date_sk#6307,d_year#6313] Batched: true, DataFilters: [d_year#6313 IN (2000,2001,2002,2003), isnotnull(d_date_sk#6307)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                  :              +- HashAggregate(keys=[c_customer_sk#6358], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6345 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6348 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#6358, ssales#6282])
                  :                 +- Exchange hashpartitioning(c_customer_sk#6358, 200), ENSURE_REQUIREMENTS, [id=#47641]
                  :                    +- HashAggregate(keys=[c_customer_sk#6358], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6345 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6348 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#6358, sum#6456, isEmpty#6457])
                  :                       +- Project [ss_quantity#6345, ss_sales_price#6348, c_customer_sk#6358]
                  :                          +- BroadcastHashJoin [ss_customer_sk#6338], [c_customer_sk#6358], Inner, BuildRight, false
                  :                             :- Filter isnotnull(ss_customer_sk#6338)
                  :                             :  +- FileScan parquet [ss_customer_sk#6338,ss_quantity#6345,ss_sales_price#6348] Batched: true, DataFilters: [isnotnull(ss_customer_sk#6338)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                  :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#47636]
                  :                                +- Filter isnotnull(c_customer_sk#6358)
                  :                                   +- FileScan parquet [c_customer_sk#6358] Batched: true, DataFilters: [isnotnull(c_customer_sk#6358)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#47653]
                     +- Project [d_date_sk#6404]
                        +- Filter ((((isnotnull(d_year#6410) AND isnotnull(d_moy#6412)) AND (d_year#6410 = 2000)) AND (d_moy#6412 = 7)) AND isnotnull(d_date_sk#6404))
                           +- FileScan parquet [d_date_sk#6404,d_year#6410,d_moy#6412] Batched: true, DataFilters: [isnotnull(d_year#6410), isnotnull(d_moy#6412), (d_year#6410 = 2000), (d_moy#6412 = 7), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,7), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
