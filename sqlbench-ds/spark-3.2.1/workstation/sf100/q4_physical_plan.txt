AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[customer_id#1246 ASC NULLS FIRST,customer_first_name#1247 ASC NULLS FIRST,customer_last_name#1248 ASC NULLS FIRST,customer_login#1251 ASC NULLS FIRST], output=[customer_id#1246,customer_first_name#1247,customer_last_name#1248,customer_login#1251])
   +- *(53) Project [customer_id#1246, customer_first_name#1247, customer_last_name#1248, customer_login#1251]
      +- *(53) SortMergeJoin [customer_id#1121], [customer_id#1286], Inner, (CASE WHEN (year_total#1776 > 0.000000) THEN CheckOverflow((promote_precision(year_total#1274) / promote_precision(year_total#1776)), DecimalType(38,14), true) END > CASE WHEN (year_total#2254 > 0.000000) THEN CheckOverflow((promote_precision(year_total#1294) / promote_precision(year_total#2254)), DecimalType(38,14), true) END)
         :- *(51) Project [customer_id#1121, customer_id#1246, customer_first_name#1247, customer_last_name#1248, customer_login#1251, year_total#1776, year_total#1274, year_total#2254]
         :  +- *(51) SortMergeJoin [customer_id#1121], [customer_id#2246], Inner
         :     :- *(49) Project [customer_id#1121, customer_id#1246, customer_first_name#1247, customer_last_name#1248, customer_login#1251, year_total#1776, year_total#1274]
         :     :  +- *(49) SortMergeJoin [customer_id#1121], [customer_id#1266], Inner, (CASE WHEN (year_total#1776 > 0.000000) THEN CheckOverflow((promote_precision(year_total#1274) / promote_precision(year_total#1776)), DecimalType(38,14), true) END > CASE WHEN (year_total#1129 > 0.000000) THEN CheckOverflow((promote_precision(year_total#1254) / promote_precision(year_total#1129)), DecimalType(38,14), true) END)
         :     :     :- *(47) Project [customer_id#1121, year_total#1129, customer_id#1246, customer_first_name#1247, customer_last_name#1248, customer_login#1251, year_total#1254, year_total#1776]
         :     :     :  +- *(47) SortMergeJoin [customer_id#1121], [customer_id#1768], Inner
         :     :     :     :- *(45) SortMergeJoin [customer_id#1121], [customer_id#1246], Inner
         :     :     :     :  :- *(43) Sort [customer_id#1121 ASC NULLS FIRST], false, 0
         :     :     :     :  :  +- AQEShuffleRead coalesced
         :     :     :     :  :     +- ShuffleQueryStage 36
         :     :     :     :  :        +- Exchange hashpartitioning(customer_id#1121, 200), ENSURE_REQUIREMENTS, [id=#6450]
         :     :     :     :  :           +- *(37) Filter (isnotnull(year_total#1129) AND (year_total#1129 > 0.000000))
         :     :     :     :  :              +- *(37) HashAggregate(keys=[c_customer_id#563, c_first_name#570, c_last_name#571, c_preferred_cust_flag#572, c_birth_country#576, c_login#577, c_email_address#578, d_year#604], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#681 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#680 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#678 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#679 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1121, year_total#1129])
         :     :     :     :  :                 +- AQEShuffleRead coalesced
         :     :     :     :  :                    +- ShuffleQueryStage 30
         :     :     :     :  :                       +- Exchange hashpartitioning(c_customer_id#563, c_first_name#570, c_last_name#571, c_preferred_cust_flag#572, c_birth_country#576, c_login#577, c_email_address#578, d_year#604, 200), ENSURE_REQUIREMENTS, [id=#5268]
         :     :     :     :  :                          +- *(21) HashAggregate(keys=[c_customer_id#563, c_first_name#570, c_last_name#571, c_preferred_cust_flag#572, c_birth_country#576, c_login#577, c_email_address#578, d_year#604], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#681 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#680 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#678 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#679 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#563, c_first_name#570, c_last_name#571, c_preferred_cust_flag#572, c_birth_country#576, c_login#577, c_email_address#578, d_year#604, sum#2597, isEmpty#2598])
         :     :     :     :  :                             +- *(21) Project [c_customer_id#563, c_first_name#570, c_last_name#571, c_preferred_cust_flag#572, c_birth_country#576, c_login#577, c_email_address#578, ss_ext_discount_amt#678, ss_ext_sales_price#679, ss_ext_wholesale_cost#680, ss_ext_list_price#681, d_year#604]
         :     :     :     :  :                                +- *(21) BroadcastHashJoin [ss_sold_date_sk#664], [d_date_sk#598], Inner, BuildRight, false
         :     :     :     :  :                                   :- *(21) Project [c_customer_id#563, c_first_name#570, c_last_name#571, c_preferred_cust_flag#572, c_birth_country#576, c_login#577, c_email_address#578, ss_sold_date_sk#664, ss_ext_discount_amt#678, ss_ext_sales_price#679, ss_ext_wholesale_cost#680, ss_ext_list_price#681]
         :     :     :     :  :                                   :  +- *(21) SortMergeJoin [c_customer_sk#562], [ss_customer_sk#667], Inner
         :     :     :     :  :                                   :     :- *(19) Sort [c_customer_sk#562 ASC NULLS FIRST], false, 0
         :     :     :     :  :                                   :     :  +- ShuffleQueryStage 0
         :     :     :     :  :                                   :     :     +- Exchange hashpartitioning(c_customer_sk#562, 200), ENSURE_REQUIREMENTS, [id=#3145]
         :     :     :     :  :                                   :     :        +- *(1) Filter (isnotnull(c_customer_sk#562) AND isnotnull(c_customer_id#563))
         :     :     :     :  :                                   :     :           +- *(1) ColumnarToRow
         :     :     :     :  :                                   :     :              +- FileScan parquet [c_customer_sk#562,c_customer_id#563,c_first_name#570,c_last_name#571,c_preferred_cust_flag#572,c_birth_country#576,c_login#577,c_email_address#578] Batched: true, DataFilters: [isnotnull(c_customer_sk#562), isnotnull(c_customer_id#563)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
         :     :     :     :  :                                   :     +- *(20) Sort [ss_customer_sk#667 ASC NULLS FIRST], false, 0
         :     :     :     :  :                                   :        +- ShuffleQueryStage 1
         :     :     :     :  :                                   :           +- Exchange hashpartitioning(ss_customer_sk#667, 200), ENSURE_REQUIREMENTS, [id=#3162]
         :     :     :     :  :                                   :              +- *(2) Filter (isnotnull(ss_customer_sk#667) AND isnotnull(ss_sold_date_sk#664))
         :     :     :     :  :                                   :                 +- *(2) ColumnarToRow
         :     :     :     :  :                                   :                    +- FileScan parquet [ss_sold_date_sk#664,ss_customer_sk#667,ss_ext_discount_amt#678,ss_ext_sales_price#679,ss_ext_wholesale_cost#680,ss_ext_list_price#681] Batched: true, DataFilters: [isnotnull(ss_customer_sk#667), isnotnull(ss_sold_date_sk#664)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price...
         :     :     :     :  :                                   +- BroadcastQueryStage 2
         :     :     :     :  :                                      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#3181]
         :     :     :     :  :                                         +- *(3) Filter ((isnotnull(d_year#604) AND (d_year#604 = 2001)) AND isnotnull(d_date_sk#598))
         :     :     :     :  :                                            +- *(3) ColumnarToRow
         :     :     :     :  :                                               +- FileScan parquet [d_date_sk#598,d_year#604] Batched: true, DataFilters: [isnotnull(d_year#604), (d_year#604 = 2001), isnotnull(d_date_sk#598)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     :     :     :  +- *(44) Sort [customer_id#1246 ASC NULLS FIRST], false, 0
         :     :     :     :     +- AQEShuffleRead coalesced
         :     :     :     :        +- ShuffleQueryStage 37
         :     :     :     :           +- Exchange hashpartitioning(customer_id#1246, 200), ENSURE_REQUIREMENTS, [id=#6572]
         :     :     :     :              +- *(38) HashAggregate(keys=[c_customer_id#1301, c_first_name#1308, c_last_name#1309, c_preferred_cust_flag#1310, c_birth_country#1314, c_login#1315, c_email_address#1316, d_year#1347], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#1335 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#1334 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#1332 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#1333 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1246, customer_first_name#1247, customer_last_name#1248, customer_login#1251, year_total#1254])
         :     :     :     :                 +- AQEShuffleRead coalesced
         :     :     :     :                    +- ShuffleQueryStage 31
         :     :     :     :                       +- Exchange hashpartitioning(c_customer_id#1301, c_first_name#1308, c_last_name#1309, c_preferred_cust_flag#1310, c_birth_country#1314, c_login#1315, c_email_address#1316, d_year#1347, 200), ENSURE_REQUIREMENTS, [id=#5313]
         :     :     :     :                          +- *(24) HashAggregate(keys=[c_customer_id#1301, c_first_name#1308, c_last_name#1309, c_preferred_cust_flag#1310, c_birth_country#1314, c_login#1315, c_email_address#1316, d_year#1347], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#1335 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#1334 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#1332 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#1333 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#1301, c_first_name#1308, c_last_name#1309, c_preferred_cust_flag#1310, c_birth_country#1314, c_login#1315, c_email_address#1316, d_year#1347, sum#2601, isEmpty#2602])
         :     :     :     :                             +- *(24) Project [c_customer_id#1301, c_first_name#1308, c_last_name#1309, c_preferred_cust_flag#1310, c_birth_country#1314, c_login#1315, c_email_address#1316, ss_ext_discount_amt#1332, ss_ext_sales_price#1333, ss_ext_wholesale_cost#1334, ss_ext_list_price#1335, d_year#1347]
         :     :     :     :                                +- *(24) BroadcastHashJoin [ss_sold_date_sk#1318], [d_date_sk#1341], Inner, BuildRight, false
         :     :     :     :                                   :- *(24) Project [c_customer_id#1301, c_first_name#1308, c_last_name#1309, c_preferred_cust_flag#1310, c_birth_country#1314, c_login#1315, c_email_address#1316, ss_sold_date_sk#1318, ss_ext_discount_amt#1332, ss_ext_sales_price#1333, ss_ext_wholesale_cost#1334, ss_ext_list_price#1335]
         :     :     :     :                                   :  +- *(24) SortMergeJoin [c_customer_sk#1300], [ss_customer_sk#1321], Inner
         :     :     :     :                                   :     :- *(22) Sort [c_customer_sk#1300 ASC NULLS FIRST], false, 0
         :     :     :     :                                   :     :  +- ShuffleQueryStage 4
         :     :     :     :                                   :     :     +- ReusedExchange [c_customer_sk#1300, c_customer_id#1301, c_first_name#1308, c_last_name#1309, c_preferred_cust_flag#1310, c_birth_country#1314, c_login#1315, c_email_address#1316], Exchange hashpartitioning(c_customer_sk#562, 200), ENSURE_REQUIREMENTS, [id=#3145]
         :     :     :     :                                   :     +- *(23) Sort [ss_customer_sk#1321 ASC NULLS FIRST], false, 0
         :     :     :     :                                   :        +- ShuffleQueryStage 6
         :     :     :     :                                   :           +- ReusedExchange [ss_sold_date_sk#1318, ss_customer_sk#1321, ss_ext_discount_amt#1332, ss_ext_sales_price#1333, ss_ext_wholesale_cost#1334, ss_ext_list_price#1335], Exchange hashpartitioning(ss_customer_sk#667, 200), ENSURE_REQUIREMENTS, [id=#3162]
         :     :     :     :                                   +- BroadcastQueryStage 7
         :     :     :     :                                      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#3278]
         :     :     :     :                                         +- *(6) Filter ((isnotnull(d_year#1347) AND (d_year#1347 = 2002)) AND isnotnull(d_date_sk#1341))
         :     :     :     :                                            +- *(6) ColumnarToRow
         :     :     :     :                                               +- FileScan parquet [d_date_sk#1341,d_year#1347] Batched: true, DataFilters: [isnotnull(d_year#1347), (d_year#1347 = 2002), isnotnull(d_date_sk#1341)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     :     :     +- *(46) Sort [customer_id#1768 ASC NULLS FIRST], false, 0
         :     :     :        +- AQEShuffleRead coalesced
         :     :     :           +- ShuffleQueryStage 38
         :     :     :              +- Exchange hashpartitioning(customer_id#1768, 200), ENSURE_REQUIREMENTS, [id=#6683]
         :     :     :                 +- *(39) Project [customer_id#1131 AS customer_id#1768, year_total#1139 AS year_total#1776]
         :     :     :                    +- *(39) Filter (isnotnull(year_total#1139) AND (year_total#1139 > 0.000000))
         :     :     :                       +- *(39) HashAggregate(keys=[c_customer_id#1609, c_first_name#1616, c_last_name#1617, c_preferred_cust_flag#1618, c_birth_country#1622, c_login#1623, c_email_address#1624, d_year#1666], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#1651 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#1650 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#1648 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#1649 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1131, year_total#1139])
         :     :     :                          +- AQEShuffleRead coalesced
         :     :     :                             +- ShuffleQueryStage 32
         :     :     :                                +- Exchange hashpartitioning(c_customer_id#1609, c_first_name#1616, c_last_name#1617, c_preferred_cust_flag#1618, c_birth_country#1622, c_login#1623, c_email_address#1624, d_year#1666, 200), ENSURE_REQUIREMENTS, [id=#5823]
         :     :     :                                   +- *(27) HashAggregate(keys=[c_customer_id#1609, c_first_name#1616, c_last_name#1617, c_preferred_cust_flag#1618, c_birth_country#1622, c_login#1623, c_email_address#1624, d_year#1666], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#1651 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#1650 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#1648 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#1649 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#1609, c_first_name#1616, c_last_name#1617, c_preferred_cust_flag#1618, c_birth_country#1622, c_login#1623, c_email_address#1624, d_year#1666, sum#2605, isEmpty#2606])
         :     :     :                                      +- *(27) Project [c_customer_id#1609, c_first_name#1616, c_last_name#1617, c_preferred_cust_flag#1618, c_birth_country#1622, c_login#1623, c_email_address#1624, cs_ext_discount_amt#1648, cs_ext_sales_price#1649, cs_ext_wholesale_cost#1650, cs_ext_list_price#1651, d_year#1666]
         :     :     :                                         +- *(27) BroadcastHashJoin [cs_sold_date_sk#1626], [d_date_sk#1660], Inner, BuildRight, false
         :     :     :                                            :- *(27) Project [c_customer_id#1609, c_first_name#1616, c_last_name#1617, c_preferred_cust_flag#1618, c_birth_country#1622, c_login#1623, c_email_address#1624, cs_sold_date_sk#1626, cs_ext_discount_amt#1648, cs_ext_sales_price#1649, cs_ext_wholesale_cost#1650, cs_ext_list_price#1651]
         :     :     :                                            :  +- *(27) SortMergeJoin [c_customer_sk#1608], [cs_bill_customer_sk#1629], Inner
         :     :     :                                            :     :- *(25) Sort [c_customer_sk#1608 ASC NULLS FIRST], false, 0
         :     :     :                                            :     :  +- AQEShuffleRead coalesced
         :     :     :                                            :     :     +- ShuffleQueryStage 9
         :     :     :                                            :     :        +- ReusedExchange [c_customer_sk#1608, c_customer_id#1609, c_first_name#1616, c_last_name#1617, c_preferred_cust_flag#1618, c_birth_country#1622, c_login#1623, c_email_address#1624], Exchange hashpartitioning(c_customer_sk#562, 200), ENSURE_REQUIREMENTS, [id=#3145]
         :     :     :                                            :     +- *(26) Sort [cs_bill_customer_sk#1629 ASC NULLS FIRST], false, 0
         :     :     :                                            :        +- AQEShuffleRead coalesced
         :     :     :                                            :           +- ShuffleQueryStage 10
         :     :     :                                            :              +- Exchange hashpartitioning(cs_bill_customer_sk#1629, 200), ENSURE_REQUIREMENTS, [id=#3358]
         :     :     :                                            :                 +- *(8) Filter (isnotnull(cs_bill_customer_sk#1629) AND isnotnull(cs_sold_date_sk#1626))
         :     :     :                                            :                    +- *(8) ColumnarToRow
         :     :     :                                            :                       +- FileScan parquet [cs_sold_date_sk#1626,cs_bill_customer_sk#1629,cs_ext_discount_amt#1648,cs_ext_sales_price#1649,cs_ext_wholesale_cost#1650,cs_ext_list_price#1651] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#1629), isnotnull(cs_sold_date_sk#1626)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_...
         :     :     :                                            +- BroadcastQueryStage 12
         :     :     :                                               +- ReusedExchange [d_date_sk#1660, d_year#1666], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#3181]
         :     :     +- *(48) Sort [customer_id#1266 ASC NULLS FIRST], false, 0
         :     :        +- AQEShuffleRead coalesced
         :     :           +- ShuffleQueryStage 39
         :     :              +- Exchange hashpartitioning(customer_id#1266, 200), ENSURE_REQUIREMENTS, [id=#6786]
         :     :                 +- *(40) HashAggregate(keys=[c_customer_id#1848, c_first_name#1855, c_last_name#1856, c_preferred_cust_flag#1857, c_birth_country#1861, c_login#1862, c_email_address#1863, d_year#1905], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#1890 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#1889 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#1887 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#1888 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1266, year_total#1274])
         :     :                    +- AQEShuffleRead coalesced
         :     :                       +- ShuffleQueryStage 33
         :     :                          +- Exchange hashpartitioning(c_customer_id#1848, c_first_name#1855, c_last_name#1856, c_preferred_cust_flag#1857, c_birth_country#1861, c_login#1862, c_email_address#1863, d_year#1905, 200), ENSURE_REQUIREMENTS, [id=#5883]
         :     :                             +- *(30) HashAggregate(keys=[c_customer_id#1848, c_first_name#1855, c_last_name#1856, c_preferred_cust_flag#1857, c_birth_country#1861, c_login#1862, c_email_address#1863, d_year#1905], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#1890 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#1889 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#1887 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#1888 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#1848, c_first_name#1855, c_last_name#1856, c_preferred_cust_flag#1857, c_birth_country#1861, c_login#1862, c_email_address#1863, d_year#1905, sum#2609, isEmpty#2610])
         :     :                                +- *(30) Project [c_customer_id#1848, c_first_name#1855, c_last_name#1856, c_preferred_cust_flag#1857, c_birth_country#1861, c_login#1862, c_email_address#1863, cs_ext_discount_amt#1887, cs_ext_sales_price#1888, cs_ext_wholesale_cost#1889, cs_ext_list_price#1890, d_year#1905]
         :     :                                   +- *(30) BroadcastHashJoin [cs_sold_date_sk#1865], [d_date_sk#1899], Inner, BuildRight, false
         :     :                                      :- *(30) Project [c_customer_id#1848, c_first_name#1855, c_last_name#1856, c_preferred_cust_flag#1857, c_birth_country#1861, c_login#1862, c_email_address#1863, cs_sold_date_sk#1865, cs_ext_discount_amt#1887, cs_ext_sales_price#1888, cs_ext_wholesale_cost#1889, cs_ext_list_price#1890]
         :     :                                      :  +- *(30) SortMergeJoin [c_customer_sk#1847], [cs_bill_customer_sk#1868], Inner
         :     :                                      :     :- *(28) Sort [c_customer_sk#1847 ASC NULLS FIRST], false, 0
         :     :                                      :     :  +- AQEShuffleRead coalesced
         :     :                                      :     :     +- ShuffleQueryStage 14
         :     :                                      :     :        +- ReusedExchange [c_customer_sk#1847, c_customer_id#1848, c_first_name#1855, c_last_name#1856, c_preferred_cust_flag#1857, c_birth_country#1861, c_login#1862, c_email_address#1863], Exchange hashpartitioning(c_customer_sk#562, 200), ENSURE_REQUIREMENTS, [id=#3145]
         :     :                                      :     +- *(29) Sort [cs_bill_customer_sk#1868 ASC NULLS FIRST], false, 0
         :     :                                      :        +- AQEShuffleRead coalesced
         :     :                                      :           +- ShuffleQueryStage 16
         :     :                                      :              +- ReusedExchange [cs_sold_date_sk#1865, cs_bill_customer_sk#1868, cs_ext_discount_amt#1887, cs_ext_sales_price#1888, cs_ext_wholesale_cost#1889, cs_ext_list_price#1890], Exchange hashpartitioning(cs_bill_customer_sk#1629, 200), ENSURE_REQUIREMENTS, [id=#3358]
         :     :                                      +- BroadcastQueryStage 18
         :     :                                         +- ReusedExchange [d_date_sk#1899, d_year#1905], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#3278]
         :     +- *(50) Sort [customer_id#2246 ASC NULLS FIRST], false, 0
         :        +- AQEShuffleRead coalesced
         :           +- ShuffleQueryStage 40
         :              +- Exchange hashpartitioning(customer_id#2246, 200), ENSURE_REQUIREMENTS, [id=#6886]
         :                 +- *(41) Project [customer_id#1141 AS customer_id#2246, year_total#1149 AS year_total#2254]
         :                    +- *(41) Filter (isnotnull(year_total#1149) AND (year_total#1149 > 0.000000))
         :                       +- *(41) HashAggregate(keys=[c_customer_id#2167, c_first_name#2174, c_last_name#2175, c_preferred_cust_flag#2176, c_birth_country#2180, c_login#2181, c_email_address#2182, d_year#2224], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#2209 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#2208 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#2206 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#2207 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1141, year_total#1149])
         :                          +- AQEShuffleRead coalesced
         :                             +- ShuffleQueryStage 34
         :                                +- Exchange hashpartitioning(c_customer_id#2167, c_first_name#2174, c_last_name#2175, c_preferred_cust_flag#2176, c_birth_country#2180, c_login#2181, c_email_address#2182, d_year#2224, 200), ENSURE_REQUIREMENTS, [id=#6262]
         :                                   +- *(33) HashAggregate(keys=[c_customer_id#2167, c_first_name#2174, c_last_name#2175, c_preferred_cust_flag#2176, c_birth_country#2180, c_login#2181, c_email_address#2182, d_year#2224], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#2209 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#2208 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#2206 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#2207 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#2167, c_first_name#2174, c_last_name#2175, c_preferred_cust_flag#2176, c_birth_country#2180, c_login#2181, c_email_address#2182, d_year#2224, sum#2613, isEmpty#2614])
         :                                      +- *(33) Project [c_customer_id#2167, c_first_name#2174, c_last_name#2175, c_preferred_cust_flag#2176, c_birth_country#2180, c_login#2181, c_email_address#2182, ws_ext_discount_amt#2206, ws_ext_sales_price#2207, ws_ext_wholesale_cost#2208, ws_ext_list_price#2209, d_year#2224]
         :                                         +- *(33) BroadcastHashJoin [ws_sold_date_sk#2184], [d_date_sk#2218], Inner, BuildRight, false
         :                                            :- *(33) Project [c_customer_id#2167, c_first_name#2174, c_last_name#2175, c_preferred_cust_flag#2176, c_birth_country#2180, c_login#2181, c_email_address#2182, ws_sold_date_sk#2184, ws_ext_discount_amt#2206, ws_ext_sales_price#2207, ws_ext_wholesale_cost#2208, ws_ext_list_price#2209]
         :                                            :  +- *(33) SortMergeJoin [c_customer_sk#2166], [ws_bill_customer_sk#2188], Inner
         :                                            :     :- *(31) Sort [c_customer_sk#2166 ASC NULLS FIRST], false, 0
         :                                            :     :  +- AQEShuffleRead coalesced
         :                                            :     :     +- ShuffleQueryStage 20
         :                                            :     :        +- ReusedExchange [c_customer_sk#2166, c_customer_id#2167, c_first_name#2174, c_last_name#2175, c_preferred_cust_flag#2176, c_birth_country#2180, c_login#2181, c_email_address#2182], Exchange hashpartitioning(c_customer_sk#562, 200), ENSURE_REQUIREMENTS, [id=#3145]
         :                                            :     +- *(32) Sort [ws_bill_customer_sk#2188 ASC NULLS FIRST], false, 0
         :                                            :        +- AQEShuffleRead coalesced
         :                                            :           +- ShuffleQueryStage 21
         :                                            :              +- Exchange hashpartitioning(ws_bill_customer_sk#2188, 200), ENSURE_REQUIREMENTS, [id=#3562]
         :                                            :                 +- *(14) Filter (isnotnull(ws_bill_customer_sk#2188) AND isnotnull(ws_sold_date_sk#2184))
         :                                            :                    +- *(14) ColumnarToRow
         :                                            :                       +- FileScan parquet [ws_sold_date_sk#2184,ws_bill_customer_sk#2188,ws_ext_discount_amt#2206,ws_ext_sales_price#2207,ws_ext_wholesale_cost#2208,ws_ext_list_price#2209] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#2188), isnotnull(ws_sold_date_sk#2184)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_...
         :                                            +- BroadcastQueryStage 23
         :                                               +- ReusedExchange [d_date_sk#2218, d_year#2224], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#3181]
         +- *(52) Sort [customer_id#1286 ASC NULLS FIRST], false, 0
            +- AQEShuffleRead coalesced
               +- ShuffleQueryStage 41
                  +- Exchange hashpartitioning(customer_id#1286, 200), ENSURE_REQUIREMENTS, [id=#7307]
                     +- *(42) HashAggregate(keys=[c_customer_id#2406, c_first_name#2413, c_last_name#2414, c_preferred_cust_flag#2415, c_birth_country#2419, c_login#2420, c_email_address#2421, d_year#2463], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#2448 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#2447 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#2445 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#2446 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1286, year_total#1294])
                        +- AQEShuffleRead coalesced
                           +- ShuffleQueryStage 35
                              +- Exchange hashpartitioning(c_customer_id#2406, c_first_name#2413, c_last_name#2414, c_preferred_cust_flag#2415, c_birth_country#2419, c_login#2420, c_email_address#2421, d_year#2463, 200), ENSURE_REQUIREMENTS, [id=#6322]
                                 +- *(36) HashAggregate(keys=[c_customer_id#2406, c_first_name#2413, c_last_name#2414, c_preferred_cust_flag#2415, c_birth_country#2419, c_login#2420, c_email_address#2421, d_year#2463], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#2448 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#2447 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#2445 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#2446 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#2406, c_first_name#2413, c_last_name#2414, c_preferred_cust_flag#2415, c_birth_country#2419, c_login#2420, c_email_address#2421, d_year#2463, sum#2617, isEmpty#2618])
                                    +- *(36) Project [c_customer_id#2406, c_first_name#2413, c_last_name#2414, c_preferred_cust_flag#2415, c_birth_country#2419, c_login#2420, c_email_address#2421, ws_ext_discount_amt#2445, ws_ext_sales_price#2446, ws_ext_wholesale_cost#2447, ws_ext_list_price#2448, d_year#2463]
                                       +- *(36) BroadcastHashJoin [ws_sold_date_sk#2423], [d_date_sk#2457], Inner, BuildRight, false
                                          :- *(36) Project [c_customer_id#2406, c_first_name#2413, c_last_name#2414, c_preferred_cust_flag#2415, c_birth_country#2419, c_login#2420, c_email_address#2421, ws_sold_date_sk#2423, ws_ext_discount_amt#2445, ws_ext_sales_price#2446, ws_ext_wholesale_cost#2447, ws_ext_list_price#2448]
                                          :  +- *(36) SortMergeJoin [c_customer_sk#2405], [ws_bill_customer_sk#2427], Inner
                                          :     :- *(34) Sort [c_customer_sk#2405 ASC NULLS FIRST], false, 0
                                          :     :  +- AQEShuffleRead coalesced
                                          :     :     +- ShuffleQueryStage 25
                                          :     :        +- ReusedExchange [c_customer_sk#2405, c_customer_id#2406, c_first_name#2413, c_last_name#2414, c_preferred_cust_flag#2415, c_birth_country#2419, c_login#2420, c_email_address#2421], Exchange hashpartitioning(c_customer_sk#562, 200), ENSURE_REQUIREMENTS, [id=#3145]
                                          :     +- *(35) Sort [ws_bill_customer_sk#2427 ASC NULLS FIRST], false, 0
                                          :        +- AQEShuffleRead coalesced
                                          :           +- ShuffleQueryStage 27
                                          :              +- ReusedExchange [ws_sold_date_sk#2423, ws_bill_customer_sk#2427, ws_ext_discount_amt#2445, ws_ext_sales_price#2446, ws_ext_wholesale_cost#2447, ws_ext_list_price#2448], Exchange hashpartitioning(ws_bill_customer_sk#2188, 200), ENSURE_REQUIREMENTS, [id=#3562]
                                          +- BroadcastQueryStage 29
                                             +- ReusedExchange [d_date_sk#2457, d_year#2463], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#3278]
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[customer_id#1246 ASC NULLS FIRST,customer_first_name#1247 ASC NULLS FIRST,customer_last_name#1248 ASC NULLS FIRST,customer_login#1251 ASC NULLS FIRST], output=[customer_id#1246,customer_first_name#1247,customer_last_name#1248,customer_login#1251])
   +- Project [customer_id#1246, customer_first_name#1247, customer_last_name#1248, customer_login#1251]
      +- SortMergeJoin [customer_id#1121], [customer_id#1286], Inner, (CASE WHEN (year_total#1776 > 0.000000) THEN CheckOverflow((promote_precision(year_total#1274) / promote_precision(year_total#1776)), DecimalType(38,14), true) END > CASE WHEN (year_total#2254 > 0.000000) THEN CheckOverflow((promote_precision(year_total#1294) / promote_precision(year_total#2254)), DecimalType(38,14), true) END)
         :- Project [customer_id#1121, customer_id#1246, customer_first_name#1247, customer_last_name#1248, customer_login#1251, year_total#1776, year_total#1274, year_total#2254]
         :  +- SortMergeJoin [customer_id#1121], [customer_id#2246], Inner
         :     :- Project [customer_id#1121, customer_id#1246, customer_first_name#1247, customer_last_name#1248, customer_login#1251, year_total#1776, year_total#1274]
         :     :  +- SortMergeJoin [customer_id#1121], [customer_id#1266], Inner, (CASE WHEN (year_total#1776 > 0.000000) THEN CheckOverflow((promote_precision(year_total#1274) / promote_precision(year_total#1776)), DecimalType(38,14), true) END > CASE WHEN (year_total#1129 > 0.000000) THEN CheckOverflow((promote_precision(year_total#1254) / promote_precision(year_total#1129)), DecimalType(38,14), true) END)
         :     :     :- Project [customer_id#1121, year_total#1129, customer_id#1246, customer_first_name#1247, customer_last_name#1248, customer_login#1251, year_total#1254, year_total#1776]
         :     :     :  +- SortMergeJoin [customer_id#1121], [customer_id#1768], Inner
         :     :     :     :- SortMergeJoin [customer_id#1121], [customer_id#1246], Inner
         :     :     :     :  :- Sort [customer_id#1121 ASC NULLS FIRST], false, 0
         :     :     :     :  :  +- Exchange hashpartitioning(customer_id#1121, 200), ENSURE_REQUIREMENTS, [id=#3008]
         :     :     :     :  :     +- Filter (isnotnull(year_total#1129) AND (year_total#1129 > 0.000000))
         :     :     :     :  :        +- HashAggregate(keys=[c_customer_id#563, c_first_name#570, c_last_name#571, c_preferred_cust_flag#572, c_birth_country#576, c_login#577, c_email_address#578, d_year#604], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#681 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#680 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#678 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#679 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1121, year_total#1129])
         :     :     :     :  :           +- Exchange hashpartitioning(c_customer_id#563, c_first_name#570, c_last_name#571, c_preferred_cust_flag#572, c_birth_country#576, c_login#577, c_email_address#578, d_year#604, 200), ENSURE_REQUIREMENTS, [id=#2988]
         :     :     :     :  :              +- HashAggregate(keys=[c_customer_id#563, c_first_name#570, c_last_name#571, c_preferred_cust_flag#572, c_birth_country#576, c_login#577, c_email_address#578, d_year#604], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#681 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#680 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#678 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#679 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#563, c_first_name#570, c_last_name#571, c_preferred_cust_flag#572, c_birth_country#576, c_login#577, c_email_address#578, d_year#604, sum#2597, isEmpty#2598])
         :     :     :     :  :                 +- Project [c_customer_id#563, c_first_name#570, c_last_name#571, c_preferred_cust_flag#572, c_birth_country#576, c_login#577, c_email_address#578, ss_ext_discount_amt#678, ss_ext_sales_price#679, ss_ext_wholesale_cost#680, ss_ext_list_price#681, d_year#604]
         :     :     :     :  :                    +- BroadcastHashJoin [ss_sold_date_sk#664], [d_date_sk#598], Inner, BuildRight, false
         :     :     :     :  :                       :- Project [c_customer_id#563, c_first_name#570, c_last_name#571, c_preferred_cust_flag#572, c_birth_country#576, c_login#577, c_email_address#578, ss_sold_date_sk#664, ss_ext_discount_amt#678, ss_ext_sales_price#679, ss_ext_wholesale_cost#680, ss_ext_list_price#681]
         :     :     :     :  :                       :  +- SortMergeJoin [c_customer_sk#562], [ss_customer_sk#667], Inner
         :     :     :     :  :                       :     :- Sort [c_customer_sk#562 ASC NULLS FIRST], false, 0
         :     :     :     :  :                       :     :  +- Exchange hashpartitioning(c_customer_sk#562, 200), ENSURE_REQUIREMENTS, [id=#2976]
         :     :     :     :  :                       :     :     +- Filter (isnotnull(c_customer_sk#562) AND isnotnull(c_customer_id#563))
         :     :     :     :  :                       :     :        +- FileScan parquet [c_customer_sk#562,c_customer_id#563,c_first_name#570,c_last_name#571,c_preferred_cust_flag#572,c_birth_country#576,c_login#577,c_email_address#578] Batched: true, DataFilters: [isnotnull(c_customer_sk#562), isnotnull(c_customer_id#563)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
         :     :     :     :  :                       :     +- Sort [ss_customer_sk#667 ASC NULLS FIRST], false, 0
         :     :     :     :  :                       :        +- Exchange hashpartitioning(ss_customer_sk#667, 200), ENSURE_REQUIREMENTS, [id=#2977]
         :     :     :     :  :                       :           +- Filter (isnotnull(ss_customer_sk#667) AND isnotnull(ss_sold_date_sk#664))
         :     :     :     :  :                       :              +- FileScan parquet [ss_sold_date_sk#664,ss_customer_sk#667,ss_ext_discount_amt#678,ss_ext_sales_price#679,ss_ext_wholesale_cost#680,ss_ext_list_price#681] Batched: true, DataFilters: [isnotnull(ss_customer_sk#667), isnotnull(ss_sold_date_sk#664)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price...
         :     :     :     :  :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#2983]
         :     :     :     :  :                          +- Filter ((isnotnull(d_year#604) AND (d_year#604 = 2001)) AND isnotnull(d_date_sk#598))
         :     :     :     :  :                             +- FileScan parquet [d_date_sk#598,d_year#604] Batched: true, DataFilters: [isnotnull(d_year#604), (d_year#604 = 2001), isnotnull(d_date_sk#598)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     :     :     :  +- Sort [customer_id#1246 ASC NULLS FIRST], false, 0
         :     :     :     :     +- Exchange hashpartitioning(customer_id#1246, 200), ENSURE_REQUIREMENTS, [id=#3009]
         :     :     :     :        +- HashAggregate(keys=[c_customer_id#1301, c_first_name#1308, c_last_name#1309, c_preferred_cust_flag#1310, c_birth_country#1314, c_login#1315, c_email_address#1316, d_year#1347], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#1335 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#1334 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#1332 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#1333 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1246, customer_first_name#1247, customer_last_name#1248, customer_login#1251, year_total#1254])
         :     :     :     :           +- Exchange hashpartitioning(c_customer_id#1301, c_first_name#1308, c_last_name#1309, c_preferred_cust_flag#1310, c_birth_country#1314, c_login#1315, c_email_address#1316, d_year#1347, 200), ENSURE_REQUIREMENTS, [id=#3004]
         :     :     :     :              +- HashAggregate(keys=[c_customer_id#1301, c_first_name#1308, c_last_name#1309, c_preferred_cust_flag#1310, c_birth_country#1314, c_login#1315, c_email_address#1316, d_year#1347], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#1335 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#1334 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#1332 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#1333 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#1301, c_first_name#1308, c_last_name#1309, c_preferred_cust_flag#1310, c_birth_country#1314, c_login#1315, c_email_address#1316, d_year#1347, sum#2601, isEmpty#2602])
         :     :     :     :                 +- Project [c_customer_id#1301, c_first_name#1308, c_last_name#1309, c_preferred_cust_flag#1310, c_birth_country#1314, c_login#1315, c_email_address#1316, ss_ext_discount_amt#1332, ss_ext_sales_price#1333, ss_ext_wholesale_cost#1334, ss_ext_list_price#1335, d_year#1347]
         :     :     :     :                    +- BroadcastHashJoin [ss_sold_date_sk#1318], [d_date_sk#1341], Inner, BuildRight, false
         :     :     :     :                       :- Project [c_customer_id#1301, c_first_name#1308, c_last_name#1309, c_preferred_cust_flag#1310, c_birth_country#1314, c_login#1315, c_email_address#1316, ss_sold_date_sk#1318, ss_ext_discount_amt#1332, ss_ext_sales_price#1333, ss_ext_wholesale_cost#1334, ss_ext_list_price#1335]
         :     :     :     :                       :  +- SortMergeJoin [c_customer_sk#1300], [ss_customer_sk#1321], Inner
         :     :     :     :                       :     :- Sort [c_customer_sk#1300 ASC NULLS FIRST], false, 0
         :     :     :     :                       :     :  +- Exchange hashpartitioning(c_customer_sk#1300, 200), ENSURE_REQUIREMENTS, [id=#2992]
         :     :     :     :                       :     :     +- Filter (isnotnull(c_customer_sk#1300) AND isnotnull(c_customer_id#1301))
         :     :     :     :                       :     :        +- FileScan parquet [c_customer_sk#1300,c_customer_id#1301,c_first_name#1308,c_last_name#1309,c_preferred_cust_flag#1310,c_birth_country#1314,c_login#1315,c_email_address#1316] Batched: true, DataFilters: [isnotnull(c_customer_sk#1300), isnotnull(c_customer_id#1301)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
         :     :     :     :                       :     +- Sort [ss_customer_sk#1321 ASC NULLS FIRST], false, 0
         :     :     :     :                       :        +- Exchange hashpartitioning(ss_customer_sk#1321, 200), ENSURE_REQUIREMENTS, [id=#2993]
         :     :     :     :                       :           +- Filter (isnotnull(ss_customer_sk#1321) AND isnotnull(ss_sold_date_sk#1318))
         :     :     :     :                       :              +- FileScan parquet [ss_sold_date_sk#1318,ss_customer_sk#1321,ss_ext_discount_amt#1332,ss_ext_sales_price#1333,ss_ext_wholesale_cost#1334,ss_ext_list_price#1335] Batched: true, DataFilters: [isnotnull(ss_customer_sk#1321), isnotnull(ss_sold_date_sk#1318)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price...
         :     :     :     :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#2999]
         :     :     :     :                          +- Filter ((isnotnull(d_year#1347) AND (d_year#1347 = 2002)) AND isnotnull(d_date_sk#1341))
         :     :     :     :                             +- FileScan parquet [d_date_sk#1341,d_year#1347] Batched: true, DataFilters: [isnotnull(d_year#1347), (d_year#1347 = 2002), isnotnull(d_date_sk#1341)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     :     :     +- Sort [customer_id#1768 ASC NULLS FIRST], false, 0
         :     :     :        +- Exchange hashpartitioning(customer_id#1768, 200), ENSURE_REQUIREMENTS, [id=#3032]
         :     :     :           +- Project [customer_id#1131 AS customer_id#1768, year_total#1139 AS year_total#1776]
         :     :     :              +- Filter (isnotnull(year_total#1139) AND (year_total#1139 > 0.000000))
         :     :     :                 +- HashAggregate(keys=[c_customer_id#1609, c_first_name#1616, c_last_name#1617, c_preferred_cust_flag#1618, c_birth_country#1622, c_login#1623, c_email_address#1624, d_year#1666], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#1651 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#1650 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#1648 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#1649 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1131, year_total#1139])
         :     :     :                    +- Exchange hashpartitioning(c_customer_id#1609, c_first_name#1616, c_last_name#1617, c_preferred_cust_flag#1618, c_birth_country#1622, c_login#1623, c_email_address#1624, d_year#1666, 200), ENSURE_REQUIREMENTS, [id=#3026]
         :     :     :                       +- HashAggregate(keys=[c_customer_id#1609, c_first_name#1616, c_last_name#1617, c_preferred_cust_flag#1618, c_birth_country#1622, c_login#1623, c_email_address#1624, d_year#1666], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#1651 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#1650 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#1648 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#1649 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#1609, c_first_name#1616, c_last_name#1617, c_preferred_cust_flag#1618, c_birth_country#1622, c_login#1623, c_email_address#1624, d_year#1666, sum#2605, isEmpty#2606])
         :     :     :                          +- Project [c_customer_id#1609, c_first_name#1616, c_last_name#1617, c_preferred_cust_flag#1618, c_birth_country#1622, c_login#1623, c_email_address#1624, cs_ext_discount_amt#1648, cs_ext_sales_price#1649, cs_ext_wholesale_cost#1650, cs_ext_list_price#1651, d_year#1666]
         :     :     :                             +- BroadcastHashJoin [cs_sold_date_sk#1626], [d_date_sk#1660], Inner, BuildRight, false
         :     :     :                                :- Project [c_customer_id#1609, c_first_name#1616, c_last_name#1617, c_preferred_cust_flag#1618, c_birth_country#1622, c_login#1623, c_email_address#1624, cs_sold_date_sk#1626, cs_ext_discount_amt#1648, cs_ext_sales_price#1649, cs_ext_wholesale_cost#1650, cs_ext_list_price#1651]
         :     :     :                                :  +- SortMergeJoin [c_customer_sk#1608], [cs_bill_customer_sk#1629], Inner
         :     :     :                                :     :- Sort [c_customer_sk#1608 ASC NULLS FIRST], false, 0
         :     :     :                                :     :  +- Exchange hashpartitioning(c_customer_sk#1608, 200), ENSURE_REQUIREMENTS, [id=#3014]
         :     :     :                                :     :     +- Filter (isnotnull(c_customer_sk#1608) AND isnotnull(c_customer_id#1609))
         :     :     :                                :     :        +- FileScan parquet [c_customer_sk#1608,c_customer_id#1609,c_first_name#1616,c_last_name#1617,c_preferred_cust_flag#1618,c_birth_country#1622,c_login#1623,c_email_address#1624] Batched: true, DataFilters: [isnotnull(c_customer_sk#1608), isnotnull(c_customer_id#1609)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
         :     :     :                                :     +- Sort [cs_bill_customer_sk#1629 ASC NULLS FIRST], false, 0
         :     :     :                                :        +- Exchange hashpartitioning(cs_bill_customer_sk#1629, 200), ENSURE_REQUIREMENTS, [id=#3015]
         :     :     :                                :           +- Filter (isnotnull(cs_bill_customer_sk#1629) AND isnotnull(cs_sold_date_sk#1626))
         :     :     :                                :              +- FileScan parquet [cs_sold_date_sk#1626,cs_bill_customer_sk#1629,cs_ext_discount_amt#1648,cs_ext_sales_price#1649,cs_ext_wholesale_cost#1650,cs_ext_list_price#1651] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#1629), isnotnull(cs_sold_date_sk#1626)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_...
         :     :     :                                +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#3021]
         :     :     :                                   +- Filter ((isnotnull(d_year#1666) AND (d_year#1666 = 2001)) AND isnotnull(d_date_sk#1660))
         :     :     :                                      +- FileScan parquet [d_date_sk#1660,d_year#1666] Batched: true, DataFilters: [isnotnull(d_year#1666), (d_year#1666 = 2001), isnotnull(d_date_sk#1660)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     :     +- Sort [customer_id#1266 ASC NULLS FIRST], false, 0
         :     :        +- Exchange hashpartitioning(customer_id#1266, 200), ENSURE_REQUIREMENTS, [id=#3053]
         :     :           +- HashAggregate(keys=[c_customer_id#1848, c_first_name#1855, c_last_name#1856, c_preferred_cust_flag#1857, c_birth_country#1861, c_login#1862, c_email_address#1863, d_year#1905], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#1890 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#1889 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#1887 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#1888 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1266, year_total#1274])
         :     :              +- Exchange hashpartitioning(c_customer_id#1848, c_first_name#1855, c_last_name#1856, c_preferred_cust_flag#1857, c_birth_country#1861, c_login#1862, c_email_address#1863, d_year#1905, 200), ENSURE_REQUIREMENTS, [id=#3049]
         :     :                 +- HashAggregate(keys=[c_customer_id#1848, c_first_name#1855, c_last_name#1856, c_preferred_cust_flag#1857, c_birth_country#1861, c_login#1862, c_email_address#1863, d_year#1905], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#1890 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#1889 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#1887 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#1888 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#1848, c_first_name#1855, c_last_name#1856, c_preferred_cust_flag#1857, c_birth_country#1861, c_login#1862, c_email_address#1863, d_year#1905, sum#2609, isEmpty#2610])
         :     :                    +- Project [c_customer_id#1848, c_first_name#1855, c_last_name#1856, c_preferred_cust_flag#1857, c_birth_country#1861, c_login#1862, c_email_address#1863, cs_ext_discount_amt#1887, cs_ext_sales_price#1888, cs_ext_wholesale_cost#1889, cs_ext_list_price#1890, d_year#1905]
         :     :                       +- BroadcastHashJoin [cs_sold_date_sk#1865], [d_date_sk#1899], Inner, BuildRight, false
         :     :                          :- Project [c_customer_id#1848, c_first_name#1855, c_last_name#1856, c_preferred_cust_flag#1857, c_birth_country#1861, c_login#1862, c_email_address#1863, cs_sold_date_sk#1865, cs_ext_discount_amt#1887, cs_ext_sales_price#1888, cs_ext_wholesale_cost#1889, cs_ext_list_price#1890]
         :     :                          :  +- SortMergeJoin [c_customer_sk#1847], [cs_bill_customer_sk#1868], Inner
         :     :                          :     :- Sort [c_customer_sk#1847 ASC NULLS FIRST], false, 0
         :     :                          :     :  +- Exchange hashpartitioning(c_customer_sk#1847, 200), ENSURE_REQUIREMENTS, [id=#3037]
         :     :                          :     :     +- Filter (isnotnull(c_customer_sk#1847) AND isnotnull(c_customer_id#1848))
         :     :                          :     :        +- FileScan parquet [c_customer_sk#1847,c_customer_id#1848,c_first_name#1855,c_last_name#1856,c_preferred_cust_flag#1857,c_birth_country#1861,c_login#1862,c_email_address#1863] Batched: true, DataFilters: [isnotnull(c_customer_sk#1847), isnotnull(c_customer_id#1848)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
         :     :                          :     +- Sort [cs_bill_customer_sk#1868 ASC NULLS FIRST], false, 0
         :     :                          :        +- Exchange hashpartitioning(cs_bill_customer_sk#1868, 200), ENSURE_REQUIREMENTS, [id=#3038]
         :     :                          :           +- Filter (isnotnull(cs_bill_customer_sk#1868) AND isnotnull(cs_sold_date_sk#1865))
         :     :                          :              +- FileScan parquet [cs_sold_date_sk#1865,cs_bill_customer_sk#1868,cs_ext_discount_amt#1887,cs_ext_sales_price#1888,cs_ext_wholesale_cost#1889,cs_ext_list_price#1890] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#1868), isnotnull(cs_sold_date_sk#1865)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_...
         :     :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#3044]
         :     :                             +- Filter ((isnotnull(d_year#1905) AND (d_year#1905 = 2002)) AND isnotnull(d_date_sk#1899))
         :     :                                +- FileScan parquet [d_date_sk#1899,d_year#1905] Batched: true, DataFilters: [isnotnull(d_year#1905), (d_year#1905 = 2002), isnotnull(d_date_sk#1899)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     +- Sort [customer_id#2246 ASC NULLS FIRST], false, 0
         :        +- Exchange hashpartitioning(customer_id#2246, 200), ENSURE_REQUIREMENTS, [id=#3076]
         :           +- Project [customer_id#1141 AS customer_id#2246, year_total#1149 AS year_total#2254]
         :              +- Filter (isnotnull(year_total#1149) AND (year_total#1149 > 0.000000))
         :                 +- HashAggregate(keys=[c_customer_id#2167, c_first_name#2174, c_last_name#2175, c_preferred_cust_flag#2176, c_birth_country#2180, c_login#2181, c_email_address#2182, d_year#2224], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#2209 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#2208 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#2206 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#2207 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1141, year_total#1149])
         :                    +- Exchange hashpartitioning(c_customer_id#2167, c_first_name#2174, c_last_name#2175, c_preferred_cust_flag#2176, c_birth_country#2180, c_login#2181, c_email_address#2182, d_year#2224, 200), ENSURE_REQUIREMENTS, [id=#3070]
         :                       +- HashAggregate(keys=[c_customer_id#2167, c_first_name#2174, c_last_name#2175, c_preferred_cust_flag#2176, c_birth_country#2180, c_login#2181, c_email_address#2182, d_year#2224], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#2209 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#2208 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#2206 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#2207 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#2167, c_first_name#2174, c_last_name#2175, c_preferred_cust_flag#2176, c_birth_country#2180, c_login#2181, c_email_address#2182, d_year#2224, sum#2613, isEmpty#2614])
         :                          +- Project [c_customer_id#2167, c_first_name#2174, c_last_name#2175, c_preferred_cust_flag#2176, c_birth_country#2180, c_login#2181, c_email_address#2182, ws_ext_discount_amt#2206, ws_ext_sales_price#2207, ws_ext_wholesale_cost#2208, ws_ext_list_price#2209, d_year#2224]
         :                             +- BroadcastHashJoin [ws_sold_date_sk#2184], [d_date_sk#2218], Inner, BuildRight, false
         :                                :- Project [c_customer_id#2167, c_first_name#2174, c_last_name#2175, c_preferred_cust_flag#2176, c_birth_country#2180, c_login#2181, c_email_address#2182, ws_sold_date_sk#2184, ws_ext_discount_amt#2206, ws_ext_sales_price#2207, ws_ext_wholesale_cost#2208, ws_ext_list_price#2209]
         :                                :  +- SortMergeJoin [c_customer_sk#2166], [ws_bill_customer_sk#2188], Inner
         :                                :     :- Sort [c_customer_sk#2166 ASC NULLS FIRST], false, 0
         :                                :     :  +- Exchange hashpartitioning(c_customer_sk#2166, 200), ENSURE_REQUIREMENTS, [id=#3058]
         :                                :     :     +- Filter (isnotnull(c_customer_sk#2166) AND isnotnull(c_customer_id#2167))
         :                                :     :        +- FileScan parquet [c_customer_sk#2166,c_customer_id#2167,c_first_name#2174,c_last_name#2175,c_preferred_cust_flag#2176,c_birth_country#2180,c_login#2181,c_email_address#2182] Batched: true, DataFilters: [isnotnull(c_customer_sk#2166), isnotnull(c_customer_id#2167)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
         :                                :     +- Sort [ws_bill_customer_sk#2188 ASC NULLS FIRST], false, 0
         :                                :        +- Exchange hashpartitioning(ws_bill_customer_sk#2188, 200), ENSURE_REQUIREMENTS, [id=#3059]
         :                                :           +- Filter (isnotnull(ws_bill_customer_sk#2188) AND isnotnull(ws_sold_date_sk#2184))
         :                                :              +- FileScan parquet [ws_sold_date_sk#2184,ws_bill_customer_sk#2188,ws_ext_discount_amt#2206,ws_ext_sales_price#2207,ws_ext_wholesale_cost#2208,ws_ext_list_price#2209] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#2188), isnotnull(ws_sold_date_sk#2184)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_...
         :                                +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#3065]
         :                                   +- Filter ((isnotnull(d_year#2224) AND (d_year#2224 = 2001)) AND isnotnull(d_date_sk#2218))
         :                                      +- FileScan parquet [d_date_sk#2218,d_year#2224] Batched: true, DataFilters: [isnotnull(d_year#2224), (d_year#2224 = 2001), isnotnull(d_date_sk#2218)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         +- Sort [customer_id#1286 ASC NULLS FIRST], false, 0
            +- Exchange hashpartitioning(customer_id#1286, 200), ENSURE_REQUIREMENTS, [id=#3097]
               +- HashAggregate(keys=[c_customer_id#2406, c_first_name#2413, c_last_name#2414, c_preferred_cust_flag#2415, c_birth_country#2419, c_login#2420, c_email_address#2421, d_year#2463], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#2448 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#2447 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#2445 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#2446 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#1286, year_total#1294])
                  +- Exchange hashpartitioning(c_customer_id#2406, c_first_name#2413, c_last_name#2414, c_preferred_cust_flag#2415, c_birth_country#2419, c_login#2420, c_email_address#2421, d_year#2463, 200), ENSURE_REQUIREMENTS, [id=#3093]
                     +- HashAggregate(keys=[c_customer_id#2406, c_first_name#2413, c_last_name#2414, c_preferred_cust_flag#2415, c_birth_country#2419, c_login#2420, c_email_address#2421, d_year#2463], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#2448 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#2447 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#2445 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#2446 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#2406, c_first_name#2413, c_last_name#2414, c_preferred_cust_flag#2415, c_birth_country#2419, c_login#2420, c_email_address#2421, d_year#2463, sum#2617, isEmpty#2618])
                        +- Project [c_customer_id#2406, c_first_name#2413, c_last_name#2414, c_preferred_cust_flag#2415, c_birth_country#2419, c_login#2420, c_email_address#2421, ws_ext_discount_amt#2445, ws_ext_sales_price#2446, ws_ext_wholesale_cost#2447, ws_ext_list_price#2448, d_year#2463]
                           +- BroadcastHashJoin [ws_sold_date_sk#2423], [d_date_sk#2457], Inner, BuildRight, false
                              :- Project [c_customer_id#2406, c_first_name#2413, c_last_name#2414, c_preferred_cust_flag#2415, c_birth_country#2419, c_login#2420, c_email_address#2421, ws_sold_date_sk#2423, ws_ext_discount_amt#2445, ws_ext_sales_price#2446, ws_ext_wholesale_cost#2447, ws_ext_list_price#2448]
                              :  +- SortMergeJoin [c_customer_sk#2405], [ws_bill_customer_sk#2427], Inner
                              :     :- Sort [c_customer_sk#2405 ASC NULLS FIRST], false, 0
                              :     :  +- Exchange hashpartitioning(c_customer_sk#2405, 200), ENSURE_REQUIREMENTS, [id=#3081]
                              :     :     +- Filter (isnotnull(c_customer_sk#2405) AND isnotnull(c_customer_id#2406))
                              :     :        +- FileScan parquet [c_customer_sk#2405,c_customer_id#2406,c_first_name#2413,c_last_name#2414,c_preferred_cust_flag#2415,c_birth_country#2419,c_login#2420,c_email_address#2421] Batched: true, DataFilters: [isnotnull(c_customer_sk#2405), isnotnull(c_customer_id#2406)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
                              :     +- Sort [ws_bill_customer_sk#2427 ASC NULLS FIRST], false, 0
                              :        +- Exchange hashpartitioning(ws_bill_customer_sk#2427, 200), ENSURE_REQUIREMENTS, [id=#3082]
                              :           +- Filter (isnotnull(ws_bill_customer_sk#2427) AND isnotnull(ws_sold_date_sk#2423))
                              :              +- FileScan parquet [ws_sold_date_sk#2423,ws_bill_customer_sk#2427,ws_ext_discount_amt#2445,ws_ext_sales_price#2446,ws_ext_wholesale_cost#2447,ws_ext_list_price#2448] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#2427), isnotnull(ws_sold_date_sk#2423)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_...
                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#3088]
                                 +- Filter ((isnotnull(d_year#2463) AND (d_year#2463 = 2002)) AND isnotnull(d_date_sk#2457))
                                    +- FileScan parquet [d_date_sk#2457,d_year#2463] Batched: true, DataFilters: [isnotnull(d_year#2463), (d_year#2463 = 2002), isnotnull(d_date_sk#2457)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
