AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(30) HashAggregate(keys=[], functions=[count(1)], output=[count(1)#8672L])
   +- ShuffleQueryStage 22
      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#71568]
         +- *(29) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#8675L])
            +- *(29) HashAggregate(keys=[c_last_name#571, c_first_name#570, d_date#600], functions=[], output=[])
               +- AQEShuffleRead coalesced
                  +- ShuffleQueryStage 21
                     +- Exchange hashpartitioning(c_last_name#571, c_first_name#570, d_date#600, 200), ENSURE_REQUIREMENTS, [id=#71522]
                        +- *(28) HashAggregate(keys=[c_last_name#571, c_first_name#570, d_date#600], functions=[], output=[c_last_name#571, c_first_name#570, d_date#600])
                           +- *(28) SortMergeJoin [coalesce(c_last_name#571, ), isnull(c_last_name#571), coalesce(c_first_name#570, ), isnull(c_first_name#570), coalesce(d_date#600, 1970-01-01), isnull(d_date#600)], [coalesce(c_last_name#8662, ), isnull(c_last_name#8662), coalesce(c_first_name#8661, ), isnull(c_first_name#8661), coalesce(d_date#8627, 1970-01-01), isnull(d_date#8627)], LeftSemi
                              :- *(26) Sort [coalesce(c_last_name#571, ) ASC NULLS FIRST, isnull(c_last_name#571) ASC NULLS FIRST, coalesce(c_first_name#570, ) ASC NULLS FIRST, isnull(c_first_name#570) ASC NULLS FIRST, coalesce(d_date#600, 1970-01-01) ASC NULLS FIRST, isnull(d_date#600) ASC NULLS FIRST], false, 0
                              :  +- AQEShuffleRead coalesced
                              :     +- ShuffleQueryStage 20
                              :        +- Exchange hashpartitioning(coalesce(c_last_name#571, ), isnull(c_last_name#571), coalesce(c_first_name#570, ), isnull(c_first_name#570), coalesce(d_date#600, 1970-01-01), isnull(d_date#600), 200), ENSURE_REQUIREMENTS, [id=#71446]
                              :           +- *(25) HashAggregate(keys=[c_last_name#571, c_first_name#570, d_date#600], functions=[], output=[c_last_name#571, c_first_name#570, d_date#600])
                              :              +- AQEShuffleRead coalesced
                              :                 +- ShuffleQueryStage 19
                              :                    +- Exchange hashpartitioning(c_last_name#571, c_first_name#570, d_date#600, 200), ENSURE_REQUIREMENTS, [id=#71334]
                              :                       +- *(24) HashAggregate(keys=[c_last_name#571, c_first_name#570, d_date#600], functions=[], output=[c_last_name#571, c_first_name#570, d_date#600])
                              :                          +- *(24) SortMergeJoin [coalesce(c_last_name#571, ), isnull(c_last_name#571), coalesce(c_first_name#570, ), isnull(c_first_name#570), coalesce(d_date#600, 1970-01-01), isnull(d_date#600)], [coalesce(c_last_name#8616, ), isnull(c_last_name#8616), coalesce(c_first_name#8615, ), isnull(c_first_name#8615), coalesce(d_date#8581, 1970-01-01), isnull(d_date#8581)], LeftSemi
                              :                             :- *(22) Sort [coalesce(c_last_name#571, ) ASC NULLS FIRST, isnull(c_last_name#571) ASC NULLS FIRST, coalesce(c_first_name#570, ) ASC NULLS FIRST, isnull(c_first_name#570) ASC NULLS FIRST, coalesce(d_date#600, 1970-01-01) ASC NULLS FIRST, isnull(d_date#600) ASC NULLS FIRST], false, 0
                              :                             :  +- AQEShuffleRead coalesced
                              :                             :     +- ShuffleQueryStage 16
                              :                             :        +- Exchange hashpartitioning(coalesce(c_last_name#571, ), isnull(c_last_name#571), coalesce(c_first_name#570, ), isnull(c_first_name#570), coalesce(d_date#600, 1970-01-01), isnull(d_date#600), 200), ENSURE_REQUIREMENTS, [id=#70983]
                              :                             :           +- *(19) HashAggregate(keys=[c_last_name#571, c_first_name#570, d_date#600], functions=[], output=[c_last_name#571, c_first_name#570, d_date#600])
                              :                             :              +- AQEShuffleRead coalesced
                              :                             :                 +- ShuffleQueryStage 13
                              :                             :                    +- Exchange hashpartitioning(c_last_name#571, c_first_name#570, d_date#600, 200), ENSURE_REQUIREMENTS, [id=#70531]
                              :                             :                       +- *(12) HashAggregate(keys=[c_last_name#571, c_first_name#570, d_date#600], functions=[], output=[c_last_name#571, c_first_name#570, d_date#600])
                              :                             :                          +- *(12) Project [c_last_name#571, c_first_name#570, d_date#600]
                              :                             :                             +- *(12) SortMergeJoin [ss_customer_sk#667], [c_customer_sk#562], Inner
                              :                             :                                :- *(10) Sort [ss_customer_sk#667 ASC NULLS FIRST], false, 0
                              :                             :                                :  +- AQEShuffleRead coalesced
                              :                             :                                :     +- ShuffleQueryStage 10
                              :                             :                                :        +- Exchange hashpartitioning(ss_customer_sk#667, 200), ENSURE_REQUIREMENTS, [id=#70219]
                              :                             :                                :           +- *(7) Project [ss_customer_sk#667, d_date#600]
                              :                             :                                :              +- *(7) BroadcastHashJoin [ss_sold_date_sk#664], [d_date_sk#598], Inner, BuildRight, false
                              :                             :                                :                 :- *(7) Filter (isnotnull(ss_sold_date_sk#664) AND isnotnull(ss_customer_sk#667))
                              :                             :                                :                 :  +- *(7) ColumnarToRow
                              :                             :                                :                 :     +- FileScan parquet [ss_sold_date_sk#664,ss_customer_sk#667] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#664), isnotnull(ss_customer_sk#667)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int>
                              :                             :                                :                 +- BroadcastQueryStage 0
                              :                             :                                :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#69419]
                              :                             :                                :                       +- *(1) Project [d_date_sk#598, d_date#600]
                              :                             :                                :                          +- *(1) Filter (((isnotnull(d_month_seq#601) AND (d_month_seq#601 >= 1198)) AND (d_month_seq#601 <= 1209)) AND isnotnull(d_date_sk#598))
                              :                             :                                :                             +- *(1) ColumnarToRow
                              :                             :                                :                                +- FileScan parquet [d_date_sk#598,d_date#600,d_month_seq#601] Batched: true, DataFilters: [isnotnull(d_month_seq#601), (d_month_seq#601 >= 1198), (d_month_seq#601 <= 1209), isnotnull(d_da..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1198), LessThanOrEqual(d_month_seq,1209),..., ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>
                              :                             :                                +- *(11) Sort [c_customer_sk#562 ASC NULLS FIRST], false, 0
                              :                             :                                   +- AQEShuffleRead coalesced
                              :                             :                                      +- ShuffleQueryStage 1
                              :                             :                                         +- Exchange hashpartitioning(c_customer_sk#562, 200), ENSURE_REQUIREMENTS, [id=#69440]
                              :                             :                                            +- *(2) Filter isnotnull(c_customer_sk#562)
                              :                             :                                               +- *(2) ColumnarToRow
                              :                             :                                                  +- FileScan parquet [c_customer_sk#562,c_first_name#570,c_last_name#571] Batched: true, DataFilters: [isnotnull(c_customer_sk#562)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>
                              :                             +- *(23) Sort [coalesce(c_last_name#8616, ) ASC NULLS FIRST, isnull(c_last_name#8616) ASC NULLS FIRST, coalesce(c_first_name#8615, ) ASC NULLS FIRST, isnull(c_first_name#8615) ASC NULLS FIRST, coalesce(d_date#8581, 1970-01-01) ASC NULLS FIRST, isnull(d_date#8581) ASC NULLS FIRST], false, 0
                              :                                +- AQEShuffleRead coalesced
                              :                                   +- ShuffleQueryStage 17
                              :                                      +- Exchange hashpartitioning(coalesce(c_last_name#8616, ), isnull(c_last_name#8616), coalesce(c_first_name#8615, ), isnull(c_first_name#8615), coalesce(d_date#8581, 1970-01-01), isnull(d_date#8581), 200), ENSURE_REQUIREMENTS, [id=#71087]
                              :                                         +- *(20) HashAggregate(keys=[c_last_name#8616, c_first_name#8615, d_date#8581], functions=[], output=[c_last_name#8616, c_first_name#8615, d_date#8581])
                              :                                            +- AQEShuffleRead coalesced
                              :                                               +- ShuffleQueryStage 14
                              :                                                  +- Exchange hashpartitioning(c_last_name#8616, c_first_name#8615, d_date#8581, 200), ENSURE_REQUIREMENTS, [id=#70715]
                              :                                                     +- *(15) HashAggregate(keys=[c_last_name#8616, c_first_name#8615, d_date#8581], functions=[], output=[c_last_name#8616, c_first_name#8615, d_date#8581])
                              :                                                        +- *(15) Project [c_last_name#8616, c_first_name#8615, d_date#8581]
                              :                                                           +- *(15) SortMergeJoin [cs_bill_customer_sk#121], [c_customer_sk#8607], Inner
                              :                                                              :- *(13) Sort [cs_bill_customer_sk#121 ASC NULLS FIRST], false, 0
                              :                                                              :  +- AQEShuffleRead coalesced
                              :                                                              :     +- ShuffleQueryStage 11
                              :                                                              :        +- Exchange hashpartitioning(cs_bill_customer_sk#121, 200), ENSURE_REQUIREMENTS, [id=#70253]
                              :                                                              :           +- *(8) Project [cs_bill_customer_sk#121, d_date#8581]
                              :                                                              :              +- *(8) BroadcastHashJoin [cs_sold_date_sk#118], [d_date_sk#8579], Inner, BuildRight, false
                              :                                                              :                 :- *(8) Filter (isnotnull(cs_sold_date_sk#118) AND isnotnull(cs_bill_customer_sk#121))
                              :                                                              :                 :  +- *(8) ColumnarToRow
                              :                                                              :                 :     +- FileScan parquet [cs_sold_date_sk#118,cs_bill_customer_sk#121] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#118), isnotnull(cs_bill_customer_sk#121)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_bill_customer_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int>
                              :                                                              :                 +- BroadcastQueryStage 3
                              :                                                              :                    +- ReusedExchange [d_date_sk#8579, d_date#8581], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#69419]
                              :                                                              +- *(14) Sort [c_customer_sk#8607 ASC NULLS FIRST], false, 0
                              :                                                                 +- AQEShuffleRead coalesced
                              :                                                                    +- ShuffleQueryStage 5
                              :                                                                       +- ReusedExchange [c_customer_sk#8607, c_first_name#8615, c_last_name#8616], Exchange hashpartitioning(c_customer_sk#562, 200), ENSURE_REQUIREMENTS, [id=#69440]
                              +- *(27) Sort [coalesce(c_last_name#8662, ) ASC NULLS FIRST, isnull(c_last_name#8662) ASC NULLS FIRST, coalesce(c_first_name#8661, ) ASC NULLS FIRST, isnull(c_first_name#8661) ASC NULLS FIRST, coalesce(d_date#8627, 1970-01-01) ASC NULLS FIRST, isnull(d_date#8627) ASC NULLS FIRST], false, 0
                                 +- AQEShuffleRead coalesced
                                    +- ShuffleQueryStage 18
                                       +- Exchange hashpartitioning(coalesce(c_last_name#8662, ), isnull(c_last_name#8662), coalesce(c_first_name#8661, ), isnull(c_first_name#8661), coalesce(d_date#8627, 1970-01-01), isnull(d_date#8627), 200), ENSURE_REQUIREMENTS, [id=#71190]
                                          +- *(21) HashAggregate(keys=[c_last_name#8662, c_first_name#8661, d_date#8627], functions=[], output=[c_last_name#8662, c_first_name#8661, d_date#8627])
                                             +- AQEShuffleRead coalesced
                                                +- ShuffleQueryStage 15
                                                   +- Exchange hashpartitioning(c_last_name#8662, c_first_name#8661, d_date#8627, 200), ENSURE_REQUIREMENTS, [id=#70876]
                                                      +- *(18) HashAggregate(keys=[c_last_name#8662, c_first_name#8661, d_date#8627], functions=[], output=[c_last_name#8662, c_first_name#8661, d_date#8627])
                                                         +- *(18) Project [c_last_name#8662, c_first_name#8661, d_date#8627]
                                                            +- *(18) SortMergeJoin [ws_bill_customer_sk#388], [c_customer_sk#8653], Inner
                                                               :- *(16) Sort [ws_bill_customer_sk#388 ASC NULLS FIRST], false, 0
                                                               :  +- AQEShuffleRead coalesced
                                                               :     +- ShuffleQueryStage 12
                                                               :        +- Exchange hashpartitioning(ws_bill_customer_sk#388, 200), ENSURE_REQUIREMENTS, [id=#70293]
                                                               :           +- *(9) Project [ws_bill_customer_sk#388, d_date#8627]
                                                               :              +- *(9) BroadcastHashJoin [ws_sold_date_sk#384], [d_date_sk#8625], Inner, BuildRight, false
                                                               :                 :- *(9) Filter (isnotnull(ws_sold_date_sk#384) AND isnotnull(ws_bill_customer_sk#388))
                                                               :                 :  +- *(9) ColumnarToRow
                                                               :                 :     +- FileScan parquet [ws_sold_date_sk#384,ws_bill_customer_sk#388] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#384), isnotnull(ws_bill_customer_sk#388)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int>
                                                               :                 +- BroadcastQueryStage 7
                                                               :                    +- ReusedExchange [d_date_sk#8625, d_date#8627], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#69419]
                                                               +- *(17) Sort [c_customer_sk#8653 ASC NULLS FIRST], false, 0
                                                                  +- AQEShuffleRead coalesced
                                                                     +- ShuffleQueryStage 9
                                                                        +- ReusedExchange [c_customer_sk#8653, c_first_name#8661, c_last_name#8662], Exchange hashpartitioning(c_customer_sk#562, 200), ENSURE_REQUIREMENTS, [id=#69440]
+- == Initial Plan ==
   HashAggregate(keys=[], functions=[count(1)], output=[count(1)#8672L])
   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#69271]
      +- HashAggregate(keys=[], functions=[partial_count(1)], output=[count#8675L])
         +- HashAggregate(keys=[c_last_name#571, c_first_name#570, d_date#600], functions=[], output=[])
            +- Exchange hashpartitioning(c_last_name#571, c_first_name#570, d_date#600, 200), ENSURE_REQUIREMENTS, [id=#69267]
               +- HashAggregate(keys=[c_last_name#571, c_first_name#570, d_date#600], functions=[], output=[c_last_name#571, c_first_name#570, d_date#600])
                  +- SortMergeJoin [coalesce(c_last_name#571, ), isnull(c_last_name#571), coalesce(c_first_name#570, ), isnull(c_first_name#570), coalesce(d_date#600, 1970-01-01), isnull(d_date#600)], [coalesce(c_last_name#8662, ), isnull(c_last_name#8662), coalesce(c_first_name#8661, ), isnull(c_first_name#8661), coalesce(d_date#8627, 1970-01-01), isnull(d_date#8627)], LeftSemi
                     :- Sort [coalesce(c_last_name#571, ) ASC NULLS FIRST, isnull(c_last_name#571) ASC NULLS FIRST, coalesce(c_first_name#570, ) ASC NULLS FIRST, isnull(c_first_name#570) ASC NULLS FIRST, coalesce(d_date#600, 1970-01-01) ASC NULLS FIRST, isnull(d_date#600) ASC NULLS FIRST], false, 0
                     :  +- Exchange hashpartitioning(coalesce(c_last_name#571, ), isnull(c_last_name#571), coalesce(c_first_name#570, ), isnull(c_first_name#570), coalesce(d_date#600, 1970-01-01), isnull(d_date#600), 200), ENSURE_REQUIREMENTS, [id=#69260]
                     :     +- HashAggregate(keys=[c_last_name#571, c_first_name#570, d_date#600], functions=[], output=[c_last_name#571, c_first_name#570, d_date#600])
                     :        +- Exchange hashpartitioning(c_last_name#571, c_first_name#570, d_date#600, 200), ENSURE_REQUIREMENTS, [id=#69241]
                     :           +- HashAggregate(keys=[c_last_name#571, c_first_name#570, d_date#600], functions=[], output=[c_last_name#571, c_first_name#570, d_date#600])
                     :              +- SortMergeJoin [coalesce(c_last_name#571, ), isnull(c_last_name#571), coalesce(c_first_name#570, ), isnull(c_first_name#570), coalesce(d_date#600, 1970-01-01), isnull(d_date#600)], [coalesce(c_last_name#8616, ), isnull(c_last_name#8616), coalesce(c_first_name#8615, ), isnull(c_first_name#8615), coalesce(d_date#8581, 1970-01-01), isnull(d_date#8581)], LeftSemi
                     :                 :- Sort [coalesce(c_last_name#571, ) ASC NULLS FIRST, isnull(c_last_name#571) ASC NULLS FIRST, coalesce(c_first_name#570, ) ASC NULLS FIRST, isnull(c_first_name#570) ASC NULLS FIRST, coalesce(d_date#600, 1970-01-01) ASC NULLS FIRST, isnull(d_date#600) ASC NULLS FIRST], false, 0
                     :                 :  +- Exchange hashpartitioning(coalesce(c_last_name#571, ), isnull(c_last_name#571), coalesce(c_first_name#570, ), isnull(c_first_name#570), coalesce(d_date#600, 1970-01-01), isnull(d_date#600), 200), ENSURE_REQUIREMENTS, [id=#69234]
                     :                 :     +- HashAggregate(keys=[c_last_name#571, c_first_name#570, d_date#600], functions=[], output=[c_last_name#571, c_first_name#570, d_date#600])
                     :                 :        +- Exchange hashpartitioning(c_last_name#571, c_first_name#570, d_date#600, 200), ENSURE_REQUIREMENTS, [id=#69215]
                     :                 :           +- HashAggregate(keys=[c_last_name#571, c_first_name#570, d_date#600], functions=[], output=[c_last_name#571, c_first_name#570, d_date#600])
                     :                 :              +- Project [c_last_name#571, c_first_name#570, d_date#600]
                     :                 :                 +- SortMergeJoin [ss_customer_sk#667], [c_customer_sk#562], Inner
                     :                 :                    :- Sort [ss_customer_sk#667 ASC NULLS FIRST], false, 0
                     :                 :                    :  +- Exchange hashpartitioning(ss_customer_sk#667, 200), ENSURE_REQUIREMENTS, [id=#69207]
                     :                 :                    :     +- Project [ss_customer_sk#667, d_date#600]
                     :                 :                    :        +- BroadcastHashJoin [ss_sold_date_sk#664], [d_date_sk#598], Inner, BuildRight, false
                     :                 :                    :           :- Filter (isnotnull(ss_sold_date_sk#664) AND isnotnull(ss_customer_sk#667))
                     :                 :                    :           :  +- FileScan parquet [ss_sold_date_sk#664,ss_customer_sk#667] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#664), isnotnull(ss_customer_sk#667)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int>
                     :                 :                    :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#69202]
                     :                 :                    :              +- Project [d_date_sk#598, d_date#600]
                     :                 :                    :                 +- Filter (((isnotnull(d_month_seq#601) AND (d_month_seq#601 >= 1198)) AND (d_month_seq#601 <= 1209)) AND isnotnull(d_date_sk#598))
                     :                 :                    :                    +- FileScan parquet [d_date_sk#598,d_date#600,d_month_seq#601] Batched: true, DataFilters: [isnotnull(d_month_seq#601), (d_month_seq#601 >= 1198), (d_month_seq#601 <= 1209), isnotnull(d_da..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1198), LessThanOrEqual(d_month_seq,1209),..., ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>
                     :                 :                    +- Sort [c_customer_sk#562 ASC NULLS FIRST], false, 0
                     :                 :                       +- Exchange hashpartitioning(c_customer_sk#562, 200), ENSURE_REQUIREMENTS, [id=#69208]
                     :                 :                          +- Filter isnotnull(c_customer_sk#562)
                     :                 :                             +- FileScan parquet [c_customer_sk#562,c_first_name#570,c_last_name#571] Batched: true, DataFilters: [isnotnull(c_customer_sk#562)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>
                     :                 +- Sort [coalesce(c_last_name#8616, ) ASC NULLS FIRST, isnull(c_last_name#8616) ASC NULLS FIRST, coalesce(c_first_name#8615, ) ASC NULLS FIRST, isnull(c_first_name#8615) ASC NULLS FIRST, coalesce(d_date#8581, 1970-01-01) ASC NULLS FIRST, isnull(d_date#8581) ASC NULLS FIRST], false, 0
                     :                    +- Exchange hashpartitioning(coalesce(c_last_name#8616, ), isnull(c_last_name#8616), coalesce(c_first_name#8615, ), isnull(c_first_name#8615), coalesce(d_date#8581, 1970-01-01), isnull(d_date#8581), 200), ENSURE_REQUIREMENTS, [id=#69235]
                     :                       +- HashAggregate(keys=[c_last_name#8616, c_first_name#8615, d_date#8581], functions=[], output=[c_last_name#8616, c_first_name#8615, d_date#8581])
                     :                          +- Exchange hashpartitioning(c_last_name#8616, c_first_name#8615, d_date#8581, 200), ENSURE_REQUIREMENTS, [id=#69230]
                     :                             +- HashAggregate(keys=[c_last_name#8616, c_first_name#8615, d_date#8581], functions=[], output=[c_last_name#8616, c_first_name#8615, d_date#8581])
                     :                                +- Project [c_last_name#8616, c_first_name#8615, d_date#8581]
                     :                                   +- SortMergeJoin [cs_bill_customer_sk#121], [c_customer_sk#8607], Inner
                     :                                      :- Sort [cs_bill_customer_sk#121 ASC NULLS FIRST], false, 0
                     :                                      :  +- Exchange hashpartitioning(cs_bill_customer_sk#121, 200), ENSURE_REQUIREMENTS, [id=#69222]
                     :                                      :     +- Project [cs_bill_customer_sk#121, d_date#8581]
                     :                                      :        +- BroadcastHashJoin [cs_sold_date_sk#118], [d_date_sk#8579], Inner, BuildRight, false
                     :                                      :           :- Filter (isnotnull(cs_sold_date_sk#118) AND isnotnull(cs_bill_customer_sk#121))
                     :                                      :           :  +- FileScan parquet [cs_sold_date_sk#118,cs_bill_customer_sk#121] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#118), isnotnull(cs_bill_customer_sk#121)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_bill_customer_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int>
                     :                                      :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#69217]
                     :                                      :              +- Project [d_date_sk#8579, d_date#8581]
                     :                                      :                 +- Filter (((isnotnull(d_month_seq#8582) AND (d_month_seq#8582 >= 1198)) AND (d_month_seq#8582 <= 1209)) AND isnotnull(d_date_sk#8579))
                     :                                      :                    +- FileScan parquet [d_date_sk#8579,d_date#8581,d_month_seq#8582] Batched: true, DataFilters: [isnotnull(d_month_seq#8582), (d_month_seq#8582 >= 1198), (d_month_seq#8582 <= 1209), isnotnull(d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1198), LessThanOrEqual(d_month_seq,1209),..., ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>
                     :                                      +- Sort [c_customer_sk#8607 ASC NULLS FIRST], false, 0
                     :                                         +- Exchange hashpartitioning(c_customer_sk#8607, 200), ENSURE_REQUIREMENTS, [id=#69223]
                     :                                            +- Filter isnotnull(c_customer_sk#8607)
                     :                                               +- FileScan parquet [c_customer_sk#8607,c_first_name#8615,c_last_name#8616] Batched: true, DataFilters: [isnotnull(c_customer_sk#8607)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>
                     +- Sort [coalesce(c_last_name#8662, ) ASC NULLS FIRST, isnull(c_last_name#8662) ASC NULLS FIRST, coalesce(c_first_name#8661, ) ASC NULLS FIRST, isnull(c_first_name#8661) ASC NULLS FIRST, coalesce(d_date#8627, 1970-01-01) ASC NULLS FIRST, isnull(d_date#8627) ASC NULLS FIRST], false, 0
                        +- Exchange hashpartitioning(coalesce(c_last_name#8662, ), isnull(c_last_name#8662), coalesce(c_first_name#8661, ), isnull(c_first_name#8661), coalesce(d_date#8627, 1970-01-01), isnull(d_date#8627), 200), ENSURE_REQUIREMENTS, [id=#69261]
                           +- HashAggregate(keys=[c_last_name#8662, c_first_name#8661, d_date#8627], functions=[], output=[c_last_name#8662, c_first_name#8661, d_date#8627])
                              +- Exchange hashpartitioning(c_last_name#8662, c_first_name#8661, d_date#8627, 200), ENSURE_REQUIREMENTS, [id=#69256]
                                 +- HashAggregate(keys=[c_last_name#8662, c_first_name#8661, d_date#8627], functions=[], output=[c_last_name#8662, c_first_name#8661, d_date#8627])
                                    +- Project [c_last_name#8662, c_first_name#8661, d_date#8627]
                                       +- SortMergeJoin [ws_bill_customer_sk#388], [c_customer_sk#8653], Inner
                                          :- Sort [ws_bill_customer_sk#388 ASC NULLS FIRST], false, 0
                                          :  +- Exchange hashpartitioning(ws_bill_customer_sk#388, 200), ENSURE_REQUIREMENTS, [id=#69248]
                                          :     +- Project [ws_bill_customer_sk#388, d_date#8627]
                                          :        +- BroadcastHashJoin [ws_sold_date_sk#384], [d_date_sk#8625], Inner, BuildRight, false
                                          :           :- Filter (isnotnull(ws_sold_date_sk#384) AND isnotnull(ws_bill_customer_sk#388))
                                          :           :  +- FileScan parquet [ws_sold_date_sk#384,ws_bill_customer_sk#388] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#384), isnotnull(ws_bill_customer_sk#388)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int>
                                          :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#69243]
                                          :              +- Project [d_date_sk#8625, d_date#8627]
                                          :                 +- Filter (((isnotnull(d_month_seq#8628) AND (d_month_seq#8628 >= 1198)) AND (d_month_seq#8628 <= 1209)) AND isnotnull(d_date_sk#8625))
                                          :                    +- FileScan parquet [d_date_sk#8625,d_date#8627,d_month_seq#8628] Batched: true, DataFilters: [isnotnull(d_month_seq#8628), (d_month_seq#8628 >= 1198), (d_month_seq#8628 <= 1209), isnotnull(d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1198), LessThanOrEqual(d_month_seq,1209),..., ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>
                                          +- Sort [c_customer_sk#8653 ASC NULLS FIRST], false, 0
                                             +- Exchange hashpartitioning(c_customer_sk#8653, 200), ENSURE_REQUIREMENTS, [id=#69249]
                                                +- Filter isnotnull(c_customer_sk#8653)
                                                   +- FileScan parquet [c_customer_sk#8653,c_first_name#8661,c_last_name#8662] Batched: true, DataFilters: [isnotnull(c_customer_sk#8653)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>
