AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[s_store_name1#13328 ASC NULLS FIRST,s_store_id1#13330 ASC NULLS FIRST,d_week_seq1#13329 ASC NULLS FIRST], output=[s_store_name1#13328,s_store_id1#13330,d_week_seq1#13329,(sun_sales1 / sun_sales2)#13447,(mon_sales1 / mon_sales2)#13448,(tue_sales1 / tue_sales2)#13449,(wed_sales1 / wed_sales2)#13450,(thu_sales1 / thu_sales2)#13451,(fri_sales1 / fri_sales2)#13452,(sat_sales1 / sat_sales2)#13453])
   +- *(11) Project [s_store_name1#13328, s_store_id1#13330, d_week_seq1#13329, CheckOverflow((promote_precision(sun_sales1#13331) / promote_precision(sun_sales2#13341)), DecimalType(37,20), true) AS (sun_sales1 / sun_sales2)#13447, CheckOverflow((promote_precision(mon_sales1#13332) / promote_precision(mon_sales2#13342)), DecimalType(37,20), true) AS (mon_sales1 / mon_sales2)#13448, CheckOverflow((promote_precision(tue_sales1#13333) / promote_precision(tue_sales2#13343)), DecimalType(37,20), true) AS (tue_sales1 / tue_sales2)#13449, CheckOverflow((promote_precision(wed_sales1#13334) / promote_precision(wed_sales2#13344)), DecimalType(37,20), true) AS (wed_sales1 / wed_sales2)#13450, CheckOverflow((promote_precision(thu_sales1#13335) / promote_precision(thu_sales2#13345)), DecimalType(37,20), true) AS (thu_sales1 / thu_sales2)#13451, CheckOverflow((promote_precision(fri_sales1#13336) / promote_precision(fri_sales2#13346)), DecimalType(37,20), true) AS (fri_sales1 / fri_sales2)#13452, CheckOverflow((promote_precision(sat_sales1#13337) / promote_precision(sat_sales2#13347)), DecimalType(37,20), true) AS (sat_sales1 / sat_sales2)#13453]
      +- *(11) BroadcastHashJoin [s_store_id1#13330, d_week_seq1#13329], [s_store_id2#13340, (d_week_seq2#13339 - 52)], Inner, BuildLeft, false
         :- BroadcastQueryStage 12
         :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[2, string, true], input[1, int, true]),false), [id=#117189]
         :     +- AQEShuffleRead local
         :        +- ShuffleQueryStage 10
         :           +- Exchange hashpartitioning(s_store_id1#13330, d_week_seq1#13329, 200), ENSURE_REQUIREMENTS, [id=#117100]
         :              +- *(9) Project [s_store_name#331 AS s_store_name1#13328, d_week_seq#602 AS d_week_seq1#13329, s_store_id#327 AS s_store_id1#13330, sun_sales#13348 AS sun_sales1#13331, mon_sales#13349 AS mon_sales1#13332, tue_sales#13350 AS tue_sales1#13333, wed_sales#13351 AS wed_sales1#13334, thu_sales#13352 AS thu_sales1#13335, fri_sales#13353 AS fri_sales1#13336, sat_sales#13354 AS sat_sales1#13337]
         :                 +- *(9) BroadcastHashJoin [d_week_seq#602], [d_week_seq#13359], Inner, BuildRight, false
         :                    :- *(9) Project [d_week_seq#602, sun_sales#13348, mon_sales#13349, tue_sales#13350, wed_sales#13351, thu_sales#13352, fri_sales#13353, sat_sales#13354, s_store_id#327, s_store_name#331]
         :                    :  +- *(9) BroadcastHashJoin [ss_store_sk#671], [s_store_sk#326], Inner, BuildRight, false
         :                    :     :- *(9) HashAggregate(keys=[d_week_seq#602, ss_store_sk#671], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#612 = Sunday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Monday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Tuesday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Wednesday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Thursday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Friday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Saturday) THEN ss_sales_price#677 END))], output=[d_week_seq#602, ss_store_sk#671, sun_sales#13348, mon_sales#13349, tue_sales#13350, wed_sales#13351, thu_sales#13352, fri_sales#13353, sat_sales#13354])
         :                    :     :  +- AQEShuffleRead coalesced
         :                    :     :     +- ShuffleQueryStage 7
         :                    :     :        +- Exchange hashpartitioning(d_week_seq#602, ss_store_sk#671, 200), ENSURE_REQUIREMENTS, [id=#116956]
         :                    :     :           +- *(7) HashAggregate(keys=[d_week_seq#602, ss_store_sk#671], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#612 = Sunday) THEN ss_sales_price#677 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#612 = Monday) THEN ss_sales_price#677 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#612 = Tuesday) THEN ss_sales_price#677 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#612 = Wednesday) THEN ss_sales_price#677 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#612 = Thursday) THEN ss_sales_price#677 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#612 = Friday) THEN ss_sales_price#677 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#612 = Saturday) THEN ss_sales_price#677 END))], output=[d_week_seq#602, ss_store_sk#671, sum#13471L, sum#13472L, sum#13473L, sum#13474L, sum#13475L, sum#13476L, sum#13477L])
         :                    :     :              +- *(7) Project [ss_store_sk#671, ss_sales_price#677, d_week_seq#602, d_day_name#612]
         :                    :     :                 +- *(7) BroadcastHashJoin [ss_sold_date_sk#664], [d_date_sk#598], Inner, BuildRight, false
         :                    :     :                    :- *(7) Filter (isnotnull(ss_sold_date_sk#664) AND isnotnull(ss_store_sk#671))
         :                    :     :                    :  +- *(7) ColumnarToRow
         :                    :     :                    :     +- FileScan parquet [ss_sold_date_sk#664,ss_store_sk#671,ss_sales_price#677] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#664), isnotnull(ss_store_sk#671)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>
         :                    :     :                    +- BroadcastQueryStage 0
         :                    :     :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#116402]
         :                    :     :                          +- *(1) Filter (isnotnull(d_date_sk#598) AND isnotnull(d_week_seq#602))
         :                    :     :                             +- *(1) ColumnarToRow
         :                    :     :                                +- FileScan parquet [d_date_sk#598,d_week_seq#602,d_day_name#612] Batched: true, DataFilters: [isnotnull(d_date_sk#598), isnotnull(d_week_seq#602)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)], ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>
         :                    :     +- BroadcastQueryStage 1
         :                    :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#116422]
         :                    :           +- *(2) Filter (isnotnull(s_store_sk#326) AND isnotnull(s_store_id#327))
         :                    :              +- *(2) ColumnarToRow
         :                    :                 +- FileScan parquet [s_store_sk#326,s_store_id#327,s_store_name#331] Batched: true, DataFilters: [isnotnull(s_store_sk#326), isnotnull(s_store_id#327)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_id)], ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>
         :                    +- BroadcastQueryStage 2
         :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#116441]
         :                          +- *(3) Project [d_week_seq#13359]
         :                             +- *(3) Filter (((isnotnull(d_month_seq#13358) AND (d_month_seq#13358 >= 1183)) AND (d_month_seq#13358 <= 1194)) AND isnotnull(d_week_seq#13359))
         :                                +- *(3) ColumnarToRow
         :                                   +- FileScan parquet [d_month_seq#13358,d_week_seq#13359] Batched: true, DataFilters: [isnotnull(d_month_seq#13358), (d_month_seq#13358 >= 1183), (d_month_seq#13358 <= 1194), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1183), LessThanOrEqual(d_month_seq,1194),..., ReadSchema: struct<d_month_seq:int,d_week_seq:int>
         +- AQEShuffleRead local
            +- ShuffleQueryStage 11
               +- Exchange hashpartitioning(s_store_id2#13340, (d_week_seq2#13339 - 52), 200), ENSURE_REQUIREMENTS, [id=#117148]
                  +- *(10) Project [d_week_seq#602 AS d_week_seq2#13339, s_store_id#13384 AS s_store_id2#13340, sun_sales#13348 AS sun_sales2#13341, mon_sales#13349 AS mon_sales2#13342, tue_sales#13350 AS tue_sales2#13343, wed_sales#13351 AS wed_sales2#13344, thu_sales#13352 AS thu_sales2#13345, fri_sales#13353 AS fri_sales2#13346, sat_sales#13354 AS sat_sales2#13347]
                     +- *(10) BroadcastHashJoin [d_week_seq#602], [d_week_seq#13416], Inner, BuildRight, false
                        :- *(10) Project [d_week_seq#602, sun_sales#13348, mon_sales#13349, tue_sales#13350, wed_sales#13351, thu_sales#13352, fri_sales#13353, sat_sales#13354, s_store_id#13384]
                        :  +- *(10) BroadcastHashJoin [ss_store_sk#671], [s_store_sk#13383], Inner, BuildRight, false
                        :     :- *(10) HashAggregate(keys=[d_week_seq#602, ss_store_sk#671], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#612 = Sunday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Monday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Tuesday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Wednesday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Thursday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Friday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Saturday) THEN ss_sales_price#677 END))], output=[d_week_seq#602, ss_store_sk#671, sun_sales#13348, mon_sales#13349, tue_sales#13350, wed_sales#13351, thu_sales#13352, fri_sales#13353, sat_sales#13354])
                        :     :  +- AQEShuffleRead coalesced
                        :     :     +- ShuffleQueryStage 9
                        :     :        +- ReusedExchange [d_week_seq#602, ss_store_sk#671, sum#13485L, sum#13486L, sum#13487L, sum#13488L, sum#13489L, sum#13490L, sum#13491L], Exchange hashpartitioning(d_week_seq#602, ss_store_sk#671, 200), ENSURE_REQUIREMENTS, [id=#116956]
                        :     +- BroadcastQueryStage 5
                        :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#116521]
                        :           +- *(5) Filter (isnotnull(s_store_sk#13383) AND isnotnull(s_store_id#13384))
                        :              +- *(5) ColumnarToRow
                        :                 +- FileScan parquet [s_store_sk#13383,s_store_id#13384] Batched: true, DataFilters: [isnotnull(s_store_sk#13383), isnotnull(s_store_id#13384)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_id)], ReadSchema: struct<s_store_sk:int,s_store_id:string>
                        +- BroadcastQueryStage 6
                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#116540]
                              +- *(6) Project [d_week_seq#13416]
                                 +- *(6) Filter (((isnotnull(d_month_seq#13415) AND (d_month_seq#13415 >= 1195)) AND (d_month_seq#13415 <= 1206)) AND isnotnull(d_week_seq#13416))
                                    +- *(6) ColumnarToRow
                                       +- FileScan parquet [d_month_seq#13415,d_week_seq#13416] Batched: true, DataFilters: [isnotnull(d_month_seq#13415), (d_month_seq#13415 >= 1195), (d_month_seq#13415 <= 1206), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1195), LessThanOrEqual(d_month_seq,1206),..., ReadSchema: struct<d_month_seq:int,d_week_seq:int>
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[s_store_name1#13328 ASC NULLS FIRST,s_store_id1#13330 ASC NULLS FIRST,d_week_seq1#13329 ASC NULLS FIRST], output=[s_store_name1#13328,s_store_id1#13330,d_week_seq1#13329,(sun_sales1 / sun_sales2)#13447,(mon_sales1 / mon_sales2)#13448,(tue_sales1 / tue_sales2)#13449,(wed_sales1 / wed_sales2)#13450,(thu_sales1 / thu_sales2)#13451,(fri_sales1 / fri_sales2)#13452,(sat_sales1 / sat_sales2)#13453])
   +- Project [s_store_name1#13328, s_store_id1#13330, d_week_seq1#13329, CheckOverflow((promote_precision(sun_sales1#13331) / promote_precision(sun_sales2#13341)), DecimalType(37,20), true) AS (sun_sales1 / sun_sales2)#13447, CheckOverflow((promote_precision(mon_sales1#13332) / promote_precision(mon_sales2#13342)), DecimalType(37,20), true) AS (mon_sales1 / mon_sales2)#13448, CheckOverflow((promote_precision(tue_sales1#13333) / promote_precision(tue_sales2#13343)), DecimalType(37,20), true) AS (tue_sales1 / tue_sales2)#13449, CheckOverflow((promote_precision(wed_sales1#13334) / promote_precision(wed_sales2#13344)), DecimalType(37,20), true) AS (wed_sales1 / wed_sales2)#13450, CheckOverflow((promote_precision(thu_sales1#13335) / promote_precision(thu_sales2#13345)), DecimalType(37,20), true) AS (thu_sales1 / thu_sales2)#13451, CheckOverflow((promote_precision(fri_sales1#13336) / promote_precision(fri_sales2#13346)), DecimalType(37,20), true) AS (fri_sales1 / fri_sales2)#13452, CheckOverflow((promote_precision(sat_sales1#13337) / promote_precision(sat_sales2#13347)), DecimalType(37,20), true) AS (sat_sales1 / sat_sales2)#13453]
      +- SortMergeJoin [s_store_id1#13330, d_week_seq1#13329], [s_store_id2#13340, (d_week_seq2#13339 - 52)], Inner
         :- Sort [s_store_id1#13330 ASC NULLS FIRST, d_week_seq1#13329 ASC NULLS FIRST], false, 0
         :  +- Exchange hashpartitioning(s_store_id1#13330, d_week_seq1#13329, 200), ENSURE_REQUIREMENTS, [id=#116351]
         :     +- Project [s_store_name#331 AS s_store_name1#13328, d_week_seq#602 AS d_week_seq1#13329, s_store_id#327 AS s_store_id1#13330, sun_sales#13348 AS sun_sales1#13331, mon_sales#13349 AS mon_sales1#13332, tue_sales#13350 AS tue_sales1#13333, wed_sales#13351 AS wed_sales1#13334, thu_sales#13352 AS thu_sales1#13335, fri_sales#13353 AS fri_sales1#13336, sat_sales#13354 AS sat_sales1#13337]
         :        +- BroadcastHashJoin [d_week_seq#602], [d_week_seq#13359], Inner, BuildRight, false
         :           :- Project [d_week_seq#602, sun_sales#13348, mon_sales#13349, tue_sales#13350, wed_sales#13351, thu_sales#13352, fri_sales#13353, sat_sales#13354, s_store_id#327, s_store_name#331]
         :           :  +- BroadcastHashJoin [ss_store_sk#671], [s_store_sk#326], Inner, BuildRight, false
         :           :     :- HashAggregate(keys=[d_week_seq#602, ss_store_sk#671], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#612 = Sunday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Monday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Tuesday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Wednesday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Thursday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Friday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Saturday) THEN ss_sales_price#677 END))], output=[d_week_seq#602, ss_store_sk#671, sun_sales#13348, mon_sales#13349, tue_sales#13350, wed_sales#13351, thu_sales#13352, fri_sales#13353, sat_sales#13354])
         :           :     :  +- Exchange hashpartitioning(d_week_seq#602, ss_store_sk#671, 200), ENSURE_REQUIREMENTS, [id=#116324]
         :           :     :     +- HashAggregate(keys=[d_week_seq#602, ss_store_sk#671], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#612 = Sunday) THEN ss_sales_price#677 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#612 = Monday) THEN ss_sales_price#677 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#612 = Tuesday) THEN ss_sales_price#677 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#612 = Wednesday) THEN ss_sales_price#677 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#612 = Thursday) THEN ss_sales_price#677 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#612 = Friday) THEN ss_sales_price#677 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#612 = Saturday) THEN ss_sales_price#677 END))], output=[d_week_seq#602, ss_store_sk#671, sum#13471L, sum#13472L, sum#13473L, sum#13474L, sum#13475L, sum#13476L, sum#13477L])
         :           :     :        +- Project [ss_store_sk#671, ss_sales_price#677, d_week_seq#602, d_day_name#612]
         :           :     :           +- BroadcastHashJoin [ss_sold_date_sk#664], [d_date_sk#598], Inner, BuildRight, false
         :           :     :              :- Filter (isnotnull(ss_sold_date_sk#664) AND isnotnull(ss_store_sk#671))
         :           :     :              :  +- FileScan parquet [ss_sold_date_sk#664,ss_store_sk#671,ss_sales_price#677] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#664), isnotnull(ss_store_sk#671)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>
         :           :     :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#116319]
         :           :     :                 +- Filter (isnotnull(d_date_sk#598) AND isnotnull(d_week_seq#602))
         :           :     :                    +- FileScan parquet [d_date_sk#598,d_week_seq#602,d_day_name#612] Batched: true, DataFilters: [isnotnull(d_date_sk#598), isnotnull(d_week_seq#602)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)], ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>
         :           :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#116327]
         :           :        +- Filter (isnotnull(s_store_sk#326) AND isnotnull(s_store_id#327))
         :           :           +- FileScan parquet [s_store_sk#326,s_store_id#327,s_store_name#331] Batched: true, DataFilters: [isnotnull(s_store_sk#326), isnotnull(s_store_id#327)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_id)], ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>
         :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#116331]
         :              +- Project [d_week_seq#13359]
         :                 +- Filter (((isnotnull(d_month_seq#13358) AND (d_month_seq#13358 >= 1183)) AND (d_month_seq#13358 <= 1194)) AND isnotnull(d_week_seq#13359))
         :                    +- FileScan parquet [d_month_seq#13358,d_week_seq#13359] Batched: true, DataFilters: [isnotnull(d_month_seq#13358), (d_month_seq#13358 >= 1183), (d_month_seq#13358 <= 1194), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1183), LessThanOrEqual(d_month_seq,1194),..., ReadSchema: struct<d_month_seq:int,d_week_seq:int>
         +- Sort [s_store_id2#13340 ASC NULLS FIRST, (d_week_seq2#13339 - 52) ASC NULLS FIRST], false, 0
            +- Exchange hashpartitioning(s_store_id2#13340, (d_week_seq2#13339 - 52), 200), ENSURE_REQUIREMENTS, [id=#116352]
               +- Project [d_week_seq#602 AS d_week_seq2#13339, s_store_id#13384 AS s_store_id2#13340, sun_sales#13348 AS sun_sales2#13341, mon_sales#13349 AS mon_sales2#13342, tue_sales#13350 AS tue_sales2#13343, wed_sales#13351 AS wed_sales2#13344, thu_sales#13352 AS thu_sales2#13345, fri_sales#13353 AS fri_sales2#13346, sat_sales#13354 AS sat_sales2#13347]
                  +- BroadcastHashJoin [d_week_seq#602], [d_week_seq#13416], Inner, BuildRight, false
                     :- Project [d_week_seq#602, sun_sales#13348, mon_sales#13349, tue_sales#13350, wed_sales#13351, thu_sales#13352, fri_sales#13353, sat_sales#13354, s_store_id#13384]
                     :  +- BroadcastHashJoin [ss_store_sk#671], [s_store_sk#13383], Inner, BuildRight, false
                     :     :- HashAggregate(keys=[d_week_seq#602, ss_store_sk#671], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#612 = Sunday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Monday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Tuesday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Wednesday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Thursday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Friday) THEN ss_sales_price#677 END)), sum(UnscaledValue(CASE WHEN (d_day_name#612 = Saturday) THEN ss_sales_price#677 END))], output=[d_week_seq#602, ss_store_sk#671, sun_sales#13348, mon_sales#13349, tue_sales#13350, wed_sales#13351, thu_sales#13352, fri_sales#13353, sat_sales#13354])
                     :     :  +- Exchange hashpartitioning(d_week_seq#602, ss_store_sk#671, 200), ENSURE_REQUIREMENTS, [id=#116339]
                     :     :     +- HashAggregate(keys=[d_week_seq#602, ss_store_sk#671], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#612 = Sunday) THEN ss_sales_price#677 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#612 = Monday) THEN ss_sales_price#677 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#612 = Tuesday) THEN ss_sales_price#677 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#612 = Wednesday) THEN ss_sales_price#677 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#612 = Thursday) THEN ss_sales_price#677 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#612 = Friday) THEN ss_sales_price#677 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#612 = Saturday) THEN ss_sales_price#677 END))], output=[d_week_seq#602, ss_store_sk#671, sum#13485L, sum#13486L, sum#13487L, sum#13488L, sum#13489L, sum#13490L, sum#13491L])
                     :     :        +- Project [ss_store_sk#671, ss_sales_price#677, d_week_seq#602, d_day_name#612]
                     :     :           +- BroadcastHashJoin [ss_sold_date_sk#664], [d_date_sk#598], Inner, BuildRight, false
                     :     :              :- Filter (isnotnull(ss_sold_date_sk#664) AND isnotnull(ss_store_sk#671))
                     :     :              :  +- FileScan parquet [ss_sold_date_sk#664,ss_store_sk#671,ss_sales_price#677] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#664), isnotnull(ss_store_sk#671)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>
                     :     :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#116334]
                     :     :                 +- Filter (isnotnull(d_date_sk#598) AND isnotnull(d_week_seq#602))
                     :     :                    +- FileScan parquet [d_date_sk#598,d_week_seq#602,d_day_name#612] Batched: true, DataFilters: [isnotnull(d_date_sk#598), isnotnull(d_week_seq#602)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)], ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>
                     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#116342]
                     :        +- Filter (isnotnull(s_store_sk#13383) AND isnotnull(s_store_id#13384))
                     :           +- FileScan parquet [s_store_sk#13383,s_store_id#13384] Batched: true, DataFilters: [isnotnull(s_store_sk#13383), isnotnull(s_store_id#13384)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_id)], ReadSchema: struct<s_store_sk:int,s_store_id:string>
                     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#116346]
                        +- Project [d_week_seq#13416]
                           +- Filter (((isnotnull(d_month_seq#13415) AND (d_month_seq#13415 >= 1195)) AND (d_month_seq#13415 <= 1206)) AND isnotnull(d_week_seq#13416))
                              +- FileScan parquet [d_month_seq#13415,d_week_seq#13416] Batched: true, DataFilters: [isnotnull(d_month_seq#13415), (d_month_seq#13415 >= 1195), (d_month_seq#13415 <= 1206), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1195), LessThanOrEqual(d_month_seq,1206),..., ReadSchema: struct<d_month_seq:int,d_week_seq:int>
