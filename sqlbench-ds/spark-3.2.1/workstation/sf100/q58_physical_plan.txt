AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[item_id#13008 ASC NULLS FIRST,ss_item_rev#13009 ASC NULLS FIRST], output=[item_id#13008,ss_item_rev#13009,ss_dev#13004,cs_item_rev#13013,cs_dev#13005,ws_item_rev#13017,ws_dev#13006,average#13007])
   +- *(16) Project [item_id#13008, ss_item_rev#13009, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ss_item_rev#13009 as decimal(23,6))) / promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#13009 as decimal(18,2))) + promote_precision(cast(cs_item_rev#13013 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#13017 as decimal(19,2)))), DecimalType(19,2), true)) / 3.00), DecimalType(23,6), true))), DecimalType(38,17), true)) * 100.00000000000000000), DecimalType(38,13), true) AS ss_dev#13004, cs_item_rev#13013, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(cs_item_rev#13013 as decimal(23,6))) / promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#13009 as decimal(18,2))) + promote_precision(cast(cs_item_rev#13013 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#13017 as decimal(19,2)))), DecimalType(19,2), true)) / 3.00), DecimalType(23,6), true))), DecimalType(38,17), true)) * 100.00000000000000000), DecimalType(38,13), true) AS cs_dev#13005, ws_item_rev#13017, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ws_item_rev#13017 as decimal(23,6))) / promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#13009 as decimal(18,2))) + promote_precision(cast(cs_item_rev#13013 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#13017 as decimal(19,2)))), DecimalType(19,2), true)) / 3.00), DecimalType(23,6), true))), DecimalType(38,17), true)) * 100.00000000000000000), DecimalType(38,13), true) AS ws_dev#13006, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#13009 as decimal(18,2))) + promote_precision(cast(cs_item_rev#13013 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#13017 as decimal(19,2)))), DecimalType(19,2), true)) / 3.00), DecimalType(23,6), true) AS average#13007]
      +- *(16) BroadcastHashJoin [item_id#13008], [item_id#13016], Inner, BuildRight, ((((((((cast(ss_item_rev#13009 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#13017)), DecimalType(19,3), true)) AND (cast(ss_item_rev#13009 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#13017)), DecimalType(20,3), true))) AND (cast(cs_item_rev#13013 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#13017)), DecimalType(19,3), true))) AND (cast(cs_item_rev#13013 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#13017)), DecimalType(20,3), true))) AND (cast(ws_item_rev#13017 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#13009)), DecimalType(19,3), true))) AND (cast(ws_item_rev#13017 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#13009)), DecimalType(20,3), true))) AND (cast(ws_item_rev#13017 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#13013)), DecimalType(19,3), true))) AND (cast(ws_item_rev#13017 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#13013)), DecimalType(20,3), true))), false
         :- *(16) Project [item_id#13008, ss_item_rev#13009, cs_item_rev#13013]
         :  +- *(16) SortMergeJoin [item_id#13008], [item_id#13012], Inner, ((((cast(ss_item_rev#13009 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#13013)), DecimalType(19,3), true)) AND (cast(ss_item_rev#13009 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#13013)), DecimalType(20,3), true))) AND (cast(cs_item_rev#13013 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#13009)), DecimalType(19,3), true))) AND (cast(cs_item_rev#13013 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#13009)), DecimalType(20,3), true)))
         :     :- *(14) Sort [item_id#13008 ASC NULLS FIRST], false, 0
         :     :  +- *(14) Filter isnotnull(ss_item_rev#13009)
         :     :     +- *(14) HashAggregate(keys=[i_item_id#501], functions=[sum(UnscaledValue(ss_ext_sales_price#679))], output=[item_id#13008, ss_item_rev#13009])
         :     :        +- AQEShuffleRead coalesced
         :     :           +- ShuffleQueryStage 15
         :     :              +- Exchange hashpartitioning(i_item_id#501, 200), ENSURE_REQUIREMENTS, [id=#115841]
         :     :                 +- *(10) HashAggregate(keys=[i_item_id#501], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#679))], output=[i_item_id#501, sum#13300L])
         :     :                    +- *(10) Project [ss_ext_sales_price#679, i_item_id#501]
         :     :                       +- *(10) BroadcastHashJoin [ss_sold_date_sk#664], [d_date_sk#598], Inner, BuildRight, false
         :     :                          :- *(10) Project [ss_sold_date_sk#664, ss_ext_sales_price#679, i_item_id#501]
         :     :                          :  +- *(10) BroadcastHashJoin [ss_item_sk#666], [i_item_sk#500], Inner, BuildRight, false
         :     :                          :     :- *(10) Filter (isnotnull(ss_item_sk#666) AND isnotnull(ss_sold_date_sk#664))
         :     :                          :     :  +- *(10) ColumnarToRow
         :     :                          :     :     +- FileScan parquet [ss_sold_date_sk#664,ss_item_sk#666,ss_ext_sales_price#679] Batched: true, DataFilters: [isnotnull(ss_item_sk#666), isnotnull(ss_sold_date_sk#664)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>
         :     :                          :     +- BroadcastQueryStage 0
         :     :                          :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#114909]
         :     :                          :           +- *(1) Filter (isnotnull(i_item_sk#500) AND isnotnull(i_item_id#501))
         :     :                          :              +- *(1) ColumnarToRow
         :     :                          :                 +- FileScan parquet [i_item_sk#500,i_item_id#501] Batched: true, DataFilters: [isnotnull(i_item_sk#500), isnotnull(i_item_id#501)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)], ReadSchema: struct<i_item_sk:int,i_item_id:string>
         :     :                          +- BroadcastQueryStage 10
         :     :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#115377]
         :     :                                +- *(7) Project [d_date_sk#598]
         :     :                                   +- *(7) BroadcastHashJoin [d_date#600], [d_date#13206], LeftSemi, BuildRight, false
         :     :                                      :- *(7) Filter isnotnull(d_date_sk#598)
         :     :                                      :  +- *(7) ColumnarToRow
         :     :                                      :     +- FileScan parquet [d_date_sk#598,d_date#600] Batched: true, DataFilters: [isnotnull(d_date_sk#598)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date>
         :     :                                      +- BroadcastQueryStage 1
         :     :                                         +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#114928]
         :     :                                            +- *(2) Project [d_date#13206]
         :     :                                               +- *(2) Filter (isnotnull(d_week_seq#13208) AND (d_week_seq#13208 = Subquery subquery#13010, [id=#114728]))
         :     :                                                  :  +- Subquery subquery#13010, [id=#114728]
         :     :                                                  :     +- AdaptiveSparkPlan isFinalPlan=true
                                                                        +- == Final Plan ==
                                                                           *(1) Project [d_week_seq#13124]
                                                                           +- *(1) Filter (isnotnull(d_date#13122) AND (d_date#13122 = 2000-07-21))
                                                                              +- *(1) ColumnarToRow
                                                                                 +- FileScan parquet [d_date#13122,d_week_seq#13124] Batched: true, DataFilters: [isnotnull(d_date#13122), (d_date#13122 = 2000-07-21)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-07-21)], ReadSchema: struct<d_date:date,d_week_seq:int>
                                                                        +- == Initial Plan ==
                                                                           Project [d_week_seq#13124]
                                                                           +- Filter (isnotnull(d_date#13122) AND (d_date#13122 = 2000-07-21))
                                                                              +- FileScan parquet [d_date#13122,d_week_seq#13124] Batched: true, DataFilters: [isnotnull(d_date#13122), (d_date#13122 = 2000-07-21)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-07-21)], ReadSchema: struct<d_date:date,d_week_seq:int>
         :     :                                                  +- *(2) ColumnarToRow
         :     :                                                     +- FileScan parquet [d_date#13206,d_week_seq#13208] Batched: true, DataFilters: [isnotnull(d_week_seq#13208)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_week_seq)], ReadSchema: struct<d_date:date,d_week_seq:int>
         :     +- *(15) Sort [item_id#13012 ASC NULLS FIRST], false, 0
         :        +- *(15) Filter isnotnull(cs_item_rev#13013)
         :           +- *(15) HashAggregate(keys=[i_item_id#13021], functions=[sum(UnscaledValue(cs_ext_sales_price#141))], output=[item_id#13012, cs_item_rev#13013])
         :              +- AQEShuffleRead coalesced
         :                 +- ShuffleQueryStage 16
         :                    +- Exchange hashpartitioning(i_item_id#13021, 200), ENSURE_REQUIREMENTS, [id=#115884]
         :                       +- *(11) HashAggregate(keys=[i_item_id#13021], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#141))], output=[i_item_id#13021, sum#13302L])
         :                          +- *(11) Project [cs_ext_sales_price#141, i_item_id#13021]
         :                             +- *(11) BroadcastHashJoin [cs_sold_date_sk#118], [d_date_sk#13042], Inner, BuildRight, false
         :                                :- *(11) Project [cs_sold_date_sk#118, cs_ext_sales_price#141, i_item_id#13021]
         :                                :  +- *(11) BroadcastHashJoin [cs_item_sk#133], [i_item_sk#13020], Inner, BuildRight, false
         :                                :     :- *(11) Filter (isnotnull(cs_item_sk#133) AND isnotnull(cs_sold_date_sk#118))
         :                                :     :  +- *(11) ColumnarToRow
         :                                :     :     +- FileScan parquet [cs_sold_date_sk#118,cs_item_sk#133,cs_ext_sales_price#141] Batched: true, DataFilters: [isnotnull(cs_item_sk#133), isnotnull(cs_sold_date_sk#118)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>
         :                                :     +- BroadcastQueryStage 3
         :                                :        +- ReusedExchange [i_item_sk#13020, i_item_id#13021], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#114909]
         :                                +- BroadcastQueryStage 12
         :                                   +- ReusedExchange [d_date_sk#13042], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#115377]
         +- BroadcastQueryStage 18
            +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#116085]
               +- *(13) Filter isnotnull(ws_item_rev#13017)
                  +- *(13) HashAggregate(keys=[i_item_id#13071], functions=[sum(UnscaledValue(ws_ext_sales_price#407))], output=[item_id#13016, ws_item_rev#13017])
                     +- AQEShuffleRead coalesced
                        +- ShuffleQueryStage 17
                           +- Exchange hashpartitioning(i_item_id#13071, 200), ENSURE_REQUIREMENTS, [id=#115929]
                              +- *(12) HashAggregate(keys=[i_item_id#13071], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#407))], output=[i_item_id#13071, sum#13304L])
                                 +- *(12) Project [ws_ext_sales_price#407, i_item_id#13071]
                                    +- *(12) BroadcastHashJoin [ws_sold_date_sk#384], [d_date_sk#13092], Inner, BuildRight, false
                                       :- *(12) Project [ws_sold_date_sk#384, ws_ext_sales_price#407, i_item_id#13071]
                                       :  +- *(12) BroadcastHashJoin [ws_item_sk#387], [i_item_sk#13070], Inner, BuildRight, false
                                       :     :- *(12) Filter (isnotnull(ws_item_sk#387) AND isnotnull(ws_sold_date_sk#384))
                                       :     :  +- *(12) ColumnarToRow
                                       :     :     +- FileScan parquet [ws_sold_date_sk#384,ws_item_sk#387,ws_ext_sales_price#407] Batched: true, DataFilters: [isnotnull(ws_item_sk#387), isnotnull(ws_sold_date_sk#384)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>
                                       :     +- BroadcastQueryStage 7
                                       :        +- ReusedExchange [i_item_sk#13070, i_item_id#13071], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#114909]
                                       +- BroadcastQueryStage 14
                                          +- ReusedExchange [d_date_sk#13092], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#115377]
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[item_id#13008 ASC NULLS FIRST,ss_item_rev#13009 ASC NULLS FIRST], output=[item_id#13008,ss_item_rev#13009,ss_dev#13004,cs_item_rev#13013,cs_dev#13005,ws_item_rev#13017,ws_dev#13006,average#13007])
   +- Project [item_id#13008, ss_item_rev#13009, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ss_item_rev#13009 as decimal(23,6))) / promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#13009 as decimal(18,2))) + promote_precision(cast(cs_item_rev#13013 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#13017 as decimal(19,2)))), DecimalType(19,2), true)) / 3.00), DecimalType(23,6), true))), DecimalType(38,17), true)) * 100.00000000000000000), DecimalType(38,13), true) AS ss_dev#13004, cs_item_rev#13013, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(cs_item_rev#13013 as decimal(23,6))) / promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#13009 as decimal(18,2))) + promote_precision(cast(cs_item_rev#13013 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#13017 as decimal(19,2)))), DecimalType(19,2), true)) / 3.00), DecimalType(23,6), true))), DecimalType(38,17), true)) * 100.00000000000000000), DecimalType(38,13), true) AS cs_dev#13005, ws_item_rev#13017, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ws_item_rev#13017 as decimal(23,6))) / promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#13009 as decimal(18,2))) + promote_precision(cast(cs_item_rev#13013 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#13017 as decimal(19,2)))), DecimalType(19,2), true)) / 3.00), DecimalType(23,6), true))), DecimalType(38,17), true)) * 100.00000000000000000), DecimalType(38,13), true) AS ws_dev#13006, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#13009 as decimal(18,2))) + promote_precision(cast(cs_item_rev#13013 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#13017 as decimal(19,2)))), DecimalType(19,2), true)) / 3.00), DecimalType(23,6), true) AS average#13007]
      +- SortMergeJoin [item_id#13008], [item_id#13016], Inner, ((((((((cast(ss_item_rev#13009 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#13017)), DecimalType(19,3), true)) AND (cast(ss_item_rev#13009 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#13017)), DecimalType(20,3), true))) AND (cast(cs_item_rev#13013 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#13017)), DecimalType(19,3), true))) AND (cast(cs_item_rev#13013 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#13017)), DecimalType(20,3), true))) AND (cast(ws_item_rev#13017 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#13009)), DecimalType(19,3), true))) AND (cast(ws_item_rev#13017 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#13009)), DecimalType(20,3), true))) AND (cast(ws_item_rev#13017 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#13013)), DecimalType(19,3), true))) AND (cast(ws_item_rev#13017 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#13013)), DecimalType(20,3), true)))
         :- Project [item_id#13008, ss_item_rev#13009, cs_item_rev#13013]
         :  +- SortMergeJoin [item_id#13008], [item_id#13012], Inner, ((((cast(ss_item_rev#13009 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#13013)), DecimalType(19,3), true)) AND (cast(ss_item_rev#13009 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#13013)), DecimalType(20,3), true))) AND (cast(cs_item_rev#13013 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#13009)), DecimalType(19,3), true))) AND (cast(cs_item_rev#13013 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#13009)), DecimalType(20,3), true)))
         :     :- Sort [item_id#13008 ASC NULLS FIRST], false, 0
         :     :  +- Filter isnotnull(ss_item_rev#13009)
         :     :     +- HashAggregate(keys=[i_item_id#501], functions=[sum(UnscaledValue(ss_ext_sales_price#679))], output=[item_id#13008, ss_item_rev#13009])
         :     :        +- Exchange hashpartitioning(i_item_id#501, 200), ENSURE_REQUIREMENTS, [id=#114818]
         :     :           +- HashAggregate(keys=[i_item_id#501], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#679))], output=[i_item_id#501, sum#13300L])
         :     :              +- Project [ss_ext_sales_price#679, i_item_id#501]
         :     :                 +- BroadcastHashJoin [ss_sold_date_sk#664], [d_date_sk#598], Inner, BuildRight, false
         :     :                    :- Project [ss_sold_date_sk#664, ss_ext_sales_price#679, i_item_id#501]
         :     :                    :  +- BroadcastHashJoin [ss_item_sk#666], [i_item_sk#500], Inner, BuildRight, false
         :     :                    :     :- Filter (isnotnull(ss_item_sk#666) AND isnotnull(ss_sold_date_sk#664))
         :     :                    :     :  +- FileScan parquet [ss_sold_date_sk#664,ss_item_sk#666,ss_ext_sales_price#679] Batched: true, DataFilters: [isnotnull(ss_item_sk#666), isnotnull(ss_sold_date_sk#664)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>
         :     :                    :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#114806]
         :     :                    :        +- Filter (isnotnull(i_item_sk#500) AND isnotnull(i_item_id#501))
         :     :                    :           +- FileScan parquet [i_item_sk#500,i_item_id#501] Batched: true, DataFilters: [isnotnull(i_item_sk#500), isnotnull(i_item_id#501)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)], ReadSchema: struct<i_item_sk:int,i_item_id:string>
         :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#114813]
         :     :                       +- Project [d_date_sk#598]
         :     :                          +- BroadcastHashJoin [d_date#600], [d_date#13206], LeftSemi, BuildRight, false
         :     :                             :- Filter isnotnull(d_date_sk#598)
         :     :                             :  +- FileScan parquet [d_date_sk#598,d_date#600] Batched: true, DataFilters: [isnotnull(d_date_sk#598)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date>
         :     :                             +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#114809]
         :     :                                +- Project [d_date#13206]
         :     :                                   +- Filter (isnotnull(d_week_seq#13208) AND (d_week_seq#13208 = Subquery subquery#13010, [id=#114728]))
         :     :                                      :  +- Subquery subquery#13010, [id=#114728]
         :     :                                      :     +- AdaptiveSparkPlan isFinalPlan=true
                                                            +- == Final Plan ==
                                                               *(1) Project [d_week_seq#13124]
                                                               +- *(1) Filter (isnotnull(d_date#13122) AND (d_date#13122 = 2000-07-21))
                                                                  +- *(1) ColumnarToRow
                                                                     +- FileScan parquet [d_date#13122,d_week_seq#13124] Batched: true, DataFilters: [isnotnull(d_date#13122), (d_date#13122 = 2000-07-21)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-07-21)], ReadSchema: struct<d_date:date,d_week_seq:int>
                                                            +- == Initial Plan ==
                                                               Project [d_week_seq#13124]
                                                               +- Filter (isnotnull(d_date#13122) AND (d_date#13122 = 2000-07-21))
                                                                  +- FileScan parquet [d_date#13122,d_week_seq#13124] Batched: true, DataFilters: [isnotnull(d_date#13122), (d_date#13122 = 2000-07-21)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-07-21)], ReadSchema: struct<d_date:date,d_week_seq:int>
         :     :                                      +- FileScan parquet [d_date#13206,d_week_seq#13208] Batched: true, DataFilters: [isnotnull(d_week_seq#13208)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_week_seq)], ReadSchema: struct<d_date:date,d_week_seq:int>
         :     +- Sort [item_id#13012 ASC NULLS FIRST], false, 0
         :        +- Filter isnotnull(cs_item_rev#13013)
         :           +- HashAggregate(keys=[i_item_id#13021], functions=[sum(UnscaledValue(cs_ext_sales_price#141))], output=[item_id#13012, cs_item_rev#13013])
         :              +- Exchange hashpartitioning(i_item_id#13021, 200), ENSURE_REQUIREMENTS, [id=#114833]
         :                 +- HashAggregate(keys=[i_item_id#13021], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#141))], output=[i_item_id#13021, sum#13302L])
         :                    +- Project [cs_ext_sales_price#141, i_item_id#13021]
         :                       +- BroadcastHashJoin [cs_sold_date_sk#118], [d_date_sk#13042], Inner, BuildRight, false
         :                          :- Project [cs_sold_date_sk#118, cs_ext_sales_price#141, i_item_id#13021]
         :                          :  +- BroadcastHashJoin [cs_item_sk#133], [i_item_sk#13020], Inner, BuildRight, false
         :                          :     :- Filter (isnotnull(cs_item_sk#133) AND isnotnull(cs_sold_date_sk#118))
         :                          :     :  +- FileScan parquet [cs_sold_date_sk#118,cs_item_sk#133,cs_ext_sales_price#141] Batched: true, DataFilters: [isnotnull(cs_item_sk#133), isnotnull(cs_sold_date_sk#118)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>
         :                          :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#114821]
         :                          :        +- Filter (isnotnull(i_item_sk#13020) AND isnotnull(i_item_id#13021))
         :                          :           +- FileScan parquet [i_item_sk#13020,i_item_id#13021] Batched: true, DataFilters: [isnotnull(i_item_sk#13020), isnotnull(i_item_id#13021)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)], ReadSchema: struct<i_item_sk:int,i_item_id:string>
         :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#114828]
         :                             +- Project [d_date_sk#13042]
         :                                +- BroadcastHashJoin [d_date#13044], [d_date#13234], LeftSemi, BuildRight, false
         :                                   :- Filter isnotnull(d_date_sk#13042)
         :                                   :  +- FileScan parquet [d_date_sk#13042,d_date#13044] Batched: true, DataFilters: [isnotnull(d_date_sk#13042)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date>
         :                                   +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#114824]
         :                                      +- Project [d_date#13234]
         :                                         +- Filter (isnotnull(d_week_seq#13236) AND (d_week_seq#13236 = Subquery subquery#13014, [id=#114734]))
         :                                            :  +- Subquery subquery#13014, [id=#114734]
         :                                            :     +- AdaptiveSparkPlan isFinalPlan=false
         :                                            :        +- Project [d_week_seq#13152]
         :                                            :           +- Filter (isnotnull(d_date#13150) AND (d_date#13150 = 2000-07-21))
         :                                            :              +- FileScan parquet [d_date#13150,d_week_seq#13152] Batched: true, DataFilters: [isnotnull(d_date#13150), (d_date#13150 = 2000-07-21)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-07-21)], ReadSchema: struct<d_date:date,d_week_seq:int>
         :                                            +- FileScan parquet [d_date#13234,d_week_seq#13236] Batched: true, DataFilters: [isnotnull(d_week_seq#13236)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_week_seq)], ReadSchema: struct<d_date:date,d_week_seq:int>
         +- Sort [item_id#13016 ASC NULLS FIRST], false, 0
            +- Filter isnotnull(ws_item_rev#13017)
               +- HashAggregate(keys=[i_item_id#13071], functions=[sum(UnscaledValue(ws_ext_sales_price#407))], output=[item_id#13016, ws_item_rev#13017])
                  +- Exchange hashpartitioning(i_item_id#13071, 200), ENSURE_REQUIREMENTS, [id=#114854]
                     +- HashAggregate(keys=[i_item_id#13071], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#407))], output=[i_item_id#13071, sum#13304L])
                        +- Project [ws_ext_sales_price#407, i_item_id#13071]
                           +- BroadcastHashJoin [ws_sold_date_sk#384], [d_date_sk#13092], Inner, BuildRight, false
                              :- Project [ws_sold_date_sk#384, ws_ext_sales_price#407, i_item_id#13071]
                              :  +- BroadcastHashJoin [ws_item_sk#387], [i_item_sk#13070], Inner, BuildRight, false
                              :     :- Filter (isnotnull(ws_item_sk#387) AND isnotnull(ws_sold_date_sk#384))
                              :     :  +- FileScan parquet [ws_sold_date_sk#384,ws_item_sk#387,ws_ext_sales_price#407] Batched: true, DataFilters: [isnotnull(ws_item_sk#387), isnotnull(ws_sold_date_sk#384)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>
                              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#114842]
                              :        +- Filter (isnotnull(i_item_sk#13070) AND isnotnull(i_item_id#13071))
                              :           +- FileScan parquet [i_item_sk#13070,i_item_id#13071] Batched: true, DataFilters: [isnotnull(i_item_sk#13070), isnotnull(i_item_id#13071)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)], ReadSchema: struct<i_item_sk:int,i_item_id:string>
                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#114849]
                                 +- Project [d_date_sk#13092]
                                    +- BroadcastHashJoin [d_date#13094], [d_date#13262], LeftSemi, BuildRight, false
                                       :- Filter isnotnull(d_date_sk#13092)
                                       :  +- FileScan parquet [d_date_sk#13092,d_date#13094] Batched: true, DataFilters: [isnotnull(d_date_sk#13092)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date>
                                       +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#114845]
                                          +- Project [d_date#13262]
                                             +- Filter (isnotnull(d_week_seq#13264) AND (d_week_seq#13264 = Subquery subquery#13018, [id=#114740]))
                                                :  +- Subquery subquery#13018, [id=#114740]
                                                :     +- AdaptiveSparkPlan isFinalPlan=false
                                                :        +- Project [d_week_seq#13180]
                                                :           +- Filter (isnotnull(d_date#13178) AND (d_date#13178 = 2000-07-21))
                                                :              +- FileScan parquet [d_date#13178,d_week_seq#13180] Batched: true, DataFilters: [isnotnull(d_date#13178), (d_date#13178 = 2000-07-21)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-07-21)], ReadSchema: struct<d_date:date,d_week_seq:int>
                                                +- FileScan parquet [d_date#13262,d_week_seq#13264] Batched: true, DataFilters: [isnotnull(d_week_seq#13264)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_week_seq)], ReadSchema: struct<d_date:date,d_week_seq:int>
