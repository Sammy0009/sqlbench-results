AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[ss_customer_sk#667 ASC NULLS FIRST,ss_qty#17431L DESC NULLS LAST,ss_wc#17432 DESC NULLS LAST,ss_sp#17433 DESC NULLS LAST,other_chan_qty#17417L ASC NULLS FIRST,other_chan_wholesale_cost#17418 ASC NULLS FIRST,other_chan_sales_price#17419 ASC NULLS FIRST,ratio#17413 ASC NULLS FIRST], output=[ss_customer_sk#667,ratio#17413,store_qty#17414L,store_wholesale_cost#17415,store_sales_price#17416,other_chan_qty#17417L,other_chan_wholesale_cost#17418,other_chan_sales_price#17419])
   +- *(23) Project [ss_customer_sk#667, round((cast(ss_qty#17431L as double) / cast((coalesce(ws_qty#17422L, 0) + coalesce(cs_qty#17427L, 0)) as double)), 2) AS ratio#17413, ss_qty#17431L AS store_qty#17414L, ss_wc#17432 AS store_wholesale_cost#17415, ss_sp#17433 AS store_sales_price#17416, (coalesce(ws_qty#17422L, 0) + coalesce(cs_qty#17427L, 0)) AS other_chan_qty#17417L, CheckOverflow((promote_precision(cast(coalesce(ws_wc#17423, 0.00) as decimal(18,2))) + promote_precision(cast(coalesce(cs_wc#17428, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS other_chan_wholesale_cost#17418, CheckOverflow((promote_precision(cast(coalesce(ws_sp#17424, 0.00) as decimal(18,2))) + promote_precision(cast(coalesce(cs_sp#17429, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS other_chan_sales_price#17419, ss_qty#17431L, ss_wc#17432, ss_sp#17433]
      +- *(23) Filter ((coalesce(ws_qty#17422L, 0) > 0) OR (coalesce(cs_qty#17427L, 0) > 0))
         +- *(23) SortMergeJoin [ss_sold_year#17430, ss_item_sk#666, ss_customer_sk#667], [cs_sold_year#17425, cs_item_sk#133, cs_customer_sk#17426], LeftOuter
            :- *(21) Project [ss_sold_year#17430, ss_item_sk#666, ss_customer_sk#667, ss_qty#17431L, ss_wc#17432, ss_sp#17433, ws_qty#17422L, ws_wc#17423, ws_sp#17424]
            :  +- *(21) SortMergeJoin [ss_sold_year#17430, ss_item_sk#666, ss_customer_sk#667], [ws_sold_year#17420, ws_item_sk#387, ws_customer_sk#17421], LeftOuter
            :     :- *(19) Sort [ss_sold_year#17430 ASC NULLS FIRST, ss_item_sk#666 ASC NULLS FIRST, ss_customer_sk#667 ASC NULLS FIRST], false, 0
            :     :  +- *(19) HashAggregate(keys=[d_year#17468, ss_item_sk#666, ss_customer_sk#667], functions=[sum(ss_quantity#674), sum(UnscaledValue(ss_wholesale_cost#675)), sum(UnscaledValue(ss_sales_price#677))], output=[ss_sold_year#17430, ss_item_sk#666, ss_customer_sk#667, ss_qty#17431L, ss_wc#17432, ss_sp#17433])
            :     :     +- AQEShuffleRead coalesced
            :     :        +- ShuffleQueryStage 11
            :     :           +- Exchange hashpartitioning(d_year#17468, ss_item_sk#666, ss_customer_sk#667, 200), ENSURE_REQUIREMENTS, [id=#132521]
            :     :              +- *(12) HashAggregate(keys=[d_year#17468, ss_item_sk#666, ss_customer_sk#667], functions=[partial_sum(ss_quantity#674), partial_sum(UnscaledValue(ss_wholesale_cost#675)), partial_sum(UnscaledValue(ss_sales_price#677))], output=[d_year#17468, ss_item_sk#666, ss_customer_sk#667, sum#17510L, sum#17511L, sum#17512L])
            :     :                 +- *(12) Project [ss_item_sk#666, ss_customer_sk#667, ss_quantity#674, ss_wholesale_cost#675, ss_sales_price#677, d_year#17468]
            :     :                    +- *(12) BroadcastHashJoin [ss_sold_date_sk#664], [d_date_sk#17462], Inner, BuildRight, false
            :     :                       :- *(12) Project [ss_sold_date_sk#664, ss_item_sk#666, ss_customer_sk#667, ss_quantity#674, ss_wholesale_cost#675, ss_sales_price#677]
            :     :                       :  +- *(12) Filter isnull(sr_ticket_number#719L)
            :     :                       :     +- *(12) SortMergeJoin [ss_ticket_number#673L, ss_item_sk#666], [sr_ticket_number#719L, sr_item_sk#712], LeftOuter
            :     :                       :        :- *(10) Sort [ss_ticket_number#673L ASC NULLS FIRST, ss_item_sk#666 ASC NULLS FIRST], false, 0
            :     :                       :        :  +- ShuffleQueryStage 0
            :     :                       :        :     +- Exchange hashpartitioning(ss_ticket_number#673L, ss_item_sk#666, 200), ENSURE_REQUIREMENTS, [id=#131781]
            :     :                       :        :        +- *(1) Filter isnotnull(ss_sold_date_sk#664)
            :     :                       :        :           +- *(1) ColumnarToRow
            :     :                       :        :              +- FileScan parquet [ss_sold_date_sk#664,ss_item_sk#666,ss_customer_sk#667,ss_ticket_number#673L,ss_quantity#674,ss_wholesale_cost#675,ss_sales_price#677] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#664)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_ticket_number:bigint,ss_quantity:...
            :     :                       :        +- *(11) Sort [sr_ticket_number#719L ASC NULLS FIRST, sr_item_sk#712 ASC NULLS FIRST], false, 0
            :     :                       :           +- ShuffleQueryStage 1
            :     :                       :              +- Exchange hashpartitioning(sr_ticket_number#719L, sr_item_sk#712, 200), ENSURE_REQUIREMENTS, [id=#131798]
            :     :                       :                 +- *(2) Filter (isnotnull(sr_ticket_number#719L) AND isnotnull(sr_item_sk#712))
            :     :                       :                    +- *(2) ColumnarToRow
            :     :                       :                       +- FileScan parquet [sr_item_sk#712,sr_ticket_number#719L] Batched: true, DataFilters: [isnotnull(sr_ticket_number#719L), isnotnull(sr_item_sk#712)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_returns.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint>
            :     :                       +- BroadcastQueryStage 2
            :     :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#131818]
            :     :                             +- *(3) Filter ((isnotnull(d_year#17468) AND (d_year#17468 = 2001)) AND isnotnull(d_date_sk#17462))
            :     :                                +- *(3) ColumnarToRow
            :     :                                   +- FileScan parquet [d_date_sk#17462,d_year#17468] Batched: true, DataFilters: [isnotnull(d_year#17468), (d_year#17468 = 2001), isnotnull(d_date_sk#17462)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
            :     +- *(20) Sort [ws_sold_year#17420 ASC NULLS FIRST, ws_item_sk#387 ASC NULLS FIRST, ws_customer_sk#17421 ASC NULLS FIRST], false, 0
            :        +- *(20) HashAggregate(keys=[d_year#604, ws_item_sk#387, ws_bill_customer_sk#388], functions=[sum(ws_quantity#402), sum(UnscaledValue(ws_wholesale_cost#403)), sum(UnscaledValue(ws_sales_price#405))], output=[ws_sold_year#17420, ws_item_sk#387, ws_customer_sk#17421, ws_qty#17422L, ws_wc#17423, ws_sp#17424])
            :           +- AQEShuffleRead coalesced
            :              +- ShuffleQueryStage 12
            :                 +- Exchange hashpartitioning(d_year#604, ws_item_sk#387, ws_bill_customer_sk#388, 200), ENSURE_REQUIREMENTS, [id=#132798]
            :                    +- *(15) HashAggregate(keys=[d_year#604, ws_item_sk#387, ws_bill_customer_sk#388], functions=[partial_sum(ws_quantity#402), partial_sum(UnscaledValue(ws_wholesale_cost#403)), partial_sum(UnscaledValue(ws_sales_price#405))], output=[d_year#604, ws_item_sk#387, ws_bill_customer_sk#388, sum#17516L, sum#17517L, sum#17518L])
            :                       +- *(15) Project [ws_item_sk#387, ws_bill_customer_sk#388, ws_quantity#402, ws_wholesale_cost#403, ws_sales_price#405, d_year#604]
            :                          +- *(15) BroadcastHashJoin [ws_sold_date_sk#384], [d_date_sk#598], Inner, BuildRight, false
            :                             :- *(15) Project [ws_sold_date_sk#384, ws_item_sk#387, ws_bill_customer_sk#388, ws_quantity#402, ws_wholesale_cost#403, ws_sales_price#405]
            :                             :  +- *(15) Filter isnull(wr_order_number#465L)
            :                             :     +- *(15) SortMergeJoin [ws_order_number#401L, ws_item_sk#387], [wr_order_number#465L, wr_item_sk#454], LeftOuter
            :                             :        :- *(13) Sort [ws_order_number#401L ASC NULLS FIRST, ws_item_sk#387 ASC NULLS FIRST], false, 0
            :                             :        :  +- AQEShuffleRead coalesced
            :                             :        :     +- ShuffleQueryStage 3
            :                             :        :        +- Exchange hashpartitioning(ws_order_number#401L, ws_item_sk#387, 200), ENSURE_REQUIREMENTS, [id=#131871]
            :                             :        :           +- *(4) Filter ((isnotnull(ws_sold_date_sk#384) AND isnotnull(ws_item_sk#387)) AND isnotnull(ws_bill_customer_sk#388))
            :                             :        :              +- *(4) ColumnarToRow
            :                             :        :                 +- FileScan parquet [ws_sold_date_sk#384,ws_item_sk#387,ws_bill_customer_sk#388,ws_order_number#401L,ws_quantity#402,ws_wholesale_cost#403,ws_sales_price#405] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#384), isnotnull(ws_item_sk#387), isnotnull(ws_bill_customer_sk#388)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_order_number:bigint,ws_quant...
            :                             :        +- *(14) Sort [wr_order_number#465L ASC NULLS FIRST, wr_item_sk#454 ASC NULLS FIRST], false, 0
            :                             :           +- AQEShuffleRead coalesced
            :                             :              +- ShuffleQueryStage 4
            :                             :                 +- Exchange hashpartitioning(wr_order_number#465L, wr_item_sk#454, 200), ENSURE_REQUIREMENTS, [id=#131888]
            :                             :                    +- *(5) Filter (isnotnull(wr_order_number#465L) AND isnotnull(wr_item_sk#454))
            :                             :                       +- *(5) ColumnarToRow
            :                             :                          +- FileScan parquet [wr_item_sk#454,wr_order_number#465L] Batched: true, DataFilters: [isnotnull(wr_order_number#465L), isnotnull(wr_item_sk#454)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_returns.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(wr_order_number), IsNotNull(wr_item_sk)], ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint>
            :                             +- BroadcastQueryStage 6
            :                                +- ReusedExchange [d_date_sk#598, d_year#604], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#131818]
            +- *(22) Sort [cs_sold_year#17425 ASC NULLS FIRST, cs_item_sk#133 ASC NULLS FIRST, cs_customer_sk#17426 ASC NULLS FIRST], false, 0
               +- *(22) HashAggregate(keys=[d_year#17440, cs_item_sk#133, cs_bill_customer_sk#121], functions=[sum(cs_quantity#136), sum(UnscaledValue(cs_wholesale_cost#137)), sum(UnscaledValue(cs_sales_price#139))], output=[cs_sold_year#17425, cs_item_sk#133, cs_customer_sk#17426, cs_qty#17427L, cs_wc#17428, cs_sp#17429])
                  +- AQEShuffleRead coalesced
                     +- ShuffleQueryStage 13
                        +- Exchange hashpartitioning(d_year#17440, cs_item_sk#133, cs_bill_customer_sk#121, 200), ENSURE_REQUIREMENTS, [id=#133003]
                           +- *(18) HashAggregate(keys=[d_year#17440, cs_item_sk#133, cs_bill_customer_sk#121], functions=[partial_sum(cs_quantity#136), partial_sum(UnscaledValue(cs_wholesale_cost#137)), partial_sum(UnscaledValue(cs_sales_price#139))], output=[d_year#17440, cs_item_sk#133, cs_bill_customer_sk#121, sum#17522L, sum#17523L, sum#17524L])
                              +- *(18) Project [cs_bill_customer_sk#121, cs_item_sk#133, cs_quantity#136, cs_wholesale_cost#137, cs_sales_price#139, d_year#17440]
                                 +- *(18) BroadcastHashJoin [cs_sold_date_sk#118], [d_date_sk#17434], Inner, BuildRight, false
                                    :- *(18) Project [cs_sold_date_sk#118, cs_bill_customer_sk#121, cs_item_sk#133, cs_quantity#136, cs_wholesale_cost#137, cs_sales_price#139]
                                    :  +- *(18) Filter isnull(cr_order_number#264L)
                                    :     +- *(18) SortMergeJoin [cs_order_number#135L, cs_item_sk#133], [cr_order_number#264L, cr_item_sk#250], LeftOuter
                                    :        :- *(16) Sort [cs_order_number#135L ASC NULLS FIRST, cs_item_sk#133 ASC NULLS FIRST], false, 0
                                    :        :  +- AQEShuffleRead coalesced
                                    :        :     +- ShuffleQueryStage 7
                                    :        :        +- Exchange hashpartitioning(cs_order_number#135L, cs_item_sk#133, 200), ENSURE_REQUIREMENTS, [id=#131965]
                                    :        :           +- *(7) Filter ((isnotnull(cs_sold_date_sk#118) AND isnotnull(cs_item_sk#133)) AND isnotnull(cs_bill_customer_sk#121))
                                    :        :              +- *(7) ColumnarToRow
                                    :        :                 +- FileScan parquet [cs_sold_date_sk#118,cs_bill_customer_sk#121,cs_item_sk#133,cs_order_number#135L,cs_quantity#136,cs_wholesale_cost#137,cs_sales_price#139] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#118), isnotnull(cs_item_sk#133), isnotnull(cs_bill_customer_sk#121)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_order_number:bigint,cs_quant...
                                    :        +- *(17) Sort [cr_order_number#264L ASC NULLS FIRST, cr_item_sk#250 ASC NULLS FIRST], false, 0
                                    :           +- AQEShuffleRead coalesced
                                    :              +- ShuffleQueryStage 8
                                    :                 +- Exchange hashpartitioning(cr_order_number#264L, cr_item_sk#250, 200), ENSURE_REQUIREMENTS, [id=#131982]
                                    :                    +- *(8) Filter (isnotnull(cr_order_number#264L) AND isnotnull(cr_item_sk#250))
                                    :                       +- *(8) ColumnarToRow
                                    :                          +- FileScan parquet [cr_item_sk#250,cr_order_number#264L] Batched: true, DataFilters: [isnotnull(cr_order_number#264L), isnotnull(cr_item_sk#250)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_returns.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)], ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint>
                                    +- BroadcastQueryStage 10
                                       +- ReusedExchange [d_date_sk#17434, d_year#17440], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#131818]
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[ss_customer_sk#667 ASC NULLS FIRST,ss_qty#17431L DESC NULLS LAST,ss_wc#17432 DESC NULLS LAST,ss_sp#17433 DESC NULLS LAST,other_chan_qty#17417L ASC NULLS FIRST,other_chan_wholesale_cost#17418 ASC NULLS FIRST,other_chan_sales_price#17419 ASC NULLS FIRST,ratio#17413 ASC NULLS FIRST], output=[ss_customer_sk#667,ratio#17413,store_qty#17414L,store_wholesale_cost#17415,store_sales_price#17416,other_chan_qty#17417L,other_chan_wholesale_cost#17418,other_chan_sales_price#17419])
   +- Project [ss_customer_sk#667, round((cast(ss_qty#17431L as double) / cast((coalesce(ws_qty#17422L, 0) + coalesce(cs_qty#17427L, 0)) as double)), 2) AS ratio#17413, ss_qty#17431L AS store_qty#17414L, ss_wc#17432 AS store_wholesale_cost#17415, ss_sp#17433 AS store_sales_price#17416, (coalesce(ws_qty#17422L, 0) + coalesce(cs_qty#17427L, 0)) AS other_chan_qty#17417L, CheckOverflow((promote_precision(cast(coalesce(ws_wc#17423, 0.00) as decimal(18,2))) + promote_precision(cast(coalesce(cs_wc#17428, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS other_chan_wholesale_cost#17418, CheckOverflow((promote_precision(cast(coalesce(ws_sp#17424, 0.00) as decimal(18,2))) + promote_precision(cast(coalesce(cs_sp#17429, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS other_chan_sales_price#17419, ss_qty#17431L, ss_wc#17432, ss_sp#17433]
      +- Filter ((coalesce(ws_qty#17422L, 0) > 0) OR (coalesce(cs_qty#17427L, 0) > 0))
         +- SortMergeJoin [ss_sold_year#17430, ss_item_sk#666, ss_customer_sk#667], [cs_sold_year#17425, cs_item_sk#133, cs_customer_sk#17426], LeftOuter
            :- Project [ss_sold_year#17430, ss_item_sk#666, ss_customer_sk#667, ss_qty#17431L, ss_wc#17432, ss_sp#17433, ws_qty#17422L, ws_wc#17423, ws_sp#17424]
            :  +- SortMergeJoin [ss_sold_year#17430, ss_item_sk#666, ss_customer_sk#667], [ws_sold_year#17420, ws_item_sk#387, ws_customer_sk#17421], LeftOuter
            :     :- Sort [ss_sold_year#17430 ASC NULLS FIRST, ss_item_sk#666 ASC NULLS FIRST, ss_customer_sk#667 ASC NULLS FIRST], false, 0
            :     :  +- HashAggregate(keys=[d_year#17468, ss_item_sk#666, ss_customer_sk#667], functions=[sum(ss_quantity#674), sum(UnscaledValue(ss_wholesale_cost#675)), sum(UnscaledValue(ss_sales_price#677))], output=[ss_sold_year#17430, ss_item_sk#666, ss_customer_sk#667, ss_qty#17431L, ss_wc#17432, ss_sp#17433])
            :     :     +- Exchange hashpartitioning(d_year#17468, ss_item_sk#666, ss_customer_sk#667, 200), ENSURE_REQUIREMENTS, [id=#131695]
            :     :        +- HashAggregate(keys=[d_year#17468, ss_item_sk#666, ss_customer_sk#667], functions=[partial_sum(ss_quantity#674), partial_sum(UnscaledValue(ss_wholesale_cost#675)), partial_sum(UnscaledValue(ss_sales_price#677))], output=[d_year#17468, ss_item_sk#666, ss_customer_sk#667, sum#17510L, sum#17511L, sum#17512L])
            :     :           +- Project [ss_item_sk#666, ss_customer_sk#667, ss_quantity#674, ss_wholesale_cost#675, ss_sales_price#677, d_year#17468]
            :     :              +- BroadcastHashJoin [ss_sold_date_sk#664], [d_date_sk#17462], Inner, BuildRight, false
            :     :                 :- Project [ss_sold_date_sk#664, ss_item_sk#666, ss_customer_sk#667, ss_quantity#674, ss_wholesale_cost#675, ss_sales_price#677]
            :     :                 :  +- Filter isnull(sr_ticket_number#719L)
            :     :                 :     +- SortMergeJoin [ss_ticket_number#673L, ss_item_sk#666], [sr_ticket_number#719L, sr_item_sk#712], LeftOuter
            :     :                 :        :- Sort [ss_ticket_number#673L ASC NULLS FIRST, ss_item_sk#666 ASC NULLS FIRST], false, 0
            :     :                 :        :  +- Exchange hashpartitioning(ss_ticket_number#673L, ss_item_sk#666, 200), ENSURE_REQUIREMENTS, [id=#131682]
            :     :                 :        :     +- Filter isnotnull(ss_sold_date_sk#664)
            :     :                 :        :        +- FileScan parquet [ss_sold_date_sk#664,ss_item_sk#666,ss_customer_sk#667,ss_ticket_number#673L,ss_quantity#674,ss_wholesale_cost#675,ss_sales_price#677] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#664)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_ticket_number:bigint,ss_quantity:...
            :     :                 :        +- Sort [sr_ticket_number#719L ASC NULLS FIRST, sr_item_sk#712 ASC NULLS FIRST], false, 0
            :     :                 :           +- Exchange hashpartitioning(sr_ticket_number#719L, sr_item_sk#712, 200), ENSURE_REQUIREMENTS, [id=#131683]
            :     :                 :              +- Filter (isnotnull(sr_ticket_number#719L) AND isnotnull(sr_item_sk#712))
            :     :                 :                 +- FileScan parquet [sr_item_sk#712,sr_ticket_number#719L] Batched: true, DataFilters: [isnotnull(sr_ticket_number#719L), isnotnull(sr_item_sk#712)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_returns.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint>
            :     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#131690]
            :     :                    +- Filter ((isnotnull(d_year#17468) AND (d_year#17468 = 2001)) AND isnotnull(d_date_sk#17462))
            :     :                       +- FileScan parquet [d_date_sk#17462,d_year#17468] Batched: true, DataFilters: [isnotnull(d_year#17468), (d_year#17468 = 2001), isnotnull(d_date_sk#17462)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
            :     +- Sort [ws_sold_year#17420 ASC NULLS FIRST, ws_item_sk#387 ASC NULLS FIRST, ws_customer_sk#17421 ASC NULLS FIRST], false, 0
            :        +- HashAggregate(keys=[d_year#604, ws_item_sk#387, ws_bill_customer_sk#388], functions=[sum(ws_quantity#402), sum(UnscaledValue(ws_wholesale_cost#403)), sum(UnscaledValue(ws_sales_price#405))], output=[ws_sold_year#17420, ws_item_sk#387, ws_customer_sk#17421, ws_qty#17422L, ws_wc#17423, ws_sp#17424])
            :           +- Exchange hashpartitioning(d_year#604, ws_item_sk#387, ws_bill_customer_sk#388, 200), ENSURE_REQUIREMENTS, [id=#131711]
            :              +- HashAggregate(keys=[d_year#604, ws_item_sk#387, ws_bill_customer_sk#388], functions=[partial_sum(ws_quantity#402), partial_sum(UnscaledValue(ws_wholesale_cost#403)), partial_sum(UnscaledValue(ws_sales_price#405))], output=[d_year#604, ws_item_sk#387, ws_bill_customer_sk#388, sum#17516L, sum#17517L, sum#17518L])
            :                 +- Project [ws_item_sk#387, ws_bill_customer_sk#388, ws_quantity#402, ws_wholesale_cost#403, ws_sales_price#405, d_year#604]
            :                    +- BroadcastHashJoin [ws_sold_date_sk#384], [d_date_sk#598], Inner, BuildRight, false
            :                       :- Project [ws_sold_date_sk#384, ws_item_sk#387, ws_bill_customer_sk#388, ws_quantity#402, ws_wholesale_cost#403, ws_sales_price#405]
            :                       :  +- Filter isnull(wr_order_number#465L)
            :                       :     +- SortMergeJoin [ws_order_number#401L, ws_item_sk#387], [wr_order_number#465L, wr_item_sk#454], LeftOuter
            :                       :        :- Sort [ws_order_number#401L ASC NULLS FIRST, ws_item_sk#387 ASC NULLS FIRST], false, 0
            :                       :        :  +- Exchange hashpartitioning(ws_order_number#401L, ws_item_sk#387, 200), ENSURE_REQUIREMENTS, [id=#131698]
            :                       :        :     +- Filter ((isnotnull(ws_sold_date_sk#384) AND isnotnull(ws_item_sk#387)) AND isnotnull(ws_bill_customer_sk#388))
            :                       :        :        +- FileScan parquet [ws_sold_date_sk#384,ws_item_sk#387,ws_bill_customer_sk#388,ws_order_number#401L,ws_quantity#402,ws_wholesale_cost#403,ws_sales_price#405] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#384), isnotnull(ws_item_sk#387), isnotnull(ws_bill_customer_sk#388)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_order_number:bigint,ws_quant...
            :                       :        +- Sort [wr_order_number#465L ASC NULLS FIRST, wr_item_sk#454 ASC NULLS FIRST], false, 0
            :                       :           +- Exchange hashpartitioning(wr_order_number#465L, wr_item_sk#454, 200), ENSURE_REQUIREMENTS, [id=#131699]
            :                       :              +- Filter (isnotnull(wr_order_number#465L) AND isnotnull(wr_item_sk#454))
            :                       :                 +- FileScan parquet [wr_item_sk#454,wr_order_number#465L] Batched: true, DataFilters: [isnotnull(wr_order_number#465L), isnotnull(wr_item_sk#454)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/web_returns.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(wr_order_number), IsNotNull(wr_item_sk)], ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint>
            :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#131706]
            :                          +- Filter ((isnotnull(d_date_sk#598) AND (d_year#604 = 2001)) AND isnotnull(d_year#604))
            :                             +- FileScan parquet [d_date_sk#598,d_year#604] Batched: true, DataFilters: [isnotnull(d_date_sk#598), (d_year#604 = 2001), isnotnull(d_year#604)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk), EqualTo(d_year,2001), IsNotNull(d_year)], ReadSchema: struct<d_date_sk:int,d_year:int>
            +- Sort [cs_sold_year#17425 ASC NULLS FIRST, cs_item_sk#133 ASC NULLS FIRST, cs_customer_sk#17426 ASC NULLS FIRST], false, 0
               +- HashAggregate(keys=[d_year#17440, cs_item_sk#133, cs_bill_customer_sk#121], functions=[sum(cs_quantity#136), sum(UnscaledValue(cs_wholesale_cost#137)), sum(UnscaledValue(cs_sales_price#139))], output=[cs_sold_year#17425, cs_item_sk#133, cs_customer_sk#17426, cs_qty#17427L, cs_wc#17428, cs_sp#17429])
                  +- Exchange hashpartitioning(d_year#17440, cs_item_sk#133, cs_bill_customer_sk#121, 200), ENSURE_REQUIREMENTS, [id=#131733]
                     +- HashAggregate(keys=[d_year#17440, cs_item_sk#133, cs_bill_customer_sk#121], functions=[partial_sum(cs_quantity#136), partial_sum(UnscaledValue(cs_wholesale_cost#137)), partial_sum(UnscaledValue(cs_sales_price#139))], output=[d_year#17440, cs_item_sk#133, cs_bill_customer_sk#121, sum#17522L, sum#17523L, sum#17524L])
                        +- Project [cs_bill_customer_sk#121, cs_item_sk#133, cs_quantity#136, cs_wholesale_cost#137, cs_sales_price#139, d_year#17440]
                           +- BroadcastHashJoin [cs_sold_date_sk#118], [d_date_sk#17434], Inner, BuildRight, false
                              :- Project [cs_sold_date_sk#118, cs_bill_customer_sk#121, cs_item_sk#133, cs_quantity#136, cs_wholesale_cost#137, cs_sales_price#139]
                              :  +- Filter isnull(cr_order_number#264L)
                              :     +- SortMergeJoin [cs_order_number#135L, cs_item_sk#133], [cr_order_number#264L, cr_item_sk#250], LeftOuter
                              :        :- Sort [cs_order_number#135L ASC NULLS FIRST, cs_item_sk#133 ASC NULLS FIRST], false, 0
                              :        :  +- Exchange hashpartitioning(cs_order_number#135L, cs_item_sk#133, 200), ENSURE_REQUIREMENTS, [id=#131720]
                              :        :     +- Filter ((isnotnull(cs_sold_date_sk#118) AND isnotnull(cs_item_sk#133)) AND isnotnull(cs_bill_customer_sk#121))
                              :        :        +- FileScan parquet [cs_sold_date_sk#118,cs_bill_customer_sk#121,cs_item_sk#133,cs_order_number#135L,cs_quantity#136,cs_wholesale_cost#137,cs_sales_price#139] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#118), isnotnull(cs_item_sk#133), isnotnull(cs_bill_customer_sk#121)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_order_number:bigint,cs_quant...
                              :        +- Sort [cr_order_number#264L ASC NULLS FIRST, cr_item_sk#250 ASC NULLS FIRST], false, 0
                              :           +- Exchange hashpartitioning(cr_order_number#264L, cr_item_sk#250, 200), ENSURE_REQUIREMENTS, [id=#131721]
                              :              +- Filter (isnotnull(cr_order_number#264L) AND isnotnull(cr_item_sk#250))
                              :                 +- FileScan parquet [cr_item_sk#250,cr_order_number#264L] Batched: true, DataFilters: [isnotnull(cr_order_number#264L), isnotnull(cr_item_sk#250)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_returns.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)], ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint>
                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#131728]
                                 +- Filter ((isnotnull(d_date_sk#17434) AND (d_year#17440 = 2001)) AND isnotnull(d_year#17440))
                                    +- FileScan parquet [d_date_sk#17434,d_year#17440] Batched: true, DataFilters: [isnotnull(d_date_sk#17434), (d_year#17440 = 2001), isnotnull(d_year#17440)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk), EqualTo(d_year,2001), IsNotNull(d_year)], ReadSchema: struct<d_date_sk:int,d_year:int>
