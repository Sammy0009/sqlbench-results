AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[cnt#2996L ASC NULLS FIRST,ca_state#222 ASC NULLS FIRST], output=[state#2995,cnt#2996L])
   +- *(11) Filter (cnt#2996L >= 10)
      +- *(11) HashAggregate(keys=[ca_state#222], functions=[count(1)], output=[state#2995, cnt#2996L, ca_state#222])
         +- AQEShuffleRead coalesced
            +- ShuffleQueryStage 8
               +- Exchange hashpartitioning(ca_state#222, 200), ENSURE_REQUIREMENTS, [id=#10430]
                  +- *(10) HashAggregate(keys=[ca_state#222], functions=[partial_count(1)], output=[ca_state#222, count#3056L])
                     +- *(10) Project [ca_state#222]
                        +- *(10) BroadcastHashJoin [ss_item_sk#666], [i_item_sk#500], Inner, BuildRight, false
                           :- *(10) Project [ca_state#222, ss_item_sk#666]
                           :  +- *(10) BroadcastHashJoin [ss_sold_date_sk#664], [d_date_sk#598], Inner, BuildRight, false
                           :     :- *(10) Project [ca_state#222, ss_sold_date_sk#664, ss_item_sk#666]
                           :     :  +- *(10) SortMergeJoin [c_customer_sk#562], [ss_customer_sk#667], Inner
                           :     :     :- *(8) Sort [c_customer_sk#562 ASC NULLS FIRST], false, 0
                           :     :     :  +- AQEShuffleRead coalesced
                           :     :     :     +- ShuffleQueryStage 6
                           :     :     :        +- Exchange hashpartitioning(c_customer_sk#562, 200), ENSURE_REQUIREMENTS, [id=#10128]
                           :     :     :           +- *(7) Project [ca_state#222, c_customer_sk#562]
                           :     :     :              +- *(7) BroadcastHashJoin [ca_address_sk#214], [c_current_addr_sk#566], Inner, BuildLeft, false
                           :     :     :                 :- BroadcastQueryStage 0
                           :     :     :                 :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9486]
                           :     :     :                 :     +- *(1) Filter isnotnull(ca_address_sk#214)
                           :     :     :                 :        +- *(1) ColumnarToRow
                           :     :     :                 :           +- FileScan parquet [ca_address_sk#214,ca_state#222] Batched: true, DataFilters: [isnotnull(ca_address_sk#214)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer_address.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>
                           :     :     :                 +- *(7) Filter (isnotnull(c_current_addr_sk#566) AND isnotnull(c_customer_sk#562))
                           :     :     :                    +- *(7) ColumnarToRow
                           :     :     :                       +- FileScan parquet [c_customer_sk#562,c_current_addr_sk#566] Batched: true, DataFilters: [isnotnull(c_current_addr_sk#566), isnotnull(c_customer_sk#562)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>
                           :     :     +- *(9) Sort [ss_customer_sk#667 ASC NULLS FIRST], false, 0
                           :     :        +- AQEShuffleRead coalesced
                           :     :           +- ShuffleQueryStage 1
                           :     :              +- Exchange hashpartitioning(ss_customer_sk#667, 200), ENSURE_REQUIREMENTS, [id=#9505]
                           :     :                 +- *(2) Filter ((isnotnull(ss_customer_sk#667) AND isnotnull(ss_sold_date_sk#664)) AND isnotnull(ss_item_sk#666))
                           :     :                    +- *(2) ColumnarToRow
                           :     :                       +- FileScan parquet [ss_sold_date_sk#664,ss_item_sk#666,ss_customer_sk#667] Batched: true, DataFilters: [isnotnull(ss_customer_sk#667), isnotnull(ss_sold_date_sk#664), isnotnull(ss_item_sk#666)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int>
                           :     +- BroadcastQueryStage 2
                           :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#9526]
                           :           +- *(3) Project [d_date_sk#598]
                           :              +- *(3) Filter ((isnotnull(d_month_seq#601) AND (d_month_seq#601 = Subquery subquery#2997, [id=#9333])) AND isnotnull(d_date_sk#598))
                           :                 :  +- Subquery subquery#2997, [id=#9333]
                           :                 :     +- AdaptiveSparkPlan isFinalPlan=true
                                                   +- == Final Plan ==
                                                      *(2) HashAggregate(keys=[d_month_seq#3006], functions=[], output=[d_month_seq#3006])
                                                      +- AQEShuffleRead coalesced
                                                         +- ShuffleQueryStage 0
                                                            +- Exchange hashpartitioning(d_month_seq#3006, 200), ENSURE_REQUIREMENTS, [id=#9587]
                                                               +- *(1) HashAggregate(keys=[d_month_seq#3006], functions=[], output=[d_month_seq#3006])
                                                                  +- *(1) Project [d_month_seq#3006]
                                                                     +- *(1) Filter (((isnotnull(d_year#3009) AND isnotnull(d_moy#3011)) AND (d_year#3009 = 2001)) AND (d_moy#3011 = 3))
                                                                        +- *(1) ColumnarToRow
                                                                           +- FileScan parquet [d_month_seq#3006,d_year#3009,d_moy#3011] Batched: true, DataFilters: [isnotnull(d_year#3009), isnotnull(d_moy#3011), (d_year#3009 = 2001), (d_moy#3011 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>
                                                   +- == Initial Plan ==
                                                      HashAggregate(keys=[d_month_seq#3006], functions=[], output=[d_month_seq#3006])
                                                      +- Exchange hashpartitioning(d_month_seq#3006, 200), ENSURE_REQUIREMENTS, [id=#9331]
                                                         +- HashAggregate(keys=[d_month_seq#3006], functions=[], output=[d_month_seq#3006])
                                                            +- Project [d_month_seq#3006]
                                                               +- Filter (((isnotnull(d_year#3009) AND isnotnull(d_moy#3011)) AND (d_year#3009 = 2001)) AND (d_moy#3011 = 3))
                                                                  +- FileScan parquet [d_month_seq#3006,d_year#3009,d_moy#3011] Batched: true, DataFilters: [isnotnull(d_year#3009), isnotnull(d_moy#3011), (d_year#3009 = 2001), (d_moy#3011 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>
                           :                 +- *(3) ColumnarToRow
                           :                    +- FileScan parquet [d_date_sk#598,d_month_seq#601] Batched: true, DataFilters: [isnotnull(d_month_seq#601), isnotnull(d_date_sk#598)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_month_seq:int>
                           +- BroadcastQueryStage 7
                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10231]
                                 +- AQEShuffleRead local
                                    +- ShuffleQueryStage 5
                                       +- Exchange hashpartitioning(i_item_sk#500, 200), ENSURE_REQUIREMENTS, [id=#10003]
                                          +- *(6) Project [i_item_sk#500]
                                             +- *(6) Filter (cast(i_current_price#505 as decimal(14,7)) > CheckOverflow((1.200000 * promote_precision(avg(i_current_price)#3002)), DecimalType(14,7), true))
                                                +- *(6) BroadcastHashJoin [i_category#512], [i_category#3043], LeftOuter, BuildRight, false
                                                   :- *(6) Filter (isnotnull(i_current_price#505) AND isnotnull(i_item_sk#500))
                                                   :  +- *(6) ColumnarToRow
                                                   :     +- FileScan parquet [i_item_sk#500,i_current_price#505,i_category#512] Batched: true, DataFilters: [isnotnull(i_current_price#505), isnotnull(i_item_sk#500)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_category:string>
                                                   +- BroadcastQueryStage 4
                                                      +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#9757]
                                                         +- *(5) HashAggregate(keys=[i_category#3043], functions=[avg(UnscaledValue(i_current_price#3036))], output=[avg(i_current_price)#3002, i_category#3043])
                                                            +- AQEShuffleRead coalesced
                                                               +- ShuffleQueryStage 3
                                                                  +- Exchange hashpartitioning(i_category#3043, 200), ENSURE_REQUIREMENTS, [id=#9549]
                                                                     +- *(4) HashAggregate(keys=[i_category#3043], functions=[partial_avg(UnscaledValue(i_current_price#3036))], output=[i_category#3043, sum#3059, count#3060L])
                                                                        +- *(4) Filter isnotnull(i_category#3043)
                                                                           +- *(4) ColumnarToRow
                                                                              +- FileScan parquet [i_current_price#3036,i_category#3043] Batched: true, DataFilters: [isnotnull(i_category#3043)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_category)], ReadSchema: struct<i_current_price:decimal(7,2),i_category:string>
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[cnt#2996L ASC NULLS FIRST,ca_state#222 ASC NULLS FIRST], output=[state#2995,cnt#2996L])
   +- Filter (cnt#2996L >= 10)
      +- HashAggregate(keys=[ca_state#222], functions=[count(1)], output=[state#2995, cnt#2996L, ca_state#222])
         +- Exchange hashpartitioning(ca_state#222, 200), ENSURE_REQUIREMENTS, [id=#9394]
            +- HashAggregate(keys=[ca_state#222], functions=[partial_count(1)], output=[ca_state#222, count#3056L])
               +- Project [ca_state#222]
                  +- SortMergeJoin [ss_item_sk#666], [i_item_sk#500], Inner
                     :- Sort [ss_item_sk#666 ASC NULLS FIRST], false, 0
                     :  +- Exchange hashpartitioning(ss_item_sk#666, 200), ENSURE_REQUIREMENTS, [id=#9386]
                     :     +- Project [ca_state#222, ss_item_sk#666]
                     :        +- BroadcastHashJoin [ss_sold_date_sk#664], [d_date_sk#598], Inner, BuildRight, false
                     :           :- Project [ca_state#222, ss_sold_date_sk#664, ss_item_sk#666]
                     :           :  +- SortMergeJoin [c_customer_sk#562], [ss_customer_sk#667], Inner
                     :           :     :- Sort [c_customer_sk#562 ASC NULLS FIRST], false, 0
                     :           :     :  +- Exchange hashpartitioning(c_customer_sk#562, 200), ENSURE_REQUIREMENTS, [id=#9367]
                     :           :     :     +- Project [ca_state#222, c_customer_sk#562]
                     :           :     :        +- BroadcastHashJoin [ca_address_sk#214], [c_current_addr_sk#566], Inner, BuildLeft, false
                     :           :     :           :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9362]
                     :           :     :           :  +- Filter isnotnull(ca_address_sk#214)
                     :           :     :           :     +- FileScan parquet [ca_address_sk#214,ca_state#222] Batched: true, DataFilters: [isnotnull(ca_address_sk#214)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer_address.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>
                     :           :     :           +- Filter (isnotnull(c_current_addr_sk#566) AND isnotnull(c_customer_sk#562))
                     :           :     :              +- FileScan parquet [c_customer_sk#562,c_current_addr_sk#566] Batched: true, DataFilters: [isnotnull(c_current_addr_sk#566), isnotnull(c_customer_sk#562)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/customer.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>
                     :           :     +- Sort [ss_customer_sk#667 ASC NULLS FIRST], false, 0
                     :           :        +- Exchange hashpartitioning(ss_customer_sk#667, 200), ENSURE_REQUIREMENTS, [id=#9368]
                     :           :           +- Filter ((isnotnull(ss_customer_sk#667) AND isnotnull(ss_sold_date_sk#664)) AND isnotnull(ss_item_sk#666))
                     :           :              +- FileScan parquet [ss_sold_date_sk#664,ss_item_sk#666,ss_customer_sk#667] Batched: true, DataFilters: [isnotnull(ss_customer_sk#667), isnotnull(ss_sold_date_sk#664), isnotnull(ss_item_sk#666)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/store_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int>
                     :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#9374]
                     :              +- Project [d_date_sk#598]
                     :                 +- Filter ((isnotnull(d_month_seq#601) AND (d_month_seq#601 = Subquery subquery#2997, [id=#9333])) AND isnotnull(d_date_sk#598))
                     :                    :  +- Subquery subquery#2997, [id=#9333]
                     :                    :     +- AdaptiveSparkPlan isFinalPlan=true
                                                +- == Final Plan ==
                                                   *(2) HashAggregate(keys=[d_month_seq#3006], functions=[], output=[d_month_seq#3006])
                                                   +- AQEShuffleRead coalesced
                                                      +- ShuffleQueryStage 0
                                                         +- Exchange hashpartitioning(d_month_seq#3006, 200), ENSURE_REQUIREMENTS, [id=#9587]
                                                            +- *(1) HashAggregate(keys=[d_month_seq#3006], functions=[], output=[d_month_seq#3006])
                                                               +- *(1) Project [d_month_seq#3006]
                                                                  +- *(1) Filter (((isnotnull(d_year#3009) AND isnotnull(d_moy#3011)) AND (d_year#3009 = 2001)) AND (d_moy#3011 = 3))
                                                                     +- *(1) ColumnarToRow
                                                                        +- FileScan parquet [d_month_seq#3006,d_year#3009,d_moy#3011] Batched: true, DataFilters: [isnotnull(d_year#3009), isnotnull(d_moy#3011), (d_year#3009 = 2001), (d_moy#3011 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>
                                                +- == Initial Plan ==
                                                   HashAggregate(keys=[d_month_seq#3006], functions=[], output=[d_month_seq#3006])
                                                   +- Exchange hashpartitioning(d_month_seq#3006, 200), ENSURE_REQUIREMENTS, [id=#9331]
                                                      +- HashAggregate(keys=[d_month_seq#3006], functions=[], output=[d_month_seq#3006])
                                                         +- Project [d_month_seq#3006]
                                                            +- Filter (((isnotnull(d_year#3009) AND isnotnull(d_moy#3011)) AND (d_year#3009 = 2001)) AND (d_moy#3011 = 3))
                                                               +- FileScan parquet [d_month_seq#3006,d_year#3009,d_moy#3011] Batched: true, DataFilters: [isnotnull(d_year#3009), isnotnull(d_moy#3011), (d_year#3009 = 2001), (d_moy#3011 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>
                     :                    +- FileScan parquet [d_date_sk#598,d_month_seq#601] Batched: true, DataFilters: [isnotnull(d_month_seq#601), isnotnull(d_date_sk#598)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_month_seq:int>
                     +- Sort [i_item_sk#500 ASC NULLS FIRST], false, 0
                        +- Exchange hashpartitioning(i_item_sk#500, 200), ENSURE_REQUIREMENTS, [id=#9387]
                           +- Project [i_item_sk#500]
                              +- Filter (cast(i_current_price#505 as decimal(14,7)) > CheckOverflow((1.200000 * promote_precision(avg(i_current_price)#3002)), DecimalType(14,7), true))
                                 +- BroadcastHashJoin [i_category#512], [i_category#3043], LeftOuter, BuildRight, false
                                    :- Filter (isnotnull(i_current_price#505) AND isnotnull(i_item_sk#500))
                                    :  +- FileScan parquet [i_item_sk#500,i_current_price#505,i_category#512] Batched: true, DataFilters: [isnotnull(i_current_price#505), isnotnull(i_item_sk#500)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_category:string>
                                    +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#9380]
                                       +- HashAggregate(keys=[i_category#3043], functions=[avg(UnscaledValue(i_current_price#3036))], output=[avg(i_current_price)#3002, i_category#3043])
                                          +- Exchange hashpartitioning(i_category#3043, 200), ENSURE_REQUIREMENTS, [id=#9377]
                                             +- HashAggregate(keys=[i_category#3043], functions=[partial_avg(UnscaledValue(i_current_price#3036))], output=[i_category#3043, sum#3059, count#3060L])
                                                +- Filter isnotnull(i_category#3043)
                                                   +- FileScan parquet [i_current_price#3036,i_category#3043] Batched: true, DataFilters: [isnotnull(i_category#3043)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_category)], ReadSchema: struct<i_current_price:decimal(7,2),i_category:string>
