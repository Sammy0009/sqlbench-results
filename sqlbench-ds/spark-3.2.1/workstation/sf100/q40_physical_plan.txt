AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[w_state#196 ASC NULLS FIRST,i_item_id#501 ASC NULLS FIRST], output=[w_state#196,i_item_id#501,sales_before#10366,sales_after#10367])
   +- *(9) HashAggregate(keys=[w_state#196, i_item_id#501], functions=[sum(CASE WHEN (d_date#600 < 2002-02-27) THEN CheckOverflow((promote_precision(cast(cs_sales_price#139 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#271 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END), sum(CASE WHEN (d_date#600 >= 2002-02-27) THEN CheckOverflow((promote_precision(cast(cs_sales_price#139 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#271 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END)], output=[w_state#196, i_item_id#501, sales_before#10366, sales_after#10367])
      +- AQEShuffleRead coalesced
         +- ShuffleQueryStage 5
            +- Exchange hashpartitioning(w_state#196, i_item_id#501, 200), ENSURE_REQUIREMENTS, [id=#96195]
               +- *(8) HashAggregate(keys=[w_state#196, i_item_id#501], functions=[partial_sum(CASE WHEN (d_date#600 < 2002-02-27) THEN CheckOverflow((promote_precision(cast(cs_sales_price#139 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#271 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_date#600 >= 2002-02-27) THEN CheckOverflow((promote_precision(cast(cs_sales_price#139 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#271 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END)], output=[w_state#196, i_item_id#501, sum#10378, isEmpty#10379, sum#10380, isEmpty#10381])
                  +- *(8) Project [cs_sales_price#139, cr_refunded_cash#271, w_state#196, i_item_id#501, d_date#600]
                     +- *(8) BroadcastHashJoin [cs_sold_date_sk#118], [d_date_sk#598], Inner, BuildRight, false
                        :- *(8) Project [cs_sold_date_sk#118, cs_sales_price#139, cr_refunded_cash#271, w_state#196, i_item_id#501]
                        :  +- *(8) BroadcastHashJoin [cs_item_sk#133], [i_item_sk#500], Inner, BuildRight, false
                        :     :- *(8) Project [cs_sold_date_sk#118, cs_item_sk#133, cs_sales_price#139, cr_refunded_cash#271, w_state#196]
                        :     :  +- *(8) BroadcastHashJoin [cs_warehouse_sk#132], [w_warehouse_sk#186], Inner, BuildRight, false
                        :     :     :- *(8) Project [cs_sold_date_sk#118, cs_warehouse_sk#132, cs_item_sk#133, cs_sales_price#139, cr_refunded_cash#271]
                        :     :     :  +- *(8) SortMergeJoin [cs_order_number#135L, cs_item_sk#133], [cr_order_number#264L, cr_item_sk#250], LeftOuter
                        :     :     :     :- *(6) Sort [cs_order_number#135L ASC NULLS FIRST, cs_item_sk#133 ASC NULLS FIRST], false, 0
                        :     :     :     :  +- AQEShuffleRead coalesced
                        :     :     :     :     +- ShuffleQueryStage 0
                        :     :     :     :        +- Exchange hashpartitioning(cs_order_number#135L, cs_item_sk#133, 200), ENSURE_REQUIREMENTS, [id=#95768]
                        :     :     :     :           +- *(1) Filter ((isnotnull(cs_warehouse_sk#132) AND isnotnull(cs_item_sk#133)) AND isnotnull(cs_sold_date_sk#118))
                        :     :     :     :              +- *(1) ColumnarToRow
                        :     :     :     :                 +- FileScan parquet [cs_sold_date_sk#118,cs_warehouse_sk#132,cs_item_sk#133,cs_order_number#135L,cs_sales_price#139] Batched: true, DataFilters: [isnotnull(cs_warehouse_sk#132), isnotnull(cs_item_sk#133), isnotnull(cs_sold_date_sk#118)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_warehouse_sk), IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_warehouse_sk:int,cs_item_sk:int,cs_order_number:bigint,cs_sales_pri...
                        :     :     :     +- *(7) Sort [cr_order_number#264L ASC NULLS FIRST, cr_item_sk#250 ASC NULLS FIRST], false, 0
                        :     :     :        +- AQEShuffleRead coalesced
                        :     :     :           +- ShuffleQueryStage 1
                        :     :     :              +- Exchange hashpartitioning(cr_order_number#264L, cr_item_sk#250, 200), ENSURE_REQUIREMENTS, [id=#95785]
                        :     :     :                 +- *(2) Filter (isnotnull(cr_order_number#264L) AND isnotnull(cr_item_sk#250))
                        :     :     :                    +- *(2) ColumnarToRow
                        :     :     :                       +- FileScan parquet [cr_item_sk#250,cr_order_number#264L,cr_refunded_cash#271] Batched: true, DataFilters: [isnotnull(cr_order_number#264L), isnotnull(cr_item_sk#250)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_returns.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)], ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint,cr_refunded_cash:decimal(7,2)>
                        :     :     +- BroadcastQueryStage 2
                        :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#95804]
                        :     :           +- *(3) Filter isnotnull(w_warehouse_sk#186)
                        :     :              +- *(3) ColumnarToRow
                        :     :                 +- FileScan parquet [w_warehouse_sk#186,w_state#196] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#186)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/warehouse.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_state:string>
                        :     +- BroadcastQueryStage 3
                        :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#95823]
                        :           +- *(4) Project [i_item_sk#500, i_item_id#501]
                        :              +- *(4) Filter (((isnotnull(i_current_price#505) AND (i_current_price#505 >= 0.99)) AND (i_current_price#505 <= 1.49)) AND isnotnull(i_item_sk#500))
                        :                 +- *(4) ColumnarToRow
                        :                    +- FileScan parquet [i_item_sk#500,i_item_id#501,i_current_price#505] Batched: true, DataFilters: [isnotnull(i_current_price#505), (i_current_price#505 >= 0.99), (i_current_price#505 <= 1.49), is..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,0.99), LessThanOrEqual(i_current_..., ReadSchema: struct<i_item_sk:int,i_item_id:string,i_current_price:decimal(7,2)>
                        +- BroadcastQueryStage 4
                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#95842]
                              +- *(5) Filter (((isnotnull(d_date#600) AND (d_date#600 >= 2002-01-28)) AND (d_date#600 <= 2002-03-29)) AND isnotnull(d_date_sk#598))
                                 +- *(5) ColumnarToRow
                                    +- FileScan parquet [d_date_sk#598,d_date#600] Batched: true, DataFilters: [isnotnull(d_date#600), (d_date#600 >= 2002-01-28), (d_date#600 <= 2002-03-29), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2002-01-28), LessThanOrEqual(d_date,2002-03-29), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>
+- == Initial Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[w_state#196 ASC NULLS FIRST,i_item_id#501 ASC NULLS FIRST], output=[w_state#196,i_item_id#501,sales_before#10366,sales_after#10367])
   +- HashAggregate(keys=[w_state#196, i_item_id#501], functions=[sum(CASE WHEN (d_date#600 < 2002-02-27) THEN CheckOverflow((promote_precision(cast(cs_sales_price#139 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#271 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END), sum(CASE WHEN (d_date#600 >= 2002-02-27) THEN CheckOverflow((promote_precision(cast(cs_sales_price#139 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#271 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END)], output=[w_state#196, i_item_id#501, sales_before#10366, sales_after#10367])
      +- Exchange hashpartitioning(w_state#196, i_item_id#501, 200), ENSURE_REQUIREMENTS, [id=#95710]
         +- HashAggregate(keys=[w_state#196, i_item_id#501], functions=[partial_sum(CASE WHEN (d_date#600 < 2002-02-27) THEN CheckOverflow((promote_precision(cast(cs_sales_price#139 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#271 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_date#600 >= 2002-02-27) THEN CheckOverflow((promote_precision(cast(cs_sales_price#139 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#271 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END)], output=[w_state#196, i_item_id#501, sum#10378, isEmpty#10379, sum#10380, isEmpty#10381])
            +- Project [cs_sales_price#139, cr_refunded_cash#271, w_state#196, i_item_id#501, d_date#600]
               +- BroadcastHashJoin [cs_sold_date_sk#118], [d_date_sk#598], Inner, BuildRight, false
                  :- Project [cs_sold_date_sk#118, cs_sales_price#139, cr_refunded_cash#271, w_state#196, i_item_id#501]
                  :  +- BroadcastHashJoin [cs_item_sk#133], [i_item_sk#500], Inner, BuildRight, false
                  :     :- Project [cs_sold_date_sk#118, cs_item_sk#133, cs_sales_price#139, cr_refunded_cash#271, w_state#196]
                  :     :  +- BroadcastHashJoin [cs_warehouse_sk#132], [w_warehouse_sk#186], Inner, BuildRight, false
                  :     :     :- Project [cs_sold_date_sk#118, cs_warehouse_sk#132, cs_item_sk#133, cs_sales_price#139, cr_refunded_cash#271]
                  :     :     :  +- SortMergeJoin [cs_order_number#135L, cs_item_sk#133], [cr_order_number#264L, cr_item_sk#250], LeftOuter
                  :     :     :     :- Sort [cs_order_number#135L ASC NULLS FIRST, cs_item_sk#133 ASC NULLS FIRST], false, 0
                  :     :     :     :  +- Exchange hashpartitioning(cs_order_number#135L, cs_item_sk#133, 200), ENSURE_REQUIREMENTS, [id=#95690]
                  :     :     :     :     +- Filter ((isnotnull(cs_warehouse_sk#132) AND isnotnull(cs_item_sk#133)) AND isnotnull(cs_sold_date_sk#118))
                  :     :     :     :        +- FileScan parquet [cs_sold_date_sk#118,cs_warehouse_sk#132,cs_item_sk#133,cs_order_number#135L,cs_sales_price#139] Batched: true, DataFilters: [isnotnull(cs_warehouse_sk#132), isnotnull(cs_item_sk#133), isnotnull(cs_sold_date_sk#118)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_sales.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cs_warehouse_sk), IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_warehouse_sk:int,cs_item_sk:int,cs_order_number:bigint,cs_sales_pri...
                  :     :     :     +- Sort [cr_order_number#264L ASC NULLS FIRST, cr_item_sk#250 ASC NULLS FIRST], false, 0
                  :     :     :        +- Exchange hashpartitioning(cr_order_number#264L, cr_item_sk#250, 200), ENSURE_REQUIREMENTS, [id=#95691]
                  :     :     :           +- Filter (isnotnull(cr_order_number#264L) AND isnotnull(cr_item_sk#250))
                  :     :     :              +- FileScan parquet [cr_item_sk#250,cr_order_number#264L,cr_refunded_cash#271] Batched: true, DataFilters: [isnotnull(cr_order_number#264L), isnotnull(cr_item_sk#250)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/catalog_returns.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)], ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint,cr_refunded_cash:decimal(7,2)>
                  :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#95697]
                  :     :        +- Filter isnotnull(w_warehouse_sk#186)
                  :     :           +- FileScan parquet [w_warehouse_sk#186,w_state#196] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#186)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/warehouse.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_state:string>
                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#95701]
                  :        +- Project [i_item_sk#500, i_item_id#501]
                  :           +- Filter (((isnotnull(i_current_price#505) AND (i_current_price#505 >= 0.99)) AND (i_current_price#505 <= 1.49)) AND isnotnull(i_item_sk#500))
                  :              +- FileScan parquet [i_item_sk#500,i_item_id#501,i_current_price#505] Batched: true, DataFilters: [isnotnull(i_current_price#505), (i_current_price#505 >= 0.99), (i_current_price#505 <= 1.49), is..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/item.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,0.99), LessThanOrEqual(i_current_..., ReadSchema: struct<i_item_sk:int,i_item_id:string,i_current_price:decimal(7,2)>
                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#95705]
                     +- Filter (((isnotnull(d_date#600) AND (d_date#600 >= 2002-01-28)) AND (d_date#600 <= 2002-03-29)) AND isnotnull(d_date_sk#598))
                        +- FileScan parquet [d_date_sk#598,d_date#600] Batched: true, DataFilters: [isnotnull(d_date#600), (d_date#600 >= 2002-01-28), (d_date#600 <= 2002-03-29), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/mnt/bigdata/tpcds/sf100-parquet/date_dim.parquet], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2002-01-28), LessThanOrEqual(d_date,2002-03-29), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>
